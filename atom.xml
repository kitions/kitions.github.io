<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Filip</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kitions.github.io/"/>
  <updated>2023-03-23T03:18:57.810Z</updated>
  <id>https://kitions.github.io/</id>
  
  <author>
    <name>link</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Next.js - Postcss-scss - bug</title>
    <link href="https://kitions.github.io/2023/03/23/230323Next.js%20-%20Postcss-scss%20-%20bug/"/>
    <id>https://kitions.github.io/2023/03/23/230323Next.js - Postcss-scss - bug/</id>
    <published>2023-03-23T03:18:55.000Z</published>
    <updated>2023-03-23T03:18:57.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next-js-Postcss-scss-bug"><a href="#Next-js-Postcss-scss-bug" class="headerlink" title="Next.js - Postcss-scss - bug"></a>Next.js - Postcss-scss - bug</h1><p> background-image问题</p><p>不能在background中写双引号</p><p><code>background: URL(../../public/images/test.png);</code></p><p>在scss中直接根据相对路径写，到时候next会接管打包，并引入cdn链接</p><p> postcss-scss的bug（已在4.0.6修复）：</p><p> - <a href="https://github.com/vercel/next.js/issues/21461" target="_blank" rel="noopener">https://github.com/vercel/next.js/issues/21461</a></p><p> - <a href="https://github.com/postcss/postcss-scss/issues/142" target="_blank" rel="noopener">https://github.com/postcss/postcss-scss/issues/142</a></p><p>正确写法：</p><p><img src="https://tuchuang-1253437688.cos.ap-shanghai.myqcloud.com/md%E5%9B%BE%E5%BA%8A/image-20230323110759068.png" alt="image-20230323110759068"></p><p><img src="https://tuchuang-1253437688.cos.ap-shanghai.myqcloud.com/md%E5%9B%BE%E5%BA%8A/image-20230323110725151.png" alt="image-20230323110725151"></p><p><img src="https://tuchuang-1253437688.cos.ap-shanghai.myqcloud.com/md%E5%9B%BE%E5%BA%8A/image-20230323110654906.png" alt="image-20230323110654906"></p><p>打包后的产物：</p><p><img src="https://tuchuang-1253437688.cos.ap-shanghai.myqcloud.com/md%E5%9B%BE%E5%BA%8A/image-20230323110934853.png" alt="image-20230323110934853"></p>]]></content>
    
    <summary type="html">
    
      next.js scss background-image问题
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="next.js" scheme="https://kitions.github.io/tags/next-js/"/>
    
  </entry>
  
  <entry>
    <title>React状态管理库Recoil浅入浅出</title>
    <link href="https://kitions.github.io/2022/11/10/221013Recoil/"/>
    <id>https://kitions.github.io/2022/11/10/221013Recoil/</id>
    <published>2022-11-10T06:50:40.000Z</published>
    <updated>2022-11-11T09:04:20.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React状态管理库Recoil浅入浅出"><a href="#React状态管理库Recoil浅入浅出" class="headerlink" title="React状态管理库Recoil浅入浅出"></a>React状态管理库Recoil浅入浅出</h1><h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>Recoil 的 slogan 十分简单：一个react状态管理库（A state management library for React）</p><p>Recoil 的产生源于 Facebook 内部一个可视化数据分析相关的应用，在使用 React 的实现的过程中，因为现有状态管理工具不能很好的满足应用的需求，因此催生出了 Recoil 。</p><p>这个应用带有复杂的交互，可以被总结为以下特点：</p><ul><li>大量需要共享状态的场景</li><li>大量需要派生状态(基于某些状态计算出一个新的状态)的场景</li><li>状态可以被持久化，进而通过被持久化的状态恢复当时场景</li></ul><h1 id="二、注意📢"><a href="#二、注意📢" class="headerlink" title="二、注意📢"></a>二、注意📢</h1><p>但需要注意的是，此项目是facebook内部的实验性项目，截止2022年11月8日，此项目目前的最新的版本号是0.7.6，还没有出正式版本。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7xgyscibnj30ch0bjgm2.jpg" alt="image-20221108093737186"></p><p>包括其<a href="https://recoiljs.org/docs/api-reference/core/useRecoilTransaction" target="_blank" rel="noopener">官方文档</a>看着看着就会出来个 UNSTABLE 或者UNSAFE的标签</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7xh14qahrj313i0mzq70.jpg" alt="image-20221108093951738"></p><p>如果你的项目，大型项目或者维护很持久的项目（ps: 3、5年以上的）个人不是很推荐用，小项目可以试水，完全没有问题。写法很舒服，函数式调用及其简易。</p><h1 id="三、其他状态管理方案比较"><a href="#三、其他状态管理方案比较" class="headerlink" title="三、其他状态管理方案比较"></a>三、其他状态管理方案比较</h1><p>当然共享状态还有其他方法：</p><ul><li><p>React自身</p></li><li><p>Redux</p></li><li><p>Mobx</p></li><li><p>Context</p></li></ul><h3 id="3-1-各个方案NPM-Trends对比"><a href="#3-1-各个方案NPM-Trends对比" class="headerlink" title="3.1. 各个方案NPM Trends对比"></a>3.1. <a href="https://npmtrends.com/mobx-vs-recoil-vs-redux" target="_blank" rel="noopener">各个方案NPM Trends对比</a></h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7xsu7x6n5j311u0n9mza.jpg" alt="image-20221108162825008"></p><h3 id="3-2-Stars-对比"><a href="#3-2-Stars-对比" class="headerlink" title="3.2. Stars 对比"></a>3.2. Stars 对比</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7xsvd33xoj311208rgmd.jpg" alt="image-20221108162931404"></p><p>如果用这些方法的会出现什么问题或者说一些缺点不太舒服的地方？当然它们本身都很优秀，不然也不会那么大的下载量。</p><h3 id="3-3-React自身"><a href="#3-3-React自身" class="headerlink" title="3.3. React自身"></a>3.3. React自身</h3><p>React本身解决数据共享是通过提升状态来解决的，这个就自然就会因为某个组件的状态改变而导致所有的子组件重新渲染，尽管我们可以使用<code>memo</code>来优化，但是唤醒的问题依然存在，对比前后的Props的操作依然无法避免。另一个问题是，一旦又有一个组件需要观察共享的数据，那又需要继续提升数据，又麻烦了</p><h3 id="3-4-Redux"><a href="#3-4-Redux" class="headerlink" title="3.4. Redux"></a>3.4. Redux</h3><p> Redux 其大致工作流程，一般来说是这样的：</p><ol><li>用户在页面上进行某些操作，通过 <code>dispatch</code> 发送一个 <code>action</code>。</li><li>Redux 接收到这个 <code>action</code> 后通过 <code>reducer</code> 函数获取到下一个状态。</li><li>将新状态更新进 <code>store</code>，<code>store</code> 更新后通知页面进行重新渲染。</li></ol><p>从这个流程中不难看出，Redux 的核心就是一个 <strong><em>「发布-订阅」</em></strong> 模式。view 订阅了 store 的变化，一旦 store 状态发生修改就会通知所有的订阅者，view 接收到通知之后会进行重新渲染。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h73p29oai8j315r0ikdhs.jpg" width="600"></p><h3 id="3-5-Mobx"><a href="#3-5-Mobx" class="headerlink" title="3.5. Mobx"></a>3.5. Mobx</h3><p>Mobx 是 React 的另一种经过战火洗礼的状态管理方案，和 Redux 不同的地方是 Mobx 是一个响应式编程（<code>Reactive Programming</code>）库</p><p>Mobx 借助于装饰器的实现，使得代码更加简洁易懂。由于使用了可观察对象，所以 Mobx 可以做到直接修改状态，而不必像 Redux 一样编写繁琐的 actions 和 reducers。</p><p>这里的 <code>action</code> 不是必须的，但为了保证状态不会被随意修改，还是建议开启严格模式，只允许在 <code>action</code> 里面修改状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; action, observable &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  @observable count = <span class="number">0</span>;</span><br><span class="line">  @action increment() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  @action decrement() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7xtcapjklj313206bwex.jpg" alt="image-20221013153014972"></p><h3 id="3-6-Redux-和-Mobx总结"><a href="#3-6-Redux-和-Mobx总结" class="headerlink" title="3.6. Redux 和 Mobx总结"></a>3.6. Redux 和 Mobx总结</h3><ul><li>一个Action会唤醒所有的订阅数据的组件，即使他们订阅的数据并没有发生变化，而且只能在数据变化后，通过浅比较（或者深比较）的方式对比前后的数据是否一致，来阻止无效渲染。（Mobx基本同理）</li><li>只能通过状态提升至公共祖先来共享状态，但可能导致一颗巨大的树重新渲染。</li><li>上下文（context）只能存储一个值，而不能存储一组不确定的值，且每个值都有自己的使用者（consumers）。</li><li>这两种方式都很难将组件树的叶子节点（使用状态的地方）与组件树的顶层（状态必须存在的地方）进行代码分拆。</li></ul><h3 id="3-7-Context"><a href="#3-7-Context" class="headerlink" title="3.7. Context"></a>3.7. Context</h3><p>如果仅仅在依赖数据变化时候才更新的场景，使用Context可以完美的解决，当Context的数据变化时，只有监听了相关Context的组件才会重新渲染。但Context的问题是过于动态性的场景可能有些许问题，比如用户通过点击按钮添加内部的某个小组件，这样的话 对应的Context也需要动态的插入到顶层组件，方便共享数据给其他组件，但是由于React的diff策略，如果在顶层组件动态插入Context或任何组件，就会导致子组件树不断被 销毁重建，损耗性能。</p><h1 id="四、Recoil介绍"><a href="#四、Recoil介绍" class="headerlink" title="四、Recoil介绍"></a>四、Recoil介绍</h1><p>Recoil的设计思想就是我们把状态拆分成一个个的Atom（原子），再由Selector派生出更多的状态，最后React的组件树订阅自己需要的状态，当有原子状态更新，只有改变的原子及其下游节点有订阅他们的组件才会更新。</p><p>Copy：也就是说，Recoil其实构建了一个<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE" target="_blank" rel="noopener">有向无环图</a>，这个图和React组件树正交，他的状态和React组件树是完全解耦的。</p><p>Recoil独立于React，单独构建出一套自己的状态树，这个状态树平行于组件树而存在，状态树由Atom和Selector构成。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7xh4r6kdnj30y20u00v9.jpg" alt="img"></p><p>状态树的基本单位是Atom（原子），一个Atom表示一份可变，可被订阅的状态，当Atom代表的状态改变时，只会重新渲染订阅了这个Atom的组件，而不会影响其他组件。</p><h1 id="五、Recoil使用"><a href="#五、Recoil使用" class="headerlink" title="五、Recoil使用"></a>五、Recoil使用</h1><p>Recoil是专门为React设计的状态管理库，他的API满满的“react风格”。 Recoil 只支持hooks API，在使用上来说可以说十分简洁。</p><h4 id="5-1-RecoilRoot"><a href="#5-1-RecoilRoot" class="headerlink" title="5.1 RecoilRoot"></a>5.1 RecoilRoot</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom/client'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RecoilRoot &#125; <span class="keyword">from</span> <span class="string">'recoil'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>) <span class="keyword">as</span> HTMLElement</span><br><span class="line">);</span><br><span class="line">root.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;RecoilRoot&gt;</span><br><span class="line">      &lt;React.Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;App /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/React.Suspense&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>RecoilRoot&gt;</span><br><span class="line">  &lt;<span class="regexp">/React.StrictMode&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h5 id="useRecoilState"><a href="#useRecoilState" class="headerlink" title="useRecoilState"></a>useRecoilState</h5><p>当组件同时需要读写状态时，推荐使用该 hook。</p><p><code>const [comState, setComState] = useRecoilState(commonState);</code></p><h5 id="useRecoilValue"><a href="#useRecoilValue" class="headerlink" title="useRecoilValue"></a>useRecoilValue</h5><p>当一个组件需要在不写入 state 的情况下读取 state 时，推荐使用该 hook。</p><p><code>const comState1 = useRecoilValue(commonState);</code></p><h5 id="useSetRecoilState"><a href="#useSetRecoilState" class="headerlink" title="useSetRecoilState"></a>useSetRecoilState</h5><p>​    返回一个 setter 函数，用来更新可写 Recoil state 的值，状态变化不会导致组件重新渲染。</p><p>​    当一个组件需要写入而不需要读取 state 时，推荐使用此 hook。</p><p>​    如果组件使用了 <code>useRecoilState()</code>来获取 setter 函数，那么同时它也会订阅更新，并在 atom 或 selector 更新时重新渲染。使用 <code>useSetRecoilState()</code> 允许组件在值发生改变时而不用给组件订阅重新渲染的情况下设置值。</p><p><code>const setComState = useSetRecoilState(commonState);</code></p><h4 id="5-2-Atom"><a href="#5-2-Atom" class="headerlink" title="5.2 Atom"></a>5.2 Atom</h4><p>一个 <strong>atom</strong> 代表一个<strong>状态</strong>。Atom 可在任意组件中进行读写。读取 atom 值的组件隐式<strong>订阅</strong>了该 atom，因此任何 atom 的更新都将导致订阅该 atom 的组件重新渲染：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;atom&#125; <span class="keyword">from</span> <span class="string">"recoil"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textState = atom(&#123;</span><br><span class="line">  key: <span class="string">'textState'</span>, <span class="comment">// // 全局下保持唯一性</span></span><br><span class="line">  <span class="keyword">default</span>: <span class="string">''</span>, <span class="comment">// 初始值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在需要向 atom 读取或写入的组件中，应该使用 <code>useRecoilState()</code>，如下所示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRecoilState, useRecoilValue, useSetRecoilState&#125; <span class="keyword">from</span> <span class="string">"recoil"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;textState, charCountState&#125; <span class="keyword">from</span> <span class="string">"../store/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HomePage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;HomePage&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TextInput /</span>&gt;</span><br><span class="line">        &lt;CharacterCount /&gt;</span><br><span class="line">        &lt;SetButton /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function TextInput() &#123;</span></span><br><span class="line"><span class="regexp">  const [text, setText] = useRecoilState(textState);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const onChange = event =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    setText(event.target.value);</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" value=&#123;text&#125; onChange=&#123;onChange&#125; /</span>&gt;</span><br><span class="line">      &lt;p&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> Echo: &#123;text&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-Selector"><a href="#5-3-Selector" class="headerlink" title="5.3 Selector"></a>5.3 Selector</h4><p><strong>selector</strong> 代表一个<strong>派生状态</strong>，派生状态是状态的<strong>转换</strong>。你可以将派生状态视为将状态传递给以某种方式修改给定状态的纯函数的输出：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;selector&#125; <span class="keyword">from</span> <span class="string">"recoil"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> charCountState = selector(&#123;</span><br><span class="line">  key: <span class="string">'charCountState'</span>, <span class="comment">// 全局下保持唯一性</span></span><br><span class="line">  get: <span class="function">(<span class="params">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> text = get(textState);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text.length;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里想要获取textState的长度，因此只需读取值就可以 了，可以使用 <code>useRecoilValue()</code> 这一 hook：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRecoilValue&#125; <span class="keyword">from</span> <span class="string">"recoil"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CharacterCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = useRecoilValue(charCountState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Character Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、Example"><a href="#六、Example" class="headerlink" title="六、Example"></a>六、Example</h1><p><a href="https://github.com/kitions/my-app-recoil" target="_blank" rel="noopener">ToList应用</a></p><h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><p>虽然React相关的状态管理库很多，但是Recoil的一些思想还是非常先进的，社区对Recoil关注度也很高，目前 star 18k。但还是跟上述的注意事项一样，还不是稳定版本，npm下载量并不是特别高，大项目生产环境使用不推荐。</p><h1 id="附1-简易版Recoil"><a href="#附1-简易版Recoil" class="headerlink" title="附1. 简易版Recoil"></a>附1. 简易版Recoil</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect, useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An interface with the disconnect method. This could just be a function</span></span><br><span class="line"><span class="comment">// but I think having it as an object is more readable.</span></span><br><span class="line">interface Disconnect &#123;</span><br><span class="line">    disconnect: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `Stateful` is the base class that manages states and subscriptions.</span></span><br><span class="line"><span class="comment">// Both Atom and Selector are derived from it.</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Stateful</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// This is a set of unique callbacks. The callbacks are listeners</span></span><br><span class="line">    <span class="comment">// that have subscribed</span></span><br><span class="line">    private listeners = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;<span class="function">(<span class="params">value: T</span>) =&gt;</span> <span class="keyword">void</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The value property is protected because it needs to be manually</span></span><br><span class="line">    <span class="comment">// assigned in the constructor (because of inheritance quirks)</span></span><br><span class="line">    <span class="keyword">constructor</span>(protected value: T) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple method for returning the state. This could return a deep</span></span><br><span class="line">    <span class="comment">// copy if you wanted to be extra cautious.</span></span><br><span class="line">    snapshot(): T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The emit method is what updates all the listeners with the new state</span></span><br><span class="line">    private emit() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> listener <span class="keyword">of</span> <span class="built_in">Array</span>.from(<span class="keyword">this</span>.listeners)) &#123;</span><br><span class="line">            listener(<span class="keyword">this</span>.snapshot());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The update method is the canonical way to set state. It uses object</span></span><br><span class="line">    <span class="comment">// equality to prevent unnecessary renders. A deep comparison could be</span></span><br><span class="line">    <span class="comment">// performed for complex objects that are often re-created but are the</span></span><br><span class="line">    <span class="comment">// same.</span></span><br><span class="line">    protected update(value: T) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.value !== value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="comment">// After updating the value, let all the listeners know there's a</span></span><br><span class="line">            <span class="comment">// new state.</span></span><br><span class="line">            <span class="keyword">this</span>.emit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The subscribe method lets consumers listen for state updates. Calling</span></span><br><span class="line">    <span class="comment">// the `disconnect` method will stop the callback from being called in</span></span><br><span class="line">    <span class="comment">// the future.</span></span><br><span class="line">    subscribe(callback: <span class="function">(<span class="params">value: T</span>) =&gt;</span> <span class="keyword">void</span>): Disconnect &#123;</span><br><span class="line">        <span class="keyword">this</span>.listeners.add(callback);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            disconnect: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.listeners.delete(callback);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The atom is a thin wrapper around the `Stateful` base class. It has a</span></span><br><span class="line"><span class="comment">// single method for updating the state.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note: `useState` allows you to pass a reducer function, you could add support</span></span><br><span class="line"><span class="comment">// for this if you wanted.</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Atom</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Stateful</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    public setState(value: T) &#123;</span><br><span class="line">        <span class="keyword">super</span>.update(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Recoil selector function is a bit gnarley. Essentially the "get" function</span></span><br><span class="line"><span class="comment">// is the way that selectors can subscribe to other selectors and atoms.</span></span><br><span class="line">type SelectorGenerator&lt;T&gt; = <span class="function">(<span class="params">context: &#123; get: &lt;V&gt;(dep: Stateful&lt;V&gt;</span>) =&gt;</span> V &#125;) =&gt; T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The selector class. It extends `Stateful` so that it can be used as a value like</span></span><br><span class="line"><span class="comment">// atoms.</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Selector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Stateful</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// Keep track of all the registered dependencies. We want to make sure we only</span></span><br><span class="line">    <span class="comment">// re-render once when they change.</span></span><br><span class="line">    private registeredDeps = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;Stateful&lt;any&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When the get function is called, it allows consumers to subscribe to state</span></span><br><span class="line">    <span class="comment">// changes. This method subscribes to the dependency if it hasn't been already,</span></span><br><span class="line">    <span class="comment">// then returns it's value.</span></span><br><span class="line">    private addDep&lt;V&gt;(dep: Stateful&lt;V&gt;): V &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.registeredDeps.has(dep)) &#123;</span><br><span class="line">            dep.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.updateSelector());</span><br><span class="line">            <span class="keyword">this</span>.registeredDeps.add(dep);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dep.snapshot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A helper method for running the internal generator method, updating dependencies,</span></span><br><span class="line">    <span class="comment">// returning the computed state and updating all listeners.</span></span><br><span class="line">    private updateSelector() &#123;</span><br><span class="line">        <span class="keyword">this</span>.update(<span class="keyword">this</span>.generate(&#123; <span class="attr">get</span>: <span class="function"><span class="params">dep</span> =&gt;</span> <span class="keyword">this</span>.addDep(dep) &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private readonly generate: SelectorGenerator&lt;T&gt;) &#123;</span><br><span class="line">        <span class="comment">// This needs to be undefined initially because of Typescript's inheritance rules</span></span><br><span class="line">        <span class="comment">// It's effectively "initialised memory"</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="literal">undefined</span> <span class="keyword">as</span> any);</span><br><span class="line">        <span class="keyword">this</span>.value = generate(&#123; <span class="attr">get</span>: <span class="function"><span class="params">dep</span> =&gt;</span> <span class="keyword">this</span>.addDep(dep) &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A helper function for creating a new Atom</span></span><br><span class="line"><span class="comment">// The `key` member is currently unused. I just kept it around to maintain a similar</span></span><br><span class="line"><span class="comment">// API to Recoil.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">atom</span>&lt;<span class="title">V</span>&gt;(<span class="params">value: &#123; key: string; default: V &#125;</span>): <span class="title">Atom</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Atom(value.default);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A helper method for creating a new Selector</span></span><br><span class="line"><span class="comment">// Likewise the `key` method is just for looking like Recoil.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">selector</span>&lt;<span class="title">V</span>&gt;(<span class="params">value: &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    key: string;</span></span></span><br><span class="line"><span class="function"><span class="params">    get: SelectorGenerator&lt;V&gt;;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>): <span class="title">Selector</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Selector(value.get);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This hook will re-render whenever the supplied `Stateful` value changes.</span></span><br><span class="line"><span class="comment">// It can be used with `Selector`s or `Atom`s.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useCoiledValue</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: Stateful&lt;T&gt;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [, updateState] = useState(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; disconnect &#125; = value.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> updateState(&#123;&#125;));</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> disconnect();</span><br><span class="line">    &#125;, [value]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value.snapshot();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Similar to the above method, but it also lets you set state.</span></span><br><span class="line">export function useCoiledState&lt;T&gt;(atom: Atom&lt;T&gt;): [T, (value: T) =&gt; void] &#123;</span><br><span class="line">    <span class="keyword">const</span> value = useCoiledValue(atom);</span><br><span class="line">    <span class="keyword">return</span> [value, useCallback(<span class="function"><span class="params">value</span> =&gt;</span> atom.setState(value), [atom])];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://recoiljs.org/zh-hans/" target="_blank" rel="noopener">Recoil官网</a></li><li><a href="https://juejin.cn/post/6936117926713884686" target="_blank" rel="noopener">React 下一代状态管理库 Recoil by 字节</a></li><li>👍🏻<a href="https://juejin.cn/post/7006253866610229256" target="_blank" rel="noopener">React下一代状态管理库——recoil by 头条前端</a></li><li><a href="https://juejin.cn/post/6889763592947564551" target="_blank" rel="noopener">Recoil 用法及原理浅析</a></li></ol>]]></content>
    
    <summary type="html">
    
      Recoil 的产生源于 Facebook 内部一个可视化数据分析相关的应用，在使用 React 的实现的过程中，因为现有状态管理工具不能很好的满足应用的需求，因此催生出了 Recoil 。
    
    </summary>
    
      <category term="React" scheme="https://kitions.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Git LFS大文件</title>
    <link href="https://kitions.github.io/2022/07/26/220726Git%20LFS%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <id>https://kitions.github.io/2022/07/26/220726Git LFS大文件/</id>
    <published>2022-07-26T03:55:15.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-LFS大文件"><a href="#Git-LFS大文件" class="headerlink" title="Git LFS大文件"></a>Git LFS大文件</h1><h4 id="什么是git-lfs"><a href="#什么是git-lfs" class="headerlink" title="什么是git lfs"></a>什么是git lfs</h4><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgit-lfs.github.com%2F" target="_blank" rel="noopener">Git LFS</a>（Large File Storage），用以帮助git管理比较大的文件。git的diff等是基于文件。对于二进制文件来说，git需要存储每次提交的变动。git fls对于追踪的文件只会保存一个指向其的指针。不会在本地仓库保存你每次提交的所有版本。对于历史提交版本，基本上我们都很少去动，不需要检出。所以这样极大的节省了空间和仓库拉取速度。<br> <strong>核心</strong>：把需要进行版本管理、但是占用很大空间的文件独立于Git仓库管理，加快clone仓库速度。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>lfs目前是git扩展，没有被加入git核心。所以就需要有个安装的步骤。<br> <strong>注意</strong>：安装git lfs需要 git版本&gt;=1.8.2</p><p><strong>Mac</strong></p><ol><li>安装homebrew(安装过的下一步)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><ol><li>brew install git-lfs</li><li>git lfs install</li></ol><p><strong>Windows</strong></p><ol><li>下载安装<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgit-lfs%2Fgit-lfs%2Freleases" target="_blank" rel="noopener">windows installer</a></li><li>运行windows installer</li><li>git lfs install</li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>cd进项目目录<br> 首先git lfs track ”XX“来告诉lfs需要处理哪些文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git lfs track <span class="string">"*.a"</span>  <span class="comment">// 追踪所有后缀为a的文件</span></span><br></pre></td></tr></table></figure><p>此命令执行后，会在项目根目录下创建一个名为”.gitattributes“的文件。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat .gitattributes      </span><br><span class="line">xx.a <span class="built_in">filter</span>=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：.gitattributes文件是需要加入版本控制的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .gitattributes</span><br><span class="line">git <span class="keyword">add</span> xx.a</span><br><span class="line">git commit -m <span class="string">"Add xx.a"</span></span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li><code>git lfs ls-files</code> 可以显示当前被lfs追踪的文件列表</li><li><code>git lfs track</code> 查看现有的文件追踪模式</li><li><code>git lfs untrack &quot;*xx.a&quot;</code> 取消git fls对xx.a的追踪管理</li><li><code>git lfs version</code> 查看当前所用git lfs版本</li><li><code>git lfs pull</code> 如果起之前拉代码时，没有同时获取lfs对象，之后又需要将被lfs追踪的文件时，可执行此命令来拉取</li></ol><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://help.aliyun.com/document_detail/206889.html" target="_blank" rel="noopener">阿里云 - 如何使用 Git LFS</a></p>]]></content>
    
    <summary type="html">
    
      Git LFS大文件介绍和使用
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="git" scheme="https://kitions.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git项目过大，.git历史大文件清理</title>
    <link href="https://kitions.github.io/2022/07/25/220725Git%E9%A1%B9%E7%9B%AE%E8%BF%87%E5%A4%A7%20%E5%A4%A7%E6%96%87%E4%BB%B6%E6%B8%85%E7%90%86/"/>
    <id>https://kitions.github.io/2022/07/25/220725Git项目过大 大文件清理/</id>
    <published>2022-07-25T09:25:57.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git项目过大，-git历史大文件清理"><a href="#Git项目过大，-git历史大文件清理" class="headerlink" title="Git项目过大，.git历史大文件清理"></a>Git项目过大，.git历史大文件清理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-list --objects --all | grep &quot;$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk &apos;&#123;print$1&#125;&apos;)&quot;</span><br></pre></td></tr></table></figure><blockquote><p><code>rev-list</code>命令用来列出Git仓库中的提交，我们用它来列出所有提交中涉及的文件名及其ID。 该命令可以指定只显示某个引用（或分支）的上下游的提交。</p><p><code>--objects</code>：列出该提交涉及的所有文件ID。</p><p><code>--all</code>：所有分支的提交，相当于指定了位于/refs下的所有引用。</p><p><code>verify-pack</code>命令用于显示已打包的内容。</p></blockquote><h1 id="Function-1："><a href="#Function-1：" class="headerlink" title="Function  1："></a>Function  1：</h1><p>git如何永久删除历史文件（不小心提交的密码、build、 二进制等 均可以删除） 如果知道要删除的文件可使用如下命令（实际使用过程把build 替换成自己的文件路径， 我这里不保留cache到磁盘 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --force --index-filter &apos;git rm -rf --ignore-unmatch build&apos; --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure><p>如果要保留文件到磁盘可使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --force --index-filter &apos;git rm --cached -r --ignore-unmatch build&apos; --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure><p>如果不知道要删除的文件是哪个导致仓库大可先查找大文件（也可以用bfg工具）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-list --objects --all | grep &quot;$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk &apos;&#123;print$1&#125;&apos;)&quot;</span><br></pre></td></tr></table></figure><p>修改可能需要很久，完成后出现类似下面的提示就标示删除成功 Rewrite xxxx (266⁄266)</p><h2 id="Ref-‘refs-heads-master’-was-rewritten"><a href="#Ref-‘refs-heads-master’-was-rewritten" class="headerlink" title="Ref ‘refs/heads/master’ was rewritten"></a>Ref ‘refs/heads/master’ was rewritten</h2><p>强制推送到remote git push origin master –force 接下来对git 仓库进行瘦身，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .git/refs/original/</span><br><span class="line">git reflog expire --expire=now --all</span><br><span class="line">git gc --prune=now</span><br><span class="line">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure><p>截止执行最关键的一步，也是最危险的一步（同步.git到远端），好多人说执行完上面的remote的仓库大小不变，重新克隆下来依然很大，其实是因为没有同步gc 后的仓库到远端，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**git push --mirror**</span><br></pre></td></tr></table></figure><p>参考： </p><p><a href="https://www.cnblogs.com/shines77/p/3460274.html" target="_blank" rel="noopener">Git如何永久删除文件(包括历史记录)</a><br><a href="https://docs.github.com/cn/free-pro-team@latest/github/managing-large-files/removing-files-from-a-repositorys-history" target="_blank" rel="noopener">从仓库的历史记录中删除文件</a><br><a href="http://palanceli.com/2017/12/18/2017/1218GitReduceSize/" target="_blank" rel="noopener">git瘦身</a><br><a href="https://blog.walterlv.com/git/2017/09/18/delete-a-file-from-whole-git-history.html" target="_blank" rel="noopener">彻底删除 Git 仓库中的文件避免占用大量磁盘空间</a><br><a href="https://rtyley.github.io/bfg-repo-cleaner/#usage" target="_blank" rel="noopener">BFG an alternative to git-filter-branch</a><br><a href="https://linux.cn/article-8556-1.html" target="_blank" rel="noopener">如何瘦身 Git 仓库</a><br><a href="http://iissnan.com/progit/about.html" target="_blank" rel="noopener">progit</a></p><p><a href="https://itcn.blog/p/201079769.html" target="_blank" rel="noopener">Git仓库瘦身–清除项目git仓库大文件</a></p><h1 id="Function-2："><a href="#Function-2：" class="headerlink" title="Function  2："></a>Function  2：</h1><p>Git如何永久删除文件(包括历史记录)<br> 有些时候不小心上传了一些敏感文件(例如密码)，或者不想上传的文件(没及时或忘了加到.gitignore里的)，而且上传的文件又特别大的时候, 这将导致别人clone你的代码或下载zip包的时候也必须更新或下载这些无用的文件，因此，有时需要一个方法，永久的删除这些文件(包括该文件的历史记录)。</p><p>首先, 可以参考 github 的帮助:</p><p><a href="https://help.github.com/articles/remove-sensitive-data" target="_blank" rel="noopener">https://help.github.com/articles/remove-sensitive-data</a></p><p>步骤一: 从库中清除文件<br>以Windows下为例(Linux类似)，打开项目的Git Bash，使用命令：</p><p>$ git filter-branch –force –index-filter ‘git rm –cached –ignore-unmatch path-to-your-remove-file’ –prune-empty –tag-name-filter cat – –all<br>其中，path-to-your-remove-file 就是你要删除的文件的相对路径(相对于git仓库的跟目录)，替换成你要删除的文件即可。 注意一点，这里的文件或文件夹，都不能以 ‘/‘ 开头，否则文件或文件夹会被认为是从 git 的安装目录开始。如果你要删除的目标不是文件，而是文件夹，那么请在 git rm –cached’ 命令后面添加 -r 命令，表示递归的删除（子）文件夹和文件夹下的文件，类似于 ‘rm -rf 命令。此外，如果你要删除的文件很多，可以写进一个.sh文件批量执行，如果文件或路径里有中文，由于MinGW或CygWin对中文路径设置比较麻烦，你可以使用通配符<em>号，例如：sound/music_</em>.mp3，这样就把sound目录下以music_开头的mp3文件都删除了。</p><p>例如这样， 新建一个 bash 脚本文件，<a href="http://del.sh/" target="_blank" rel="noopener">del.sh</a>：</p><p>#!/bin/bash</p><p>git filter-branch –force –index-filter ‘git rm –cached –ignore-unmatch projects/Moon.mp3’ –prune-empty –tag-name-filter cat – –all<br>git filter-branch –force –index-filter ‘git rm –cached –ignore-unmatch sound/Music_*.mp3’ –prune-empty –tag-name-filter cat – –all<br>如果你看到类似下面这样的，就说明删除成功了：</p><p>Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (266/266)<br># Ref ‘refs/heads/master’ was rewritten<br>如果显示 xxxxx unchanged， 说明repo里没有找到该文件, 请检查路径和文件名是否正确。</p><p>注意： 补充一点，如果你想以后也不会再上传这个文件或文件夹， 请把这个文件或文件夹添加到.gitignore文件里，然后再push你的repo。</p><p>步骤二: 推送我们修改后的repo<br>注意：下文以master分支为例，若其他分支也被rewritten了，则都需要专门push一次；若需要push的是保护分支，则必须先临时去除保护设置，等push之后再设置回来。</p><p>以强制覆盖的方式推送你的repo，命令如下：</p><p>$ git push origin master –force-with-lease<br>这个过程其实是重新上传我们的repo，比较耗时， 虽然跟删掉重新建一个repo有些类似，但是好处是保留了原有的更新记录，所以还是有些不同的。如果你实在不在意这些更新记录，也可以删掉重建，两者也差不太多，也许后者还更直观些。</p><p>执行结果类似下面：</p><p>Counting objects: 4669, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (4352/4352), done.<br>Writing objects: 100% (4666/4666), 35.16 MiB | 51 KiB/s, done.<br>Total 4666 (delta 1361), reused 0 (delta 0)<br>To <a href="https://github.com/defunkt/github-gem.git" target="_blank" rel="noopener">https://github.com/defunkt/github-gem.git</a><br> + beb839d…81f21f3 master -&gt; master (forced update)<br>为了能从打了 tag 的版本中也删除你所指定的文件或文件夹，您可以使用这样的命令来强制推送您的 Git tags：</p><p>$ git push origin master –force-with-lease –tags<br>步骤三: 清理和回收空间<br>虽然上面我们已经删除了文件，但是我们的repo里面仍然保留了这些objects， 等待垃圾回收(GC)，所以我们要用命令彻底清除它，并收回空间。</p><p>命令如下：</p><p>$ rm -rf .git/refs/original/</p><p>$ git reflog expire –expire=now –all</p><p>$ git gc –prune=now<br>Counting objects: 2437, done.<br># Delta compression using up to 4 threads.<br># Compressing objects: 100% (1378/1378), done.<br># Writing objects: 100% (2437/2437), done.<br># Total 2437 (delta 1461), reused 1802 (delta 1048)<br>$ git gc –aggressive –prune=now<br>Counting objects: 2437, done.<br># Delta compression using up to 4 threads.<br># Compressing objects: 100% (2426/2426), done.<br># Writing objects: 100% (2437/2437), done.<br># Total 2437 (delta 1483), reused 0 (delta 0)<br>注：注释部分是命令执行后的结果。</p><p>现在你再看看你的.git目录文件大小是不是变小了。</p>]]></content>
    
    <summary type="html">
    
      Git项目过大，.git历史大文件清理
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="git" scheme="https://kitions.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Electron 打包下载包慢问题</title>
    <link href="https://kitions.github.io/2022/07/15/220715Electron%20%E6%89%93%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%8C%85%E6%85%A2%E9%97%AE%E9%A2%98/"/>
    <id>https://kitions.github.io/2022/07/15/220715Electron 打包下载包慢问题/</id>
    <published>2022-07-15T09:47:05.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Electron-打包下载包慢问题"><a href="#Electron-打包下载包慢问题" class="headerlink" title="Electron 打包下载包慢问题"></a>Electron 打包下载包慢问题</h1><p>安装Electron时会判断缓存中是否有要下载的zip包，如果没有的话就去下载这个zip包。但是往往下载这个zip包时非常慢，总是下载不成功。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h47r1nyinmj20rn05omyu.jpg" alt="image-20220715174023362"></p><p>缓存的位置取决于操作系统，默认值为：<br>Linux：<code>$XDG_CACHE_HOME或~/.cache/electron/</code><br>苹果系统：<code>~/Library/Caches/electron/</code><br>Windows：<code>$LOCALAPPDATA/electron/Cache</code>或<code>~/AppData/Local/electron/Cache/</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h47r384ej1j20kn0h1q5z.jpg" alt="image-20220715174155879"></p><p>然后，<a href="https://github.com/electron/electron/releases" target="_blank" rel="noopener">下载</a>需要的electron对应版本的包, 放到上面提到的缓存地址中。</p><p>最后，在命令窗口中执行<code>npm install electron -g</code>,执行成功</p><p>再次打包<code>npm run package:win</code>  <code>npm run package:mac</code>，就ok</p>]]></content>
    
    <summary type="html">
    
      苹果路径为：~/Library/Caches/electron/，Windows为$LOCALAPPDATA/electron/Cache或~/AppData/Local/electron/Cache/
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="electron" scheme="https://kitions.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Git文件夹大小写敏感问题</title>
    <link href="https://kitions.github.io/2022/06/09/220609mac%E3%80%81linux%20-%20Git%E6%96%87%E4%BB%B6%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://kitions.github.io/2022/06/09/220609mac、linux - Git文件名大小写敏感问题/</id>
    <published>2022-06-09T03:49:53.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac、linux-Git文件夹大小写敏感问题"><a href="#mac、linux-Git文件夹大小写敏感问题" class="headerlink" title="mac、linux - Git文件夹大小写敏感问题"></a>mac、linux - Git文件夹大小写敏感问题</h1><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h31ugcqy9gj204u02dq2s.jpg" alt="企业微信截图_d64fbe84-9deb-4f01-a9be-13c5757b7872"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h31uhnhca9j20v706w3z5.jpg" alt="image-20220609114607932"></p><p>文件夹写的大写，路由写的小写，本地机器(Mac)打包的时候是正常的。一打包发版就有问题了</p><p><strong>mac/windows 环境下 Git在不设置大小写敏感规则的时候默认大小写是不敏感</strong></p><p><strong>打包机器是 Linux 的，而 Linux 下 Git是默认大小写敏感的。找不到文件夹</strong> </p><h3 id="FIX"><a href="#FIX" class="headerlink" title="FIX"></a><strong>FIX</strong></h3><p>方法一<br>删除文件，重新添加文件。（删除之前记得备份下文件内容）</p><p>方法二(推荐)<br>设置Git大小写敏感</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      mac/windows 环境下 Git在不设置大小写敏感规则的时候默认大小写是不敏感,打包机器是 Linux 的，而 Linux 下 Git是默认大小写敏感的。
    
    </summary>
    
      <category term="git" scheme="https://kitions.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://kitions.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装HomeAssisant及使用</title>
    <link href="https://kitions.github.io/2022/04/23/Docker%E5%AE%89%E8%A3%85HomeAssisant%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://kitions.github.io/2022/04/23/Docker安装HomeAssisant及使用/</id>
    <published>2022-04-23T13:39:56.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker安装HomeAssisant及使用"><a href="#Docker安装HomeAssisant及使用" class="headerlink" title="Docker安装HomeAssisant及使用"></a>Docker安装HomeAssisant及使用</h1><hr><p>HA 大名鼎鼎，是基于 Python3 的开源智能家居系统，非常适合运行在树莓派或本地服务器上。它集成了众多优秀的产品，比如 IFTTT 、 Arduino 、Google Assistant 、 Home Kit 、 MQTT 等。特点是运行在局域网内的设备上，相对比较注重隐私。</p><p>智能家居的最大问题之一，就是标准无法统一。在开源社区的努力下，已经支持 1000 多种硬件和软件接入。接入的软硬件，可以统一串联起来，设置自动化流程。包括我手头上零零碎碎的硬件也是各个品牌的，基于这个平台的特点，选择使用该开源项目作为主要的开发平台。homeassistant支持众多的智能家居品牌品类。</p><p><strong>Home Assistant 核心概念理解：组件、服务、状态</strong></p><p>在 Home Assistant 设计自动化中，我们总是在和这几个关键概念打交道：</p><p>组件：可以理解为 HA 允许接入的硬件或者软件服务，例如小米的灯（硬件）、摄像头（硬件）、麦克风（硬件）、脚本传感器（软件）、甚至自己编写的 custom component（软件，这个也是我们这次项目中主要使用到的能串起整个流程的核心组件）</p><p>服务：一个组件，会对外提供服务，例如一盏灯可以提供开关灯的服务，一个麦克风可以提供说话的服务。自己编写的一些脚本组件，也可以对外提供触发的服务</p><p>状态：一盏灯在当前是否开启着的，这是一个状态；</p><p>智能家居是一个非常复杂的场景，Home Assistant 作为一个智能家居平台，在设计之初就要考虑到开放性和复杂性。组件、服务、状态，这三个概念相当简洁，又全面，确实是非常优雅的设计。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8tztvftj21070futab.jpg" alt="Untitled"></p><p>配置</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8u3eahtj216n0eq0ui.jpg" alt="Untitled"></p><p>坑点：记得要选host而不是桥接模式，否则后面 homekit永远找不到</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8ubryxzj20hs0f374o.jpg" alt="Untitled"></p><p>这个图的原因就是因为没选host</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8uddbc1j20g40snac4.jpg" alt="Untitled"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8uemz3dj20yl0inq67.jpg" alt="Untitled"></p><p><code>http://&lt;ip&gt;:8123</code> 端口号：8123</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8uiuctrj20fp0btjro.jpg" alt="Untitled"></p><p>登录：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8xx2qivj20ev0dajrr.jpg" alt="Untitled"></p><p>进入后页面：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8um6ctsj21jy0px41k.jpg" alt="Untitled"></p><p>hac:更多组件插件</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8up0eduj21k50qgdlu.jpg" alt="Untitled"></p><p>组件：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8ur9ebkj215n0olmz4.jpg" alt="Untitled"></p><p>有大神的集成，直接一键傻瓜操作 ，比如Xiaomi MIoT</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8uu0sb7j20fw0lht94.jpg" alt="Untitled"></p><p>homekit:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8ux8wl9j20f40jwjrj.jpg" alt="Untitled"></p><p>组件：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8v0ity0j21kq0qmwid.jpg" alt="Untitled"></p><p>个人现有米家设备，设备比较少</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8v70isnj20u01sxdli.jpg" alt="IMG_2333.PNG"></p><p>homekit 绑定后效果</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8ve1zlgj20u01sxwjq.jpg" alt="Untitled"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o8vm7nu2j20u01sxdje.jpg" alt="IMG_2331.PNG"></p><p><img src="Docker%E5%AE%89%E8%A3%85HomeAssisant%E5%8F%8A%E4%BD%BF%E7%94%A8%20ce2fda36b06a43b0a806beb9524fcd4f/IMG_2332.png" alt="IMG_2332.PNG"></p>]]></content>
    
    <summary type="html">
    
      HA 大名鼎鼎，是基于 Python3 的开源智能家居系统，非常适合运行在树莓派或本地服务器上。它集成了众多优秀的产品，比如 IFTTT 、 Arduino 、Google Assistant 、 Home Kit 、 MQTT 等。特点是运行在局域网内的设备上，相对比较注重隐私。
    
    </summary>
    
      <category term="HomeAssisant" scheme="https://kitions.github.io/categories/HomeAssisant/"/>
    
    
      <category term="HomeAssisant,智能家居" scheme="https://kitions.github.io/tags/HomeAssisant-%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
  </entry>
  
  <entry>
    <title>i18n+ Next.js国际化</title>
    <link href="https://kitions.github.io/2021/12/19/i18n+%20Next.js/"/>
    <id>https://kitions.github.io/2021/12/19/i18n+ Next.js/</id>
    <published>2021-12-19T06:15:39.000Z</published>
    <updated>2022-10-17T03:30:46.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="i18n-Next-js"><a href="#i18n-Next-js" class="headerlink" title="i18n+ Next.js"></a>i18n+ Next.js</h2><h3 id="1-i18n-ts"><a href="#1-i18n-ts" class="headerlink" title="1. i18n.ts"></a>1. i18n.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">"i18next-browser-languagedetector"</span>;</span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">"i18next"</span>;</span><br><span class="line"><span class="keyword">import</span> getConfig <span class="keyword">from</span> <span class="string">"next/config"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">"react-i18next"</span>;</span><br><span class="line"><span class="keyword">import</span> enUsTrans <span class="keyword">from</span> <span class="string">"./locales/en-US.json"</span>;</span><br><span class="line"><span class="keyword">import</span> zhCnTrans <span class="keyword">from</span> <span class="string">"./locales/zh-CN.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过配置文件获取默认语言</span></span><br><span class="line"><span class="keyword">const</span> defalutLanguage = getConfig().publicRuntimeConfig.language</span><br><span class="line">? getConfig().publicRuntimeConfig.language</span><br><span class="line">: <span class="string">"zh_CN"</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">.use(LanguageDetector) <span class="comment">// 嗅探当前浏览器语言</span></span><br><span class="line">.use(initReactI18next) <span class="comment">// init i18next</span></span><br><span class="line">.init(&#123;</span><br><span class="line"><span class="comment">// 引入资源文件</span></span><br><span class="line">resources: &#123;</span><br><span class="line">zh_CN: &#123;</span><br><span class="line">translation: zhCnTrans</span><br><span class="line">&#125;,</span><br><span class="line">en_US: &#123;</span><br><span class="line">translation: enUsTrans</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">lng: defalutLanguage, <span class="comment">// 选择默认语言，选择内容为上述配置中的key，即en/zh 如果开启了 LanguageDetector 则可以不用默认语言，会自动匹配未嗅探到的语言</span></span><br><span class="line">fallbackLng: <span class="string">"zh_CN"</span>, <span class="comment">// 未找到对应语言包时候的失败语言包</span></span><br><span class="line">debug: <span class="literal">false</span>,</span><br><span class="line">interpolation: &#123;</span><br><span class="line">escapeValue: <span class="literal">false</span> <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><h3 id="2-package-json"><a href="#2-package-json" class="headerlink" title="2. package.json"></a>2. package.json</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"i18next": "^20.3.5",</span><br><span class="line">"i18next-browser-languagedetector": "^6.1.2",</span><br><span class="line">"react-i18next": "^11.11.3",</span><br></pre></td></tr></table></figure><h3 id="3-多语言文件-json"><a href="#3-多语言文件-json" class="headerlink" title="3. 多语言文件.json"></a>3. 多语言文件.json</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxkaybk94zj305x01smwz.jpg" alt="image-20211220145350846"></p><h3 id="4-匹配现有项目的UI库多语言"><a href="#4-匹配现有项目的UI库多语言" class="headerlink" title="4. 匹配现有项目的UI库多语言"></a>4. 匹配现有项目的UI库多语言</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配antd</span></span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">"antd/lib/locale-provider/zh_CN"</span>;</span><br><span class="line"><span class="keyword">import</span> en_US <span class="keyword">from</span> <span class="string">"antd/lib/locale-provider/en_US"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getMatchedLocal = <span class="function">(<span class="params">language: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> target = zh_CN; <span class="comment">// 默认语言</span></span><br><span class="line"><span class="keyword">switch</span> (language) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"zh_CN"</span>:</span><br><span class="line">target = zh_CN;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"en_US"</span>:</span><br><span class="line">target = en_US;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-注入ConfigProvider"><a href="#5-注入ConfigProvider" class="headerlink" title="5. 注入ConfigProvider"></a>5. 注入ConfigProvider</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ConfigProvider &#125; from &quot;antd&quot;;</span><br><span class="line">import &#123; useTranslation &#125; from &quot;react-i18next&quot;;</span><br><span class="line">import &quot;../i18n&quot;;</span><br><span class="line"></span><br><span class="line">const APP = () =&gt; &#123;</span><br><span class="line">  const &#123; t, i18n &#125; = useTranslation();</span><br><span class="line"></span><br><span class="line">return(</span><br><span class="line">  &lt;ConfigProvider locale=&#123;getMatchedLocal(i18n.language)&#125;&gt;</span><br><span class="line">    &lt;Button onClick=&#123;() =&gt; i18n.changeLanguage(&apos;zh-CN&apos;)&#125;&gt;&#123;t(&apos;切换到中文&apos;)&#125;&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">&#123;t(&quot;title&quot;)&#125;</span><br><span class="line">&lt;/ConfigProvider&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如题
    
    </summary>
    
      <category term="React" scheme="https://kitions.github.io/categories/React/"/>
    
    
      <category term="i18n" scheme="https://kitions.github.io/tags/i18n/"/>
    
  </entry>
  
  <entry>
    <title>2022网络安全题目</title>
    <link href="https://kitions.github.io/2021/12/11/2022%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    <id>https://kitions.github.io/2021/12/11/2022网络安全防护/</id>
    <published>2021-12-11T12:55:59.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<p>2022网络安全题目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&gt; 单选</span><br><span class="line"><span class="number">5.</span> Raid <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> .vhd文件用什么打开 (虚拟磁盘文件)</span><br><span class="line">A. 视频播放软件 D.数据库 </span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 线程与进程 </span><br><span class="line">B. 进程切换开销远小于线程(❌)  D.从操作系统层面看，分为系统进程和用户进程</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> 二叉树前序遍历为&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;，中序遍历为&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>&#125;,后序遍历是()</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> 时间复杂度不同的一项是</span><br><span class="line">A.冒泡排序 B.插入排序 C.快速排序 D.选择排序</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> C语言中 i,j为int类型 </span><br><span class="line">A.i++j B.i+++j C.i++++j D.++(i++)</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>二进制数<span class="number">00001011</span>，加十进制数<span class="number">11</span></span><br><span class="line">A.十六进制<span class="number">0x61</span>  B.十六进制<span class="number">0x16</span></span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> ping 采用的是何种协议 （ip）</span><br><span class="line"></span><br><span class="line"><span class="number">17.</span> 三次握手</span><br><span class="line"></span><br><span class="line"><span class="number">20.</span> RSA算法，只明文、密文.....</span><br><span class="line"></span><br><span class="line"><span class="number">22.</span> linux中 可执行程序是什么</span><br><span class="line"></span><br><span class="line"><span class="number">23.</span> linux中 root历史执行记录 用()命令查看</span><br><span class="line"></span><br><span class="line"><span class="number">26.</span> windows操作系统中安全策略、审核验证、执行安全管理</span><br><span class="line">A.SAM B.LSA C.SRM D.LAZANGE</span><br><span class="line"></span><br><span class="line"><span class="number">28.</span> 防缓冲区溢出攻击</span><br><span class="line"></span><br><span class="line"><span class="number">29.</span> 关于蠕虫病毒，不正确的是</span><br><span class="line">A.采用pe插入 B.熊猫烧香是蠕虫病毒 </span><br><span class="line"></span><br><span class="line"><span class="number">31.</span> 暴力破解FTP、ssh的软件有</span><br><span class="line">A. hydra B. winDump C.wireshark D.proxychains</span><br><span class="line"></span><br><span class="line"><span class="number">34.</span> ADB拷贝数据到电脑命令</span><br><span class="line">A. ADB pull B.ADB push</span><br><span class="line"></span><br><span class="line"><span class="number">40.</span> mysql数据库自定义函数执行系统命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 以下为多选选择</span><br><span class="line"><span class="number">55.</span> Java框架 </span><br><span class="line">A.struts B.Spring  C.django D.shiro</span><br><span class="line"></span><br><span class="line"><span class="number">60.</span> IP:<span class="number">192.168</span><span class="number">.100</span><span class="number">.10</span> 子网掩码：<span class="number">255.255</span><span class="number">.255</span><span class="number">.192</span>。属于同一子网的是</span><br><span class="line">A<span class="number">.192</span><span class="number">.168</span><span class="number">.100</span><span class="number">.124</span>  B<span class="number">.192</span><span class="number">.168</span><span class="number">.100</span><span class="number">.64</span></span><br><span class="line">C<span class="number">.192</span><span class="number">.168</span><span class="number">.100</span><span class="number">.44</span>   D<span class="number">.192</span><span class="number">.168</span><span class="number">.100</span><span class="number">.4</span></span><br><span class="line"></span><br><span class="line"><span class="number">65.</span> windows操作系统日志文件</span><br><span class="line">A.应用程序日志 B.安全日志  C.系统日志 D.账户日志</span><br><span class="line"></span><br><span class="line"><span class="number">67.</span> linux命令</span><br><span class="line"></span><br><span class="line"><span class="number">72.</span> ls -l</span><br><span class="line"></span><br><span class="line"><span class="number">73.</span> Linux查看文件内容 </span><br><span class="line">A. less B.tac C.more D.touch</span><br><span class="line"></span><br><span class="line"><span class="number">74.</span> 校验文件的完整性</span><br><span class="line">A. sha1sum B.md5sum C.sha256sum D.sha1024sum</span><br><span class="line"></span><br><span class="line"><span class="number">76.</span> 目录扫描文件软件</span><br><span class="line">A.DVWA B<span class="number">.7</span>kbscan C.cobalt strike D.dirsearch</span><br><span class="line"></span><br><span class="line"><span class="number">80.</span>防御SQL手段</span><br><span class="line">A.过滤空格  B.换Script  C.换反斜杠 D.换单双引号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 判断</span><br><span class="line"><span class="number">90.</span> 传输层</span><br><span class="line"></span><br><span class="line"><span class="number">96.</span>systeminfo 是看补丁的安装情况的</span><br><span class="line"></span><br><span class="line"><span class="number">99.</span> wapi wifi  通过公钥密码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2022网络安全简单题目
    
    </summary>
    
      <category term="网络安全" scheme="https://kitions.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://kitions.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SCSS 不同主题换肤</title>
    <link href="https://kitions.github.io/2021/11/16/scss%20%E4%B8%8D%E5%90%8C%E4%B8%BB%E9%A2%98%E6%8D%A2%E8%82%A4/"/>
    <id>https://kitions.github.io/2021/11/16/scss 不同主题换肤/</id>
    <published>2021-11-16T03:02:10.000Z</published>
    <updated>2022-10-17T03:30:46.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scss-不同主题换肤"><a href="#scss-不同主题换肤" class="headerlink" title="scss 不同主题换肤"></a>scss 不同主题换肤</h1><p>Basic.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font_common</span>: <span class="number">14px</span>; <span class="comment">//大多数文字</span></span><br><span class="line"><span class="variable">$font_color</span>: <span class="number">#1D253E</span>; <span class="comment">//大多数文字颜色</span></span><br><span class="line"><span class="variable">$font_header_title</span>: <span class="number">#CFCFCF</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$themes</span>: (</span><br><span class="line">blue_theme: (</span><br><span class="line">color_main:<span class="number">#3054EB</span>, //主色</span><br><span class="line">        color_main_bg: linear-gradient(<span class="number">106deg</span>, <span class="number">#4345FA</span> <span class="number">0%</span>, <span class="number">#6F4CFF</span> <span class="number">100%</span>), //主背景</span><br><span class="line">        color_btn_bg:rgba(<span class="number">48</span>, <span class="number">84</span>, <span class="number">235</span>, <span class="number">0.08</span>), //按钮背景</span><br><span class="line">        color_pale_bg: <span class="number">#B0BFFF</span>, //淡背景</span><br><span class="line"></span><br><span class="line">        color_header_bg: linear-gradient(<span class="number">106deg</span>, <span class="number">#4345FA</span> <span class="number">0%</span>, <span class="number">#6F4CFF</span> <span class="number">100%</span>), // header 背景色</span><br><span class="line">        color_header_txt_hover: <span class="number">#FFF</span>, // header字体hover</span><br><span class="line"></span><br><span class="line">    ),</span><br><span class="line">    orange_theme: (color_main:<span class="number">#FF7919</span>, //主色</span><br><span class="line">        color_main_bg: <span class="number">#FF7919</span>, //主背景</span><br><span class="line">        color_btn_bg:rgba(<span class="number">255</span>, <span class="number">121</span>, <span class="number">25</span>, <span class="number">0.08</span>), //按钮背景</span><br><span class="line">        color_pale_bg: <span class="number">#FFC79E</span>, //淡背景</span><br><span class="line"></span><br><span class="line">        color_header_bg: <span class="number">#1D253E</span>, // header 背景色</span><br><span class="line">        color_header_txt_hover: <span class="number">#FF7919</span>, // header字体hover</span><br><span class="line">    ),</span><br><span class="line">    red_theme: (color_main:<span class="number">#D7000F</span>, //主色</span><br><span class="line">        color_main_bg: <span class="number">#D7000F</span>, //主背景</span><br><span class="line">        color_btn_bg:rgba(<span class="number">215</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0.08</span>), //按钮背景</span><br><span class="line">        color_pale_bg: <span class="number">#FFB6BB</span>, //淡背景</span><br><span class="line"></span><br><span class="line">        color_header_bg: <span class="number">#1D253E</span>, // header 背景色</span><br><span class="line">        color_header_txt_hover: <span class="number">#D7000F</span>, // header字体hover</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> themeify &#123;</span><br><span class="line">    @<span class="keyword">each</span> <span class="variable">$theme-name</span>,</span><br><span class="line">    <span class="variable">$theme-map</span> in <span class="variable">$themes</span> &#123;</span><br><span class="line">        <span class="variable">$theme-map</span>: <span class="variable">$theme-map</span> !global;</span><br><span class="line"></span><br><span class="line">        <span class="selector-attr">[data-theme=#&#123;$theme-name&#125;]</span> &amp; &#123;</span><br><span class="line">            @<span class="keyword">content</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@function themed(<span class="variable">$key</span>) &#123;</span><br><span class="line">    @return map-get(<span class="variable">$theme-map</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> text_color(<span class="variable">$color</span>) &#123;</span><br><span class="line">@<span class="keyword">include</span> themeify &#123;</span><br><span class="line">        <span class="attribute">color</span>: themed(<span class="variable">$color</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> bg_color(<span class="variable">$color</span>) &#123;</span><br><span class="line">    @<span class="keyword">include</span> themeify &#123;</span><br><span class="line">        <span class="attribute">background</span>: themed(<span class="variable">$color</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> ellipsis(<span class="variable">$width</span>) &#123;</span><br><span class="line">    <span class="comment">//横排省略号</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    -o-<span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> Hellipsis(<span class="variable">$num</span>, <span class="variable">$height</span>) &#123;</span><br><span class="line">    <span class="comment">//竖排省略号</span></span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: <span class="variable">$num</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="variable">$height</span> / <span class="variable">$num</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="variable">$height</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置页面标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.setAttribute(</span><br><span class="line"><span class="string">'data-theme'</span>,</span><br><span class="line"><span class="string">'blue-theme'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      scss换肤根据页面设置data-theme标签实现。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="SCSS" scheme="https://kitions.github.io/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>ANTD table 虚拟滚动</title>
    <link href="https://kitions.github.io/2021/07/04/ANTD%20table%20%E8%99%9A%E6%8B%9F%E6%BB%9A%E5%8A%A8/"/>
    <id>https://kitions.github.io/2021/07/04/ANTD table 虚拟滚动/</id>
    <published>2021-07-04T02:38:31.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ANTD-table-虚拟滚动"><a href="#ANTD-table-虚拟滚动" class="headerlink" title="ANTD table 虚拟滚动"></a>ANTD table 虚拟滚动</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Antd团队 2016 年就要注意到 antd 长列表项目的性能问题了，当时让靠分页来解决,问题是很多需求是要单屏展示的，团队也很清楚用虚拟滚动可以有效地解决这个问题。</p><p>使用虚拟滚动目的是实现万级以上数据的高性能表格。</p><p>简单粗暴直接上代码</p><h3 id="搜索方法"><a href="#搜索方法" class="headerlink" title="搜索方法"></a>搜索方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">const inputRef = useRef&lt;Input&gt;(null);</span><br><span class="line"></span><br><span class="line">// 搜索</span><br><span class="line">const getColumnSearchProps = (dataIndex: any, title: string) =&gt; (&#123;</span><br><span class="line">filterDropdown: (&#123;</span><br><span class="line">setSelectedKeys,</span><br><span class="line">selectedKeys,</span><br><span class="line">confirm,</span><br><span class="line">clearFilters</span><br><span class="line">&#125;: any) =&gt; (</span><br><span class="line">&lt;div style=&#123;&#123; padding: 8 &#125;&#125;&gt;</span><br><span class="line">&lt;Input</span><br><span class="line">ref=&#123;inputRef&#125;</span><br><span class="line">placeholder=&#123;`搜索$&#123;title&#125;`&#125;</span><br><span class="line">value=&#123;selectedKeys[0]&#125;</span><br><span class="line">onChange=&#123;e =&gt;</span><br><span class="line">setSelectedKeys(e.target.value ? [e.target.value] : [])</span><br><span class="line">&#125;</span><br><span class="line">onPressEnter=&#123;() =&gt;</span><br><span class="line">handleSearch(selectedKeys, confirm, dataIndex)</span><br><span class="line">&#125;</span><br><span class="line">style=&#123;&#123; width: 188, marginBottom: 8, display: &apos;block&apos; &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">type=&quot;primary&quot;</span><br><span class="line">onClick=&#123;() =&gt;</span><br><span class="line">handleSearch(selectedKeys, confirm, dataIndex)</span><br><span class="line">&#125;</span><br><span class="line">icon=&#123;&lt;SearchOutlined /&gt;&#125;</span><br><span class="line">size=&quot;small&quot;</span><br><span class="line">style=&#123;&#123; width: 90, marginRight: 8 &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">搜索</span><br><span class="line">&lt;/Button&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">onClick=&#123;() =&gt; handleReset(clearFilters)&#125;</span><br><span class="line">size=&quot;small&quot;</span><br><span class="line">style=&#123;&#123; width: 90 &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">重置</span><br><span class="line">&lt;/Button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">),</span><br><span class="line">filterIcon: (filtered: any) =&gt; (</span><br><span class="line">&lt;SearchOutlined</span><br><span class="line">style=&#123;&#123; color: filtered ? &apos;#1890ff&apos; : undefined &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">),</span><br><span class="line">onFilter: (value: any, record: any) =&gt;</span><br><span class="line">record[dataIndex]</span><br><span class="line">? record[dataIndex]</span><br><span class="line">.toString()</span><br><span class="line">.toLowerCase()</span><br><span class="line">.includes(value.toLowerCase())</span><br><span class="line">: &apos;&apos;,</span><br><span class="line">onFilterDropdownVisibleChange: (visible: any) =&gt; &#123;</span><br><span class="line">if (visible) &#123;</span><br><span class="line">setTimeout(() =&gt; inputRef?.current?.select());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const handleSearch = (</span><br><span class="line">_selectedKeys: any[],</span><br><span class="line">confirm: () =&gt; void,</span><br><span class="line">_dataIndex: any</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">confirm();</span><br><span class="line">&#125;;</span><br><span class="line">const handleReset = (clearFilters: () =&gt; void) =&gt; &#123;</span><br><span class="line">clearFilters();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// columns处理函数包含排序sorter</span></span><br><span class="line"><span class="keyword">const</span> formatColumns = <span class="function">(<span class="params">fields: DataCompareField[]</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fields.map(<span class="function">(<span class="params">field</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> dataIndex = field.item_id ? field.item_id : <span class="string">'日期'</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">title: <span class="string">`<span class="subst">$&#123;field.item_name&#125;</span><span class="subst">$&#123;field.unit &amp;&amp; `（$&#123;field.unit&#125;</span>）`</span>&#125;<span class="string">`,</span></span><br><span class="line"><span class="string">dataIndex: getKey(field), //特殊列item_id为空</span></span><br><span class="line"><span class="string">type: field.value_type,</span></span><br><span class="line"><span class="string">width: 190,</span></span><br><span class="line"><span class="string">showSorterTooltip: false,</span></span><br><span class="line"><span class="string">sorter: (a: any, b: any) =&gt; &#123;</span></span><br><span class="line"><span class="string">if (</span></span><br><span class="line"><span class="string">field.value_type == 'integer' ||</span></span><br><span class="line"><span class="string">field.value_type == 'float'</span></span><br><span class="line"><span class="string">) &#123;</span></span><br><span class="line"><span class="string">return (</span></span><br><span class="line"><span class="string">compareColumn(a[dataIndex] || 0) -</span></span><br><span class="line"><span class="string">compareColumn(b[dataIndex] || 0)</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">return String(a[dataIndex]).localeCompare(b[dataIndex]);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">...getColumnSearchProps(dataIndex, field.item_name)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  const compareColumn = (text: string | number) =&gt; &#123;</span></span><br><span class="line"><span class="string">    if (text == '-') text = 0;</span></span><br><span class="line"><span class="string">    return Number(text.toString().replace(',', ''));</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br></pre></td></tr></table></figure><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>最最关键的，官方文档未定义一个方法，导致点击排序或者搜索方法会报scrollTop of undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [connectObject] = useState&lt;any&gt;<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"scrollLeft"</span>, &#123;</span><br><span class="line">get: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">null</span>,</span><br><span class="line">set: <span class="function">(<span class="params">scrollLeft: number</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (gridRef.current) &#123;</span><br><span class="line">gridRef.current.scrollTo(&#123; scrollLeft &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  <span class="comment">// 就是这个   可看issues  </span></span><br><span class="line">    <span class="comment">// https://github.com/ant-design/ant-design/issues/24383</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"ownerDocument"</span>, &#123;</span><br><span class="line">get: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">document</span>.body.ownerDocument</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="完整的VirtualTable组件"><a href="#完整的VirtualTable组件" class="headerlink" title="完整的VirtualTable组件"></a>完整的VirtualTable组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">// 完整的VirtualTable</span><br><span class="line"></span><br><span class="line">import React, &#123; FC, useEffect, useRef, useState &#125; from &quot;react&quot;</span><br><span class="line">import &#123; Table, Tooltip &#125; from &quot;antd&quot;</span><br><span class="line">import ResizeObserver from &quot;rc-resize-observer&quot;</span><br><span class="line">import &#123; VariableSizeGrid as Grid &#125; from &quot;react-window&quot;</span><br><span class="line">import &#123; TableProps &#125; from &quot;antd/lib/table&quot;</span><br><span class="line"></span><br><span class="line">import &#123; strLen &#125; from &quot;@Common/utils/util&quot;</span><br><span class="line"></span><br><span class="line">import Style from &quot;./index.module.scss&quot;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">data: &#123;</span><br><span class="line">[key: string]: string | number | null</span><br><span class="line">&#125;[]</span><br><span class="line">columns: IColumn[]</span><br><span class="line">c_size: &#123;</span><br><span class="line">y: number</span><br><span class="line">x: number | undefined</span><br><span class="line">&#125;</span><br><span class="line">isSort?: boolean</span><br><span class="line">&#125;</span><br><span class="line">interface TConfig &#123;</span><br><span class="line">LineHeight: number</span><br><span class="line">AntdThPadding: number</span><br><span class="line">AntdThVPadding: number</span><br><span class="line">AntdTdPadding: number</span><br><span class="line">AntdRowHeight: number</span><br><span class="line">AntdFontSize: number</span><br><span class="line">ThtdBorder: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IColumn &#123;</span><br><span class="line">title: string</span><br><span class="line">dataIndex: string</span><br><span class="line">width?: number</span><br><span class="line">sort?: (a: any, b: any) =&gt; any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const VirtualTable: FC&lt;IProps &amp; Partial&lt;TConfig&gt; &amp; TableProps&lt;any&gt;&gt; = (props) =&gt; &#123;</span><br><span class="line">const &#123; columns, c_size, data, isSort &#125; = props</span><br><span class="line">let TConfig: TConfig = &#123;</span><br><span class="line">LineHeight: props.LineHeight || 30,</span><br><span class="line">AntdFontSize: props.AntdFontSize || 14,</span><br><span class="line">AntdRowHeight: props.AntdRowHeight || 40,</span><br><span class="line">AntdThPadding: props.AntdThPadding || 10 * 2,</span><br><span class="line">AntdTdPadding: props.AntdTdPadding || 10 * 2,</span><br><span class="line">AntdThVPadding: props.AntdThVPadding || 5 * 2,</span><br><span class="line">ThtdBorder: props.ThtdBorder || 1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const gridRef = useRef&lt;any&gt;()</span><br><span class="line"></span><br><span class="line">const [tableWidth, setTableWidth] = useState(0)</span><br><span class="line">const [connectObject] = useState&lt;any&gt;(() =&gt; &#123;</span><br><span class="line">const obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj, &quot;scrollLeft&quot;, &#123;</span><br><span class="line">get: () =&gt; null,</span><br><span class="line">set: (scrollLeft: number) =&gt; &#123;</span><br><span class="line">if (gridRef.current) &#123;</span><br><span class="line">gridRef.current.scrollTo(&#123; scrollLeft &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(obj, &quot;ownerDocument&quot;, &#123;</span><br><span class="line">get: () =&gt; document.body.ownerDocument</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return obj</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 合并后的列数</span><br><span class="line">const mergedColumns = ((columns: IColumn[]) =&gt; &#123;</span><br><span class="line">const widthColumnCount = columns.filter((&#123; width &#125;) =&gt; !width).length</span><br><span class="line">return columns.map((column) =&gt; &#123;</span><br><span class="line">if (column.width) &#123;</span><br><span class="line">return column</span><br><span class="line">&#125;</span><br><span class="line">return &#123;</span><br><span class="line">...column,</span><br><span class="line">width: Math.ceil(tableWidth / widthColumnCount),</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(columns)</span><br><span class="line">  </span><br><span class="line">  const strLen = (str: string) =&gt; &#123;</span><br><span class="line">    let len = 0</span><br><span class="line">    for (let i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">      const c = str.charCodeAt(i)</span><br><span class="line">      //单字节加1</span><br><span class="line">      if ((c &gt;= 0x0001 &amp;&amp; c &lt;= 0x007e) || (0xff60 &lt;= c &amp;&amp; c &lt;= 0xff9f)) &#123;</span><br><span class="line">        len++</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        len += 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return len</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">// 标题最长长度</span><br><span class="line">const getMaxHeightTh = (columns: IColumn[], scrollbarSize: number) =&gt; &#123;</span><br><span class="line">let _max = &#123;</span><br><span class="line">index: 0,</span><br><span class="line">len: 0,</span><br><span class="line">width: 0,</span><br><span class="line">ratio: 0,</span><br><span class="line">&#125;</span><br><span class="line">columns.map((column, i) =&gt; &#123;</span><br><span class="line">const titleLen = strLen(column.title)</span><br><span class="line">if (column.width) &#123;</span><br><span class="line">const columnLen = i !== columns.length - 1 ? column.width : column.width - scrollbarSize</span><br><span class="line">const ratio = titleLen / columnLen</span><br><span class="line">if (ratio &gt; _max.ratio) &#123;</span><br><span class="line">_max.ratio = ratio</span><br><span class="line">_max.index = i</span><br><span class="line">_max.len = titleLen</span><br><span class="line">_max.width = columnLen</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">return _max</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 滚动条高度</span><br><span class="line">const getScrollY = (containerHeight: number, scrollbarSize: number) =&gt; &#123;</span><br><span class="line">const maxHeightTh = getMaxHeightTh(mergedColumns, scrollbarSize)</span><br><span class="line">const containChars = Math.floor((maxHeightTh.width - TConfig.AntdThPadding - TConfig.ThtdBorder) / TConfig.AntdFontSize) * 2</span><br><span class="line">const titleHeight = TConfig.AntdThVPadding + TConfig.LineHeight * Math.ceil(maxHeightTh.len / containChars) //表头基础高度x px,超过y个纯字符换行，每换行增加z px</span><br><span class="line">let columnsBoxHeight = containerHeight - titleHeight //最小高度最大值；即容器高度</span><br><span class="line">if(isSort) columnsBoxHeight -= 30 </span><br><span class="line">return columnsBoxHeight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const resetVirtualGrid = () =&gt; &#123;</span><br><span class="line">if(gridRef.current)&#123;</span><br><span class="line">gridRef.current.resetAfterIndices(&#123;</span><br><span class="line">columnIndex: 0,</span><br><span class="line">shouldForceUpdate: true, //TODO</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调整大小时会频繁渲染，可能有优化空间</span><br><span class="line">const renderVirtualList = (rawData: any[], &#123; scrollbarSize, ref, onScroll &#125;: any) =&gt; &#123;</span><br><span class="line">ref.current = connectObject</span><br><span class="line">const scrollY = getScrollY(c_size.y, scrollbarSize)</span><br><span class="line">const columnsBoxHeight = scrollY</span><br><span class="line">const columnsRealHeight = rawData.length * TConfig.AntdRowHeight //data所占高度；即列实高</span><br><span class="line">const minHeight = columnsRealHeight &gt; columnsBoxHeight ? columnsBoxHeight : columnsRealHeight</span><br><span class="line">const maxHeight = columnsRealHeight &gt; columnsBoxHeight ? columnsBoxHeight : columnsRealHeight + scrollbarSize</span><br><span class="line"></span><br><span class="line">return !!rawData.length ? (</span><br><span class="line">&lt;Grid</span><br><span class="line">ref=&#123;gridRef&#125;</span><br><span class="line">className=&quot;gridContent&quot;</span><br><span class="line">columnCount=&#123;mergedColumns.length&#125;</span><br><span class="line">columnWidth=&#123;(index) =&gt; &#123;</span><br><span class="line">const &#123; width &#125; = mergedColumns[index]</span><br><span class="line">return columnsRealHeight &gt; columnsBoxHeight &amp;&amp; </span><br><span class="line">index === mergedColumns.length - 1 </span><br><span class="line">? width! - scrollbarSize </span><br><span class="line">: width!</span><br><span class="line">&#125;&#125;</span><br><span class="line">width=&#123;tableWidth&#125;</span><br><span class="line">rowCount=&#123;rawData.length&#125;</span><br><span class="line">rowHeight=&#123;() =&gt; TConfig.AntdRowHeight&#125;</span><br><span class="line">height=&#123;columnsRealHeight &gt; columnsBoxHeight ? columnsBoxHeight : columnsRealHeight + scrollbarSize&#125;</span><br><span class="line">onScroll=&#123;(&#123; scrollLeft &#125;) =&gt; &#123;</span><br><span class="line">onScroll(&#123; scrollLeft &#125;)</span><br><span class="line">&#125;&#125;</span><br><span class="line">style=&#123;&#123;</span><br><span class="line">height: &quot;auto&quot;,</span><br><span class="line">minHeight: minHeight,</span><br><span class="line">maxHeight: maxHeight,</span><br><span class="line">&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&#123;(&#123; columnIndex, rowIndex, style &#125;) =&gt; &#123;</span><br><span class="line">const value = (rawData[rowIndex] as any)[mergedColumns[columnIndex].dataIndex]</span><br><span class="line">const columnWidth = columns[columnIndex].width</span><br><span class="line">const containChars = Math.floor((columnWidth! - TConfig.AntdTdPadding - TConfig.ThtdBorder) / TConfig.AntdFontSize) * 2</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&#123;Style.virtualTableCell&#125; style=&#123;style&#125;&gt;</span><br><span class="line">&#123;columnWidth &amp;&amp; strLen(String(value)) &gt; containChars ? &lt;Tooltip title=&#123;value&#125;&gt;&#123;value&#125;&lt;/Tooltip&gt; : value&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;&#125;</span><br><span class="line">&lt;/Grid&gt;</span><br><span class="line">) : undefined</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; resetVirtualGrid, [tableWidth, columns])</span><br><span class="line"></span><br><span class="line">const shouldHeaderScroll = data.length == 0</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">&lt;ResizeObserver</span><br><span class="line">onResize=&#123;(&#123; width, height &#125;) =&gt; &#123;</span><br><span class="line">setTableWidth(width)</span><br><span class="line">&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;Table</span><br><span class="line">&#123;...props&#125;</span><br><span class="line">scroll=&#123;&#123; y: getScrollY(c_size.y, 0), x: undefined &#125;&#125;</span><br><span class="line">className=&#123;[Style.virtualTable, shouldHeaderScroll ? Style.antdHdScroll : &quot;&quot;].join(&quot; &quot;)&#125;</span><br><span class="line">columns=&#123;mergedColumns&#125;</span><br><span class="line">dataSource=&#123;data&#125;</span><br><span class="line">style=&#123;&#123; width: mergedColumns.length != 0 &amp;&amp; mergedColumns[0].width ? mergedColumns.length * mergedColumns[0].width + 1 : &quot;auto&quot; &#125;&#125;</span><br><span class="line">bordered</span><br><span class="line">pagination=&#123;false&#125;</span><br><span class="line">components=&#123;&#123;</span><br><span class="line">body: renderVirtualList,</span><br><span class="line">&#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/ResizeObserver&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default VirtualTable</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.virtualTable</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.virtualTableCell</span> &#123;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> border_color(<span class="string">"color_divide"</span>, 1px, right);</span><br><span class="line">@<span class="keyword">include</span> border_color(<span class="string">"color_divide"</span>, 1px, bottom);</span><br><span class="line">@<span class="keyword">include</span> text_color(<span class="string">"color_font"</span>);</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.antdHdScroll</span> &#123;</span><br><span class="line">:global &#123;</span><br><span class="line">.ant-table-header &#123;</span><br><span class="line">overflow: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用VirtualTable组件"><a href="#使用VirtualTable组件" class="headerlink" title="使用VirtualTable组件"></a>使用VirtualTable组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import ResizeObserver from &quot;rc-resize-observer&quot;</span><br><span class="line"></span><br><span class="line">export const Tables: FC&lt;IProps&gt; = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">const [panelHeight, setPanelHeight] = useState(0)</span><br><span class="line">const formatData = (</span><br><span class="line">fields: Field[],</span><br><span class="line">data: (ReactText | null)[][]</span><br><span class="line">): &#123;</span><br><span class="line">[key: string]: ReactText</span><br><span class="line">&#125;[] =&gt; &#123;</span><br><span class="line">return data</span><br><span class="line">.map((rowValues, i) =&gt; &#123;</span><br><span class="line">let obj: &#123;</span><br><span class="line">[key: string]: any</span><br><span class="line">&#125; = &#123;&#125;</span><br><span class="line">fields.map((field, j) =&gt; &#123;</span><br><span class="line">let key = getKey(field)</span><br><span class="line">obj[key] == undefined &amp;&amp;</span><br><span class="line">Object.defineProperty(obj, getKey(field), &#123;</span><br><span class="line">value: formatValue(rowValues[j], &#123;</span><br><span class="line">type: field.value_type,</span><br><span class="line">&#125;),</span><br><span class="line">enumerable: true,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">return obj</span><br><span class="line">&#125;)</span><br><span class="line">.filter((rowObj) =&gt; Object.keys(rowObj).length !== 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return(</span><br><span class="line">  &lt;ResizeObserver</span><br><span class="line">          onResize=&#123;(&#123; height &#125;) =&gt; &#123;</span><br><span class="line">            let headerHeight = headerRef.current ? headerRef.current.clientHeight : 0</span><br><span class="line">            setPanelHeight(height - headerHeight - (isFullScreen ? FULLSCREEN_PADDING * 2 : 0))</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">    &lt;div className=&#123;Style.panelBody&#125;&gt;</span><br><span class="line">      &#123;data &amp;&amp; data.fields &amp;&amp; data.fields.length ? (</span><br><span class="line">        &lt;Spin spinning=&#123;spinning&#125;&gt;</span><br><span class="line">          &lt;VirtualTable columns=&#123;formatColumns(data.fields)&#125; data=&#123;formatData(data.fields, data.data)&#125; c_size=&#123;&#123; y: panelHeight, x: undefined &#125;&#125; isSort=&#123;true&#125;/&gt;</span><br><span class="line">        &lt;/Spin&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;Empty image=&#123;Empty.PRESENTED_IMAGE_SIMPLE&#125; /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/ResizeObserver&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>表格的onchange事件。清空筛选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [filteredInfo, setFilteredInfo] = useState&lt;any&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TableOnChange = <span class="function">(<span class="params">pagination: TablePaginationConfig, filters: Record&lt;string, Key[] | <span class="literal">null</span>&gt;, sorter: SorterResult&lt;any&gt; | SorterResult&lt;any&gt;[], extra: TableCurrentDataSource&lt;any&gt;</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!filters) <span class="keyword">return</span>;</span><br><span class="line">setFilteredInfo(filters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">formatColumns = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    filteredValue: (filteredInfo &amp;&amp; filteredInfo[dataIndex]) || <span class="literal">null</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://ant.design/components/table-cn/#components-table-demo-virtual-list" target="_blank" rel="noopener">antd虚拟滚动</a></p><p><a href="https://www.zhihu.com/column/antdesign" target="_blank" rel="noopener">知乎AntD话题</a></p><p><a href="https://zhuanlan.zhihu.com/p/102037418" target="_blank" rel="noopener">Ant Design 4.0 的一些杂事儿 - Table 篇</a></p><p><a href="https://github.com/ctq123/ant-virtual-table" target="_blank" rel="noopener">github 开源ant-virtual-table，没看源码，应该和上述实现差不多</a></p>]]></content>
    
    <summary type="html">
    
      Antd Table虚拟滚动完整实现，包含搜索，排序
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ESLint相关 +  prettier</title>
    <link href="https://kitions.github.io/2021/04/01/ESLint%E7%9B%B8%E5%85%B3/"/>
    <id>https://kitions.github.io/2021/04/01/ESLint相关/</id>
    <published>2021-04-01T07:45:55.000Z</published>
    <updated>2022-10-17T03:30:46.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint相关"><a href="#ESLint相关" class="headerlink" title="ESLint相关"></a>ESLint相关</h1><p>继承的主要是爱彼迎、eslint推荐、typescript-eslint推荐、react推荐规则，自己改了点小规则。.eslintrc具体细则还不是特别完善。各位大佬使用中发现问题的话，求轻喷。希望大家一起完善。</p><p>目前eslint提醒主要是error，warning，error红色，编译不通过，waring黄色警告，不影响项目编译。有强迫症的人估计一定会改掉。</p><h3 id="1-package-json引入"><a href="#1-package-json引入" class="headerlink" title="1 package.json引入"></a>1 package.json引入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"@typescript-eslint/eslint-plugin": "^4.16.1",</span><br><span class="line">"@typescript-eslint/parser": "^4.16.1",</span><br><span class="line">"eslint": "^7.21.0",</span><br><span class="line">"eslint-config-airbnb": "^18.2.1",</span><br><span class="line">"eslint-config-prettier": "^8.1.0",</span><br><span class="line">"eslint-plugin-import": "^2.22.1",</span><br><span class="line">"eslint-plugin-jsx-a11y": "^6.4.1",</span><br><span class="line">"eslint-plugin-react": "^7.22.0",</span><br><span class="line">"husky": "^5.1.3",</span><br><span class="line">"prettier": "^2.2.1"</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 规则见附</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;lint&quot;: &quot;eslint --ignore-path .eslintignore . --fix&quot;,</span><br><span class="line">&quot;lint_quiet&quot;: &quot;eslint --quiet  --ignore-path .eslintignore . --fix&quot;,</span><br><span class="line">&quot;lint_husky&quot;: &quot;eslint --quiet  --ignore-path .eslintignore . &quot;,</span><br><span class="line">&quot;fix&quot;: &quot;npx prettier --write .&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>在package.json里加入一条`&quot;lint_husky&quot;: &quot;eslint --ignore-path .eslintignore . &quot;,`</code></pre><p>在git提交的钩子函数（husky）里使用 npm run lint_husky</p><p>这个之前有个Bug，如果执行eslint的<code>--fix</code>修复代码操作，会在git提交后再修复，故在执行钩子时不修复代码，只是单纯的检测error错误。</p><p><code>Nextjs-v11</code>版本有了官方的eslint规则，后续升级11版本的话，可以加进入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extends: [</span><br><span class="line">&quot;next&quot;,</span><br><span class="line">&quot;next/core-web-vitals&quot;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    </span><br><span class="line">    &quot;eslint-config-next&quot;: &quot;^11.0.1&quot;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="2-eslintrc-js"><a href="#2-eslintrc-js" class="headerlink" title="2 .eslintrc.js"></a>2 .eslintrc.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">env: &#123;</span><br><span class="line">browser: <span class="literal">true</span>,</span><br><span class="line">es2021: <span class="literal">true</span>,</span><br><span class="line">node: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">extends: [</span><br><span class="line"><span class="string">"prettier"</span>,</span><br><span class="line"><span class="string">"airbnb"</span>,</span><br><span class="line"><span class="string">"eslint:recommended"</span>,</span><br><span class="line"><span class="string">"plugin:react/recommended"</span>,</span><br><span class="line"><span class="string">"plugin:@typescript-eslint/recommended"</span></span><br><span class="line">],</span><br><span class="line">settings: &#123;</span><br><span class="line"><span class="string">"import/extensions"</span>: [</span><br><span class="line"><span class="string">"2"</span>,</span><br><span class="line"><span class="string">"ignorePackages"</span>,</span><br><span class="line">&#123;</span><br><span class="line">ts: <span class="string">"never"</span>,</span><br><span class="line">tsx: <span class="string">"never"</span>,</span><br><span class="line">json: <span class="string">"never"</span>,</span><br><span class="line">js: <span class="string">"never"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">parser: <span class="string">"@typescript-eslint/parser"</span>,</span><br><span class="line">parserOptions: &#123;</span><br><span class="line">ecmaFeatures: &#123;</span><br><span class="line">jsx: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">ecmaVersion: <span class="number">2018</span></span><br><span class="line">&#125;,</span><br><span class="line">plugins: [<span class="string">"react"</span>, <span class="string">"@typescript-eslint"</span>],</span><br><span class="line">rules: &#123;</span><br><span class="line">indent: [<span class="string">"error"</span>, <span class="string">"tab"</span>], <span class="comment">// todo</span></span><br><span class="line"><span class="string">"no-tabs"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"quote-props"</span>: <span class="number">0</span>,</span><br><span class="line">semi: <span class="number">0</span>,</span><br><span class="line">quotes: <span class="number">0</span>,</span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="string">"error"</span>, <span class="string">"never"</span>],</span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/react-in-jsx-scope"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-indent"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-indent-props"</span>: [<span class="number">2</span>, <span class="string">"tab"</span>],</span><br><span class="line"><span class="string">"react/jsx-filename-extension"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-props-no-spreading"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-no-target-blank"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"import/no-unresolved"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"import/extensions"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"@typescript-eslint/no-var-requires"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"global-require"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"max-classes-per-file"</span>: <span class="number">0</span>, <span class="comment">// 一个页面最多一个class</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>, <span class="comment">// 允许使用++ --</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"no-useless-constructor"</span>: <span class="number">0</span>, <span class="comment">// constructor允许&#123;&#125;</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">0</span>, <span class="comment">// _</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">1</span>, <span class="comment">// 形参赋值</span></span><br><span class="line"><span class="string">"import/prefer-default-export"</span>: <span class="number">0</span>, <span class="comment">// 单个方法、类是否默认导出</span></span><br><span class="line">camelcase: <span class="number">1</span>, <span class="comment">// todo 是否驼峰</span></span><br><span class="line"><span class="string">"no-restricted-syntax"</span>: <span class="number">0</span>, <span class="comment">// 不受限制的语法</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">1</span>, <span class="comment">// 判断Object.prototype.hasOwnProperty.call(foo, key)</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">1</span>, &#123; <span class="attr">code</span>: <span class="number">200</span> &#125;],</span><br><span class="line"><span class="string">"no-return-await"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"jsx-a11y/label-has-associated-control"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"jsx-a11y/anchor-is-valid"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"jsx-a11y/click-events-have-key-events"</span>: <span class="number">0</span>, <span class="comment">// 关爱残障人士标签 强制执行onClick是伴随着以下的至少一个：onKeyUp，onKeyDown，onKeyPress</span></span><br><span class="line"><span class="string">"jsx-a11y/no-static-element-interactions"</span>: <span class="number">0</span>, <span class="comment">// 关爱残障人士标签 span div等 加role</span></span><br><span class="line"><span class="string">"jsx-a11y/no-noninteractive-element-interactions"</span>: <span class="number">0</span>, <span class="comment">// 关爱残障人士标签 非交互元件</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">1</span>, <span class="comment">// javascript:;</span></span><br><span class="line"><span class="string">"class-methods-use-this"</span>: <span class="number">0</span>,</span><br><span class="line">eqeqeq: <span class="number">1</span>, <span class="comment">// todo ===</span></span><br><span class="line"><span class="string">"@typescript-eslint/ban-types"</span>: <span class="number">1</span>, <span class="comment">// Object &#123;&#125;等</span></span><br><span class="line"><span class="string">"react/display-name"</span>: <span class="number">0</span>, <span class="comment">// display-name</span></span><br><span class="line"><span class="string">"react/prop-types"</span>: <span class="number">0</span>, <span class="comment">// .propTypes</span></span><br><span class="line"><span class="string">"react/destructuring-assignment"</span>: <span class="number">1</span>, <span class="comment">// todo props state解构</span></span><br><span class="line"><span class="string">"react/no-array-index-key"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"no-unused-expressions"</span>: [<span class="string">"error"</span>, &#123; <span class="attr">allowShortCircuit</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"no-prototype-builtins"</span>: <span class="number">1</span>, <span class="comment">//  bad: foo.hasOwnProperty("bar") good:Object.prototype.hasOwnProperty.call(foo, "bar");</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"@typescript-eslint/no-empty-function"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"no-async-promise-executor"</span>: <span class="number">0</span>, <span class="comment">// 禁止将异步功能用作Promise执行器</span></span><br><span class="line"><span class="string">"@typescript-eslint/no-empty-interface"</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"@typescript-eslint/explicit-module-boundary-types"</span>: <span class="number">0</span>, <span class="comment">// 300 可以自动推倒</span></span><br><span class="line"><span class="string">"no-console"</span>: <span class="string">"off"</span>,</span><br><span class="line"><span class="string">"@typescript-eslint/no-unused-vars"</span>: <span class="number">1</span>, <span class="comment">// 20 未使用的变量</span></span><br><span class="line"><span class="string">"func-names"</span>: <span class="number">0</span>, <span class="comment">// 匿名函数</span></span><br><span class="line"><span class="string">"@typescript-eslint/no-explicit-any"</span>: <span class="number">1</span>, <span class="comment">// 100 // any 类型</span></span><br><span class="line"></span><br><span class="line"><span class="string">"@typescript-eslint/no-this-alias"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"prefer-destructuring"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"no-case-declarations"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-eslintignore-和-prettierignore"><a href="#3-eslintignore-和-prettierignore" class="headerlink" title="3 .eslintignore 和 .prettierignore"></a>3 .eslintignore 和 .prettierignore</h3><p>看诸位项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/src/_next/</span><br><span class="line">/src/dist/</span><br><span class="line">/src/<span class="keyword">static</span>/</span><br><span class="line">  </span><br><span class="line">  or</span><br><span class="line"></span><br><span class="line">/node_modules/</span><br><span class="line">/src/_next/</span><br><span class="line">/src/dist/</span><br><span class="line">/src/<span class="keyword">static</span>/</span><br><span class="line">/src/server/proto</span><br></pre></td></tr></table></figure><h3 id="4-prettier-config-js"><a href="#4-prettier-config-js" class="headerlink" title="4 prettier.config.js"></a>4 prettier.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="string">"printWidth"</span>: <span class="number">80</span>,</span><br><span class="line"><span class="string">"tabWidth"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">"singleQuote"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"semi"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"trailingComma"</span>: <span class="string">"none"</span>,</span><br><span class="line"><span class="string">"bracketSpacing"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"arrowParens"</span>: <span class="string">"avoid"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-editorconfig"><a href="#5-editorconfig" class="headerlink" title="5 .editorconfig"></a>5 .editorconfig</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># http://editorconfig.org</span><br><span class="line"></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line">indent_style = tab</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">max_line_length = off</span><br></pre></td></tr></table></figure><h3 id="6-Vscode插件"><a href="#6-Vscode插件" class="headerlink" title="6. Vscode插件"></a>6. Vscode插件</h3><p><code>Prettier Eslint</code> 规则会使用eslint中的规则，此插件仅在eslint项目下格式化有效。</p><p><code>Prettier - Code formatter</code> 会使用prettier.config.js的规则</p><p>依据个人需求，选择是否保存并格式化</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwg68xzpj30ay03l0tc.jpg" alt="image-20210317144545343"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwgmfjo7j30ai01vaa5.jpg" alt="image-20210317144611017"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gosszl3ze5j30cv03ddg5.jpg" alt="image-20210322171921452"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwh86scbj30n0096tb3.jpg" alt="image-20210317144645630"></p><h3 id="7-npm-run-fix-amp-amp-npm-run-lint"><a href="#7-npm-run-fix-amp-amp-npm-run-lint" class="headerlink" title="7. npm run fix &amp;&amp; npm run lint"></a>7. npm run fix &amp;&amp; npm run lint</h3><p>第一次引入项目先执行npm run fix，目的是统一项目中所有单双引号，缩进，格式。后执行npm run lint 。npm run lint(eslint –fix)对一些缩进格式不是特别敏感，所以先执行一遍fix，再执行lint。 以后项目可不再执行npm run fix，编辑提交时只执行npm run lint。</p><p>npm run fix 在你引入到现有项目后执行，帮你把代码格式化到prettier的配置</p><p>npm run lint  带了<code>--fix</code>，它会格式化代码，会修复一些规则。</p><p>引入老项目后。发现有点奔溃😿</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwjnrwyoj304002zdfu.jpg" alt="image-20210317144905929"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwxinde9j307w0pedhf.jpg" alt="image-20210317150225545"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwx1h4tnj30ov0hn45i.jpg" alt="image-20210317150157795"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwhtbic7j30m70idjv6.jpg" alt="image-20210317144719347"></p><p>经过修复后</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp409inu2kj30kb088myp.jpg" alt="image-20210401095218422"></p><h3 id="8-husky"><a href="#8-husky" class="headerlink" title="8 husky"></a>8 husky</h3><p><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a>一个Git Hook 工具，<a href="https://typicode.github.io/husky/#/" target="_blank" rel="noopener">文档</a> 将其安装到所在仓库的过程中它会自动在 .git/ 目录下增加相应的钩子实现在 pre-commit 阶段就执行一系列流程保证每一个 commit 的正确性。</p><p><code>npm install husky --save-dev &amp;&amp; npx husky init</code></p><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev  ||  yarn add husky --save-dev</span><br><span class="line"></span><br><span class="line">npx husky install || yarn husky install</span><br><span class="line">  或者也可以在项目内容install</span><br><span class="line">  // package.json</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">      &quot;prepare&quot;: &quot;husky install&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/Users/linkai/Library/Application Support/typora-user-images/image-20210317150442297.png" alt="image-20210317150442297"></p><p>添加钩子</p><p><code>npx husky add .husky/pre-commit &quot;npm run lint&quot;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">"<span class="variable">$(dirname "$0")</span>/_/husky.sh"</span></span><br><span class="line"></span><br><span class="line">    npm run lint</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwtcpi8hj306t02fwef.jpg" alt="image-20210317145824823"></p><h3 id="9-改代码"><a href="#9-改代码" class="headerlink" title="9 改代码"></a>9 改代码</h3><p>come on！</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="1-Eslint常用配置项"><a href="#1-Eslint常用配置项" class="headerlink" title="1. Eslint常用配置项"></a>1. Eslint常用配置项</h3><p>加入script 。具体内部配置诸位酌情使用，不常用的见<a href="https://eslint.bootcss.com/docs/user-guide/command-line-interface" target="_blank" rel="noopener">文档</a></p><ul><li><code>.</code>代表的是所有文件。也可以写具体的目录，比如<code>pages</code>，<code>utils</code>等</li><li><code>--fix</code>修复文件，剩下的未修复的问题才会输出到命令行</li><li><code>--fix-dry-run</code>：该选项与 <code>--fix</code> 有相同的效果，唯一一点不同是，修复不会保存到文件系统中。</li><li><code>--ext</code>：可以指定在指定目录中搜索JavaScript文件时，ESLint将使用哪些文件扩展名。默认扩展名为<code>.js</code>。</li><li><code>--global</code>：用于定义全局变量。任何指定的全局变量默认是只读的，在变量名字后加上 <code>:true</code> 后会使它变为可写。要指定多个变量，使用逗号分隔它们，或多次使用这个选项。</li><li><code>--quiet</code>只会报告错误error</li><li><code>--max-warnings</code>指定一个警告的阈值,当你的项目中有太多违反规则的警告时，这个阈值被用来强制 ESLint 以错误状态退出  示例:<code>eslint --max-warnings 10 file.js</code></li><li><code>-o</code>将报告写到一个文件。示例 :<code>eslint -o ./test/test.html</code></li><li><code>--cache</code>缓存默认被存储在 <code>.eslintcache</code>启用这个选项可以显著改善 ESLint 的运行时间，确保只对有改变的文件进行检测。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomw6os2fmj30x80g87a8.jpg"></li></ul><h3 id="2-Exit-codes"><a href="#2-Exit-codes" class="headerlink" title="2. Exit codes"></a>2. Exit codes</h3><p> 当检测完毕后，eslint会有状态码提醒</p><ul><li><code>0</code>: 检测成功，没有错误。如果 <code>--max-warnings</code> 标志被设置为 <code>n</code>，那么警告数量最多为<code>n</code>。</li><li><code>1</code>: 检测成功，并且至少有一个错误，或者警告多于 <code>--max-warnings</code> 选项所允许的警告。</li><li><code>2</code>: 由于配置问题或内部错误，检测未能成功。</li></ul><h3 id="3-忽略相关"><a href="#3-忽略相关" class="headerlink" title="3. 忽略相关"></a>3. 忽略相关</h3><ol><li>在文件头部添加规则，整个文件忽略</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="comment">// 代码开始位置</span></span><br></pre></td></tr></table></figure><ol start="2"><li>临时禁止</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br></pre></td></tr></table></figure><ol start="3"><li>对指定规则忽略</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-alert, no-console */</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">/* eslint-enable no-alert, no-console */</span></span><br></pre></td></tr></table></figure><ol start="4"><li>指定行忽略</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>指定行禁用某个规则</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line no-alert</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-alert</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>指定行禁用多个规则</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line no-alert, quotes, semi</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// eslint-disable-next-line no-alert, quotes, semi</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ESLint相关，继承的主要是爱彼迎、eslint推荐、typescript-eslint推荐、React推荐规R，傻瓜式操作步骤，个人实践，可能还存在问题，望多多指教
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ESLint" scheme="https://kitions.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>React  0 -&gt; Hooks</title>
    <link href="https://kitions.github.io/2021/01/04/0%20-%20hooks/"/>
    <id>https://kitions.github.io/2021/01/04/0 - hooks/</id>
    <published>2021-01-04T10:29:32.000Z</published>
    <updated>2022-10-17T03:30:46.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-gt-Hooks"><a href="#0-gt-Hooks" class="headerlink" title="0 -&gt; Hooks"></a>0 -&gt; Hooks</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">funcition App ()&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onClick ()&#123;</span><br><span class="line">      setNum(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React 运行环境</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isMount = <span class="literal">true</span>  <span class="comment">// didMount or didUpdate</span></span><br><span class="line"><span class="keyword">let</span> workInProgressHook = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fiber = &#123;</span><br><span class="line">  stateNode: App,</span><br><span class="line">  memoizedState: <span class="literal">null</span>,  <span class="comment">// 链表</span></span><br><span class="line">  queue:&#123;    <span class="comment">// 队列</span></span><br><span class="line">    pending: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  workInProgressHook = fiber.memoizedState;</span><br><span class="line">  <span class="keyword">const</span> app = fiber.stateNode();</span><br><span class="line">  isMount = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.app = schedule()</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initState</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前hook</span></span><br><span class="line">  <span class="keyword">let</span> hook;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(isMount)&#123;</span><br><span class="line">    hook = &#123;  <span class="comment">// 单向链表</span></span><br><span class="line">      memoizedState: initState,</span><br><span class="line">      next: <span class="literal">null</span> <span class="comment">// 指针 下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fiber.memoizedSate)&#123;</span><br><span class="line">      fiber.memoizedState = hook;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      workInProgressHook.next  = hook</span><br><span class="line">    &#125;</span><br><span class="line">     workInProgressHook  = hook</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    hook = workInProgressHook;</span><br><span class="line">    workInProgressHook = workInProgressHook.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取到了当前useState的数据</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispathAction</span>(<span class="params">queue, action</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> update =&#123; <span class="comment">// 环状链表</span></span><br><span class="line">    action,</span><br><span class="line">    next</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(queue.pending === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// u0 -&gt; u0 -&gt; u0</span></span><br><span class="line">    update.next = update</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// u0 -&gt; u0</span></span><br><span class="line">   <span class="comment">// u1 -&gt; u0 -&gt; u1</span></span><br><span class="line">    <span class="comment">// queue.pending // 最后第一个</span></span><br><span class="line">    <span class="comment">// queue.pending.next //第一个</span></span><br><span class="line">    update.next = queue.pending.next; <span class="comment">// u1 -&gt; u0</span></span><br><span class="line">    queue.pending.next = update; <span class="comment">// u0 -&gt; u1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  queue.pending = update;</span><br><span class="line">  </span><br><span class="line">  schedule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initState</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前hook</span></span><br><span class="line">  <span class="keyword">let</span> hook;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(isMount)&#123;</span><br><span class="line">    hook = &#123;  <span class="comment">// 单向链表</span></span><br><span class="line">      memoizedState: initState,</span><br><span class="line">      next: <span class="literal">null</span> <span class="comment">// 指针 下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fiber.memoizedSate)&#123;</span><br><span class="line">      fiber.memoizedState = hook;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      workInProgressHook.next  = hook</span><br><span class="line">    &#125;</span><br><span class="line">     workInProgressHook  = hook</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    hook = workInProgressHook;</span><br><span class="line">    workInProgressHook = workInProgressHook.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取到了当前useState的数据</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> baseState = hook.memoizedState;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(hook.queue.pending)&#123;</span><br><span class="line">    <span class="keyword">let</span> firstupdate = hook.queue.pending.next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> action = firstUpdate.action</span><br><span class="line">      baseState = action(baseState)</span><br><span class="line">      firstUpdate = firstUpdate.next;</span><br><span class="line">    &#125;<span class="keyword">while</span>(firstUpdate !== hook.queue.pending.next)</span><br><span class="line">      </span><br><span class="line">    hook.queue.pending = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  hook.memoizedState = baseState;</span><br><span class="line">  <span class="keyword">return</span> [baseState, disPatchAction.bind(<span class="literal">null</span>, hook.queue)]</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isMount = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> workInProgressHook = <span class="literal">null</span>   <span class="comment">// 变量  当前处理哪一个hook</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fiber = &#123;</span><br><span class="line">    stateNode: App,</span><br><span class="line">    memoizedState: <span class="literal">null</span>, <span class="comment">// 保存hooks数据 一条链表 每一个hook数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    workInProgressHook = fiber.memoizedState</span><br><span class="line">    <span class="keyword">const</span> app = fiber.stateNode()</span><br><span class="line">    isMount = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initState</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hook;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMount) &#123;</span><br><span class="line">        hook = &#123;  <span class="comment">// 单向链表</span></span><br><span class="line">            memoizedState: initState,</span><br><span class="line">            next: <span class="literal">null</span>,</span><br><span class="line">            queue: &#123;</span><br><span class="line">                pending: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fiber.memoizedState) &#123;</span><br><span class="line">            fiber.memoizedState = hook</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            workInProgressHook.next = hook</span><br><span class="line">        &#125;</span><br><span class="line">        workInProgressHook = hook</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//  已经有一条链表了</span></span><br><span class="line">        hook = workInProgressHook; <span class="comment">// 取到了</span></span><br><span class="line">        workInProgressHook = workInProgressHook.next; <span class="comment">// 指向下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取到了当前useState对应的数据 ，then 计算新状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> baseState = hook.memoizedState</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hook.queue.pending) &#123;</span><br><span class="line">        <span class="keyword">let</span> firstUpdate = hook.queue.pending.next <span class="comment">// 第一个update</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> action = firstUpdate.action</span><br><span class="line">            baseState = action(baseState);</span><br><span class="line">            firstUpdate = firstUpdate.next <span class="comment">// 指向下一个</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (firstUpdate != hook.queue.pending.next)</span><br><span class="line"></span><br><span class="line">        hook.queue.pending = <span class="literal">null</span> <span class="comment">// 计算完 清空</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hook.memoizedState = baseState</span><br><span class="line">    <span class="keyword">return</span> [baseState, dispatchAction.bind(<span class="literal">null</span>, hook.queue)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setNum - action</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchAction</span>(<span class="params">queue, action</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建数据结构update，每次更新有优先级的，click &gt; fecth</span></span><br><span class="line">    <span class="keyword">const</span> update = &#123;</span><br><span class="line">        action, <span class="comment">// 环装链表</span></span><br><span class="line">        next: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表操作</span></span><br><span class="line">    <span class="keyword">if</span> (queue.pending === <span class="literal">null</span>) &#123;</span><br><span class="line">        update.next = update</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// u0 -&gt; u0</span></span><br><span class="line">        <span class="comment">// u1 -&gt; u0 -&gt; u1</span></span><br><span class="line">        <span class="comment">// queue.pending 最后一个update</span></span><br><span class="line">        <span class="comment">// queue.pending.next 第一个update</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"第一个update"</span>,queue.pending.next)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"最后一个update"</span>,queue.pending)</span><br><span class="line">        update.next = queue.pending.next; <span class="comment">// u1 =&gt; u0</span></span><br><span class="line">        queue.pending.next = update; <span class="comment">// u0 =&gt; u1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次执行就是最后一个update</span></span><br><span class="line">    queue.pending = update</span><br><span class="line"></span><br><span class="line">    schedule()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FC 保存hooks数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [num1, setNum1] = useState(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> [num2, setNum2] = useState(<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(isMount)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num"</span>,num)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num1"</span>,num1)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num2"</span>,num2)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        onClick() &#123;</span><br><span class="line">            setNum(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        set() &#123;</span><br><span class="line">            setNum1(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">10</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        set2() &#123;</span><br><span class="line">            setNum2(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.app = schedule()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      从0 -&gt; Hooks
    
    </summary>
    
      <category term="React" scheme="https://kitions.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>wx-open-launch-app指南</title>
    <link href="https://kitions.github.io/2020/10/21/wx-open-launch-app%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>https://kitions.github.io/2020/10/21/wx-open-launch-app采坑指南/</id>
    <published>2020-10-21T08:10:03.000Z</published>
    <updated>2022-10-17T03:30:46.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wx-open-launch-app指南"><a href="#wx-open-launch-app指南" class="headerlink" title="wx-open-launch-app指南"></a>wx-open-launch-app指南</h1><p>今年5月微信刚开放的API，以往只对它投资的公司，或者干儿子开放，现在对绑定服务号且认证的企业都开放了，接入也比较简单，就是感觉文档太简单，覆盖面不足，不过都可以自己采坑来解决，可以去<a href="https://developers.weixin.qq.com/community/" target="_blank" rel="noopener">微信开放社区</a>提问或者找相应别人踩过的坑找答案。</p><h2 id="一、接入"><a href="#一、接入" class="headerlink" title="一、接入"></a>一、接入</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjx07td2opj30tw07ut9u.jpg" alt="image-20201021155005245"></p><p>获得此设置入口的权限，需同时满足如下条件：</p><ol><li>服务号已认证</li><li>开放平台账号已认证</li><li>服务号与开放平台账号同主体</li></ol><h3 id="绑定域名和移动应用"><a href="#绑定域名和移动应用" class="headerlink" title="绑定域名和移动应用"></a>绑定域名和移动应用</h3><ol><li>绑定域名的要求：</li></ol><ul><li>域名须为当前服务号的 JS 安全域名或其子域名</li><li>域名只能同时绑定一个移动应用，因此须确保域名未被其他移动应用绑定</li></ul><ol start="2"><li>绑定移动应用的要求</li></ol><ul><li>只能绑定同一微信开放平台账号下审核通过的移动应用</li></ul><ol start="3"><li>绑定次数</li></ol><ul><li>每月可修改绑定3次</li></ul><hr><p>以上是 产品经理负责修改，你只需要拿到app的id，小程序的id，确保第一张图的安全域名跟你开发的站的完全一致，不支持二级域名哦！</p><p>以下代码是在你页面中已经注入过wx.config的条件下,并且新增</p><p>wx.config { openTagList: [‘wx-open-launch-app’, ‘wx-open-launch-weapp’]}</p><h3 id="在你的H5中接入微信开放标签"><a href="#在你的H5中接入微信开放标签" class="headerlink" title="在你的H5中接入微信开放标签"></a>在你的H5中接入微信开放标签</h3><h4 id="1-微信小程序"><a href="#1-微信小程序" class="headerlink" title="1. 微信小程序"></a>1. 微信小程序</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;wx-open-launch-weapp</span><br><span class="line">                          id=<span class="string">"launch-btn-weapp"</span></span><br><span class="line">                          username=<span class="string">"gh_*****"</span></span><br><span class="line">                          path=<span class="string">"pages/home/home.html"</span></span><br><span class="line">                      &gt;</span><br><span class="line">                          &lt;script type=<span class="string">"text/wxtag-template"</span>&gt;</span><br><span class="line">                              &lt;div className=<span class="string">"btn1"</span> style=&#123;&#123; <span class="attr">width</span>: <span class="string">'170px'</span>, <span class="attr">height</span>: <span class="string">'70px'</span>, <span class="attr">lineHeight</span>: <span class="string">"70px"</span>, <span class="attr">color</span>: <span class="string">"rgba(0,0,0,1)"</span>, <span class="attr">display</span>: <span class="string">"block"</span>, <span class="attr">fontSize</span>: <span class="string">"38px"</span>, <span class="attr">textAlign</span>: <span class="string">"center"</span> &#125;&#125;&gt;打开小程序&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                          &lt;/</span>script&gt;</span><br><span class="line">                          &#123;<span class="comment">/* @ts-ignore */</span>&#125;</span><br><span class="line">                      &lt;<span class="regexp">/wx-open-launch-weapp&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-APP"><a href="#2-APP" class="headerlink" title="2.  APP"></a>2.  APP</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt; wx-open-launch-app</span><br><span class="line">id = <span class="string">"launch-btn-app"</span></span><br><span class="line">appid = <span class="string">""</span></span><br><span class="line">extinfo = &#123;<span class="string">`带给app的信息 可以使用协议，让app端接受`</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/wxtag-template"</span> &gt;</span><br><span class="line">&lt;div style=&#123;&#123; <span class="attr">width</span>: <span class="string">'170px'</span>, <span class="attr">height</span>: <span class="string">'70px'</span>, <span class="attr">lineHeight</span>: <span class="string">"70px"</span>, <span class="attr">color</span>: <span class="string">"rgba(0,0,0,1)"</span>, <span class="attr">display</span>: <span class="string">"block"</span>, <span class="attr">fontSize</span>: <span class="string">"38px"</span>, <span class="attr">textAlign</span>: <span class="string">"center"</span> &#125;&#125;&gt; 打开App &lt; <span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt; /</span>script&gt;</span><br><span class="line">&#123;<span class="comment">/* @ts-ignore */</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/wx-open-launch-app&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-JS生成Dom"><a href="#3-JS生成Dom" class="headerlink" title="3. JS生成Dom"></a>3. JS生成Dom</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dom.innerHTML = <span class="string">'&lt;wx-open-launch-app style="width:100%; display:block;" id="launch-btn"  extinfo="" appid=""&gt;&lt;template&gt;&lt;div class="wx-btn" style="color:#fff;text-align:center" &gt;JS生成的按钮&lt;/div&gt;&lt;/template&gt;&lt;/wx-open-launch-app&gt;'</span></span><br><span class="line">           <span class="keyword">var</span> launchBtn = <span class="built_in">document</span>.getElementById(<span class="string">'launch-btn'</span>)</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"launchBtn"</span>, launchBtn)</span><br><span class="line">           <span class="keyword">if</span> (!launchBtn) &#123;</span><br><span class="line">               <span class="keyword">return</span></span><br><span class="line">           &#125;</span><br><span class="line">           launchBtn.addEventListener(<span class="string">'launch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'btlaunchBtnn success'</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           launchBtn.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e: any</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'launchBtnfail'</span>, e.detail)</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><p>如果一切正常的话，就可以唤起你的小程序和APP了</p><p>注意的是</p><blockquote><p>微信版本要求为：7.0.12及以上。 系统版本要求为：iOS 10.3及以上、Android 5.0及以上，weixin.js 版本1.6.0以上</p><p><a href="https://res.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">https://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p></blockquote><h4 id="4-错误返回"><a href="#4-错误返回" class="headerlink" title="4.  错误返回"></a>4.  错误返回</h4><p><code>error</code>事件返回值<code>errMsg</code>说明如下。</p><table><thead><tr><th style="text-align:left">errMsg</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">“launch:fail”</td><td style="text-align:left">调⽤失败，或安卓上该应用未安装，或iOS上用户在弹窗上点击确认但该应⽤未安装</td></tr><tr><td style="text-align:left">“launch:fail_check fail”</td><td style="text-align:left">校验App跳转权限失败，请确认是否正确绑定AppID</td></tr></tbody></table><h2 id="二、坑-不能是二级域名"><a href="#二、坑-不能是二级域名" class="headerlink" title="二、坑 - 不能是二级域名"></a>二、坑 - 不能是二级域名</h2><p>经查证，只能是具体域名，不能是二级域名</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjwzr9w156j30ok0b1zlo.jpg" alt="image-20201021153405769"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjwzs1cl1cj30oe05t0t6.jpg" alt="image-20201021153455648"></p><h2 id="三、参考链接"><a href="#三、参考链接" class="headerlink" title="三、参考链接"></a>三、参考链接</h2><ol><li><p><a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_H5_Launch_APP.html" target="_blank" rel="noopener">微信内H5跳转APP或者小程序文档</a></p></li><li><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html" target="_blank" rel="noopener">微信开放标签说明文档</a></p></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#1" target="_blank" rel="noopener">JS-SDK使用步骤</a></li><li><a href="https://www.cnblogs.com/willian/p/13293030.html" target="_blank" rel="noopener">cnblogs其他人采坑</a></li><li><a href="https://blog.csdn.net/WangYC_/article/details/107089709" target="_blank" rel="noopener">csdn其他人采坑</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/0000065f1741801069eaec5e55b400?_at=1603177240329" target="_blank" rel="noopener">官方回复域名issues</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000082dea443f0d2042b5081156000" target="_blank" rel="noopener">自己提的域名issues</a></li></ol><h2 id="四、完整代码"><a href="#四、完整代码" class="headerlink" title="四、完整代码"></a>四、完整代码</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsx</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.isAllowWeixinTag(userAgent)</span><br><span class="line">?</span><br><span class="line"><span class="comment">// 微信环境</span></span><br><span class="line">&lt;&gt;</span><br><span class="line">&#123;<span class="comment">/* @ts-ignore */</span> &#125;</span><br><span class="line">&lt; wx-open-launch-app</span><br><span class="line">id = <span class="string">"launch-btn-app"</span></span><br><span class="line">appid = <span class="string">""</span></span><br><span class="line">extinfo = &#123;<span class="string">`带给app的信息 可以使用协议，让app端接受`</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/wxtag-template"</span> &gt;</span><br><span class="line">&lt;div style=&#123;&#123; <span class="attr">width</span>: <span class="string">'170px'</span>, <span class="attr">height</span>: <span class="string">'70px'</span>, <span class="attr">lineHeight</span>: <span class="string">"70px"</span>, <span class="attr">color</span>: <span class="string">"rgba(0,0,0,1)"</span>, <span class="attr">display</span>: <span class="string">"block"</span>, <span class="attr">fontSize</span>: <span class="string">"38px"</span>, <span class="attr">textAlign</span>: <span class="string">"center"</span> &#125;&#125;&gt; 打开App &lt; <span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt; /</span>script&gt;</span><br><span class="line">&#123;<span class="comment">/* @ts-ignore */</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/wx-open-launch-app&gt;</span></span><br><span class="line"><span class="regexp">&lt; /</span>&gt;</span><br><span class="line">: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"go_to_app"</span> <span class="attr">onClick</span> = <span class="string">&#123;</span> <span class="attr">this.onApp</span> &#125; &gt;</span> 打开APP <span class="tag">&lt; /<span class="attr">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.isAllowWeixinTag(<span class="keyword">this</span>.props.userAgent)) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"launch-btn-app"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"app"</span>, btn)</span><br><span class="line">            <span class="keyword">if</span>(!btn) <span class="keyword">return</span></span><br><span class="line">            btn.addEventListener(<span class="string">'launch'</span>, (e: any) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 在此处可设置粘贴板内数据，数据是传递给 app 的参数进，</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">' app success'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            btn.addEventListener(<span class="string">'error'</span>, (e: any) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 在此处可设置粘贴板内数据，数据是传递给 app 的参数，</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'app'</span>, e.detail);</span><br><span class="line">                <span class="comment">// 唤醒失败的情况下,可以打开app等</span></span><br><span class="line">                <span class="keyword">this</span>.onApp()</span><br><span class="line">            &#125;);    </span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="comment">//function</span></span><br><span class="line">    </span><br><span class="line">isAllowWeixinTag(userAgent: string)&#123;</span><br><span class="line">      &#123;<span class="comment">/* 1.微信环境  2.微信版本大于7.0.12 */</span>&#125;</span><br><span class="line">     <span class="keyword">return</span> UA(userAgent).isWechat &amp;&amp; HandleJudgeWechat(userAgent)</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">const</span> HandleJudgeWechat = <span class="function">(<span class="params">ua: string</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> wechat = ua.match(<span class="regexp">/MicroMessenger\/([\d\.]+)/i</span>);</span><br><span class="line"><span class="keyword">let</span> judgewechat = wechat[<span class="number">1</span>].split(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(judgewechat[<span class="number">0</span>]) &gt;= <span class="number">7</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(judgewechat[<span class="number">1</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(judgewechat[<span class="number">2</span>]) &gt;= <span class="number">12</span>) &#123;</span><br><span class="line"><span class="comment">// console.log("当前微信版本大于7.0.12 可打开指定app")</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、-总结"><a href="#五、-总结" class="headerlink" title="五、 总结"></a>五、 总结</h2><p>较为简单的接入。</p><p>只能到微信安全域名下测试，实在是麻烦，导致 只能发版测试，而且唤醒绑定的那个域名是正式环境的，略麻烦。微信开发者工具对这个新标签兼容性不是很好。</p>]]></content>
    
    <summary type="html">
    
      今年5月微信新开放的api ， 微信环境H5唤起APP和小程序实践
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="微信" scheme="https://kitions.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>群晖Moments发送未知错误</title>
    <link href="https://kitions.github.io/2020/10/18/%E7%BE%A4%E8%BE%89Moment/"/>
    <id>https://kitions.github.io/2020/10/18/群辉Moment/</id>
    <published>2020-10-18T08:24:19.000Z</published>
    <updated>2022-10-17T03:30:46.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="群晖Moments发送未知错误，请再试一次"><a href="#群晖Moments发送未知错误，请再试一次" class="headerlink" title="群晖Moments发送未知错误，请再试一次"></a>群晖Moments发送未知错误，请再试一次</h1><p>按下面图的步骤来就好了，先删三个套件，重启，安装moments，最后恢复索引，就好了。下面的图就不解释了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsfj1awqj30hb0910sv.jpg" alt="image-20201020143501721"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsg8dc4nj30lc0eoq57.jpg" alt="image-20201020143549313"></p><p>时间比较长，等等</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvskxusuhj30oi0fwju3.jpg" alt="image-20201020144021076"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsmi01q4j30k90g7acq.jpg" alt="image-20201020144150773"></p><p>我这个群辉 应用程序服务的图标是错的，不知道为啥</p><p>最后一步 重启NAS</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsnl2j26j30gx09w42m.jpg" alt="image-20201020144253666"></p><p>最最后 重启，安装moment，它会自动下载群辉应用程序和drive。Node.js我本机是安装的，所以不用重新下了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsse9kjvj30e308g0t8.jpg" alt="image-20201020144731049"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvstr8f0aj30kh0duq5p.jpg" alt="image-20201020144848581"></p><p>因为重装了drive，它会去索引文件夹</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsy80htwj30e607pjta.jpg" alt="image-20201020145306329"></p><p>打开moment，好了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvtpfzcj8j31f00npgp4.jpg" alt="image-20201020151858761"></p><p>接着 我们要点开左下角的设置，要重建索引</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvtr12oefj30mu0hgjta.jpg" alt="image-20201020152040110"></p><p>看到图片 慢慢有了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvttn2c82j31e50mvt9x.jpg" alt="image-20201020152316292"></p>]]></content>
    
    <summary type="html">
    
      我的群晖内置的存储空间1坏了，新换了块固态，启动Moments遇到这个问题
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="群晖" scheme="https://kitions.github.io/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>H5唤醒APP 简单hacker方法</title>
    <link href="https://kitions.github.io/2020/10/15/H5%E5%94%A4%E9%86%92APP%20%E7%AE%80%E5%8D%95hacker%E6%96%B9%E6%B3%95/"/>
    <id>https://kitions.github.io/2020/10/15/H5唤醒APP 简单hacker方法/</id>
    <published>2020-10-15T03:58:39.000Z</published>
    <updated>2022-10-17T03:30:46.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="H5唤醒APP-简单hacker方法"><a href="#H5唤醒APP-简单hacker方法" class="headerlink" title="H5唤醒APP 简单hacker方法"></a>H5唤醒APP 简单hacker方法</h2><p>本质上浏览器是通过URLscheme打开APP，一个APP可以设置一个或多个打开自己的URL scheme。类似于zhihu://</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> APPRouter = <span class="function">(<span class="params">router: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isWeiXin()) &#123;</span><br><span class="line">        <span class="comment">// alert("请点击右上角打开其他浏览器")</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = router</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span>(isAndroid())&#123;</span><br><span class="line">          <span class="comment">// 安卓 </span></span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">Date</span>.now()</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - t &lt; <span class="number">1200</span>) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">// 苹果</span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">            &#125;, <span class="number">250</span>)</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.reload()</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安卓设置的原理："><a href="#安卓设置的原理：" class="headerlink" title="安卓设置的原理："></a>安卓设置的原理：</h3><p>如果设置比较小的运行间隔（&lt;30ms），在浏览器或者webview中，应用切换到后台，setInterval会被很明显的延迟执行，比如设置一个运行间隔20ms，总计运行100次的定时器，如果页面一直处于前台，则100次跑完，总耗时与100x20=2000ms不会有太大差异，但页面在后台运行时，此时间会明显超过2000ms。可以利用这一点来实现是否成功打开APP检测及回调。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="built_in">Date</span>.now()</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - t &lt; <span class="number">1200</span>) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="苹果设置的原理："><a href="#苹果设置的原理：" class="headerlink" title="苹果设置的原理："></a>苹果设置的原理：</h3><p>APP已安装这是没问题的，但如果APP未安装，跳App Store 的请求会失败。 这时可以使用两个定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">           &#125;, <span class="number">250</span>)</span><br><span class="line">           setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">window</span>.location.reload()</span><br><span class="line">           &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="Iframe"><a href="#Iframe" class="headerlink" title="Iframe"></a>Iframe</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ifm = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"></span><br><span class="line">      ifm.setAttribute(<span class="string">'src'</span>, wakeupUrl);</span><br><span class="line">      ifm.setAttribute(<span class="string">'style'</span>, <span class="string">'display:none'</span>);</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(ifm);</span><br><span class="line">      onBeforeWakeup &amp;&amp; onBeforeWakeup();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> currentTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">          <span class="keyword">if</span> (nowTime - currentTime &lt; <span class="number">1050</span>) &#123;</span><br><span class="line">            <span class="comment">// 回调</span></span><br><span class="line">              onWakeupFail &amp;&amp; onWakeupFail();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="引导页"><a href="#引导页" class="headerlink" title="引导页"></a>引导页</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> H5ToApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="h5_toweixin" style="z-index: 9999;position: absolute;width: 100%;top: 0px;left: 0;height: 100%;"&gt;</span></span><br><span class="line"><span class="string">        &lt;img src="/images/h5-weixin.png" alt="引导到微信"/&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">    <span class="keyword">const</span> bodyScroll = <span class="function">(<span class="params">event: any</span>) =&gt;</span> &#123;</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    div.appendChild(parseElement(template))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'touchmove'</span>, bodyScroll);</span><br><span class="line">    <span class="built_in">document</span>.body.style.position = <span class="string">'fixed'</span>;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, fn)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (div.parentNode) &#123;</span><br><span class="line">            <span class="built_in">document</span>.body.style.position = <span class="string">'static'</span>;</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">'touchmove'</span>, bodyScroll);</span><br><span class="line">            <span class="built_in">document</span>.removeEventListener(<span class="string">'click'</span>,fn);</span><br><span class="line">            div.parentNode.removeChild(div);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parseElement = <span class="function">(<span class="params">htmlString: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DOMParser().parseFromString(htmlString, <span class="string">'text/html'</span>).body.childNodes[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;H5ToApp&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>坑很多，问题主要在安卓上，会有各种兼容问题，机型浏览器众多。当然ios也有。</p><p>知乎的解决办法是，提供两个按钮，一个下载，一个打开APP，让用户自己选。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>链接：<a href="https://www.jianshu.com/p/7645ad94840d" target="_blank" rel="noopener">https://www.jianshu.com/p/7645ad94840d</a></p>]]></content>
    
    <summary type="html">
    
      H5唤醒APP,本质上浏览器是通过URLscheme打开APP，安卓和苹果的两个比较hack的方法实现了跳转后本页面不跳转到下载页
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="H5" scheme="https://kitions.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>函数的柯里化简单了解</title>
    <link href="https://kitions.github.io/2020/08/25/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://kitions.github.io/2020/08/25/函数的柯里化/</id>
    <published>2020-08-25T11:41:44.000Z</published>
    <updated>2022-10-17T03:30:46.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>接受多个参数的函数转换成接受单一参数的函数的操作。通俗理解为：只传递给函数的一部分参数来调用它，让它返回一个新函数去处理剩下的参数。</p><blockquote><p>测试可用quokka.js（免费版即可）  vscode的插件</p></blockquote><h2 id="二、参数定长柯里化"><a href="#二、参数定长柯里化" class="headerlink" title="二、参数定长柯里化"></a>二、参数定长柯里化</h2><h3 id="2-1-例一"><a href="#2-1-例一" class="headerlink" title="2.1 例一"></a>2.1 例一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = currying(add);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addCurryOne = sum(<span class="number">1</span>);</span><br><span class="line">addCurryOne(<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line">addCurryOne(<span class="number">3</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>用闭包把传入参数保存起来，当传入参数的数量足够执行函数时，就开始执行函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rest.length === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> func(...args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          args.push(...rest);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi35mxxb8cj30eo0ga0tz.jpg" alt="image-20200825165013800"></p><h3 id="2-2-例二"><a href="#2-2-例二" class="headerlink" title="2.2 例二"></a>2.2 例二</h3><p>柯里化是在一个函数的基础上变换，得到一个新的预设了参数的函数。最后在调用新函数时候，实际上还是会调用柯里化前的原函数。</p><p>而且柯里化得到的新函数可以继续被柯里化，有点递归的感觉，不对不是递归，有点套娃的感觉</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi49mnwbg6j30tk0fp42s.jpg" alt="image-20200826155358746"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adds</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn, length</span>) </span>&#123;</span><br><span class="line">    length = length || fn.length; <span class="comment">// 第一次调用获取函数 fn 参数的长度，后续调用获取 fn 剩余参数的长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span> <span class="comment">//将类数组对象转换成数组</span></span><br><span class="line">        <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>) <span class="comment">// currying返回函数接受的参数</span></span><br><span class="line">        fn</span><br><span class="line">        args</span><br><span class="line">        <span class="built_in">console</span>.log(args.length)</span><br><span class="line">        length</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; length) &#123; <span class="comment">// 判断参数的长度是否小于 fn 剩余参数需要接收的长度</span></span><br><span class="line">            <span class="keyword">return</span> currying(fn.bind(<span class="keyword">this</span>, ...args), length - args.length) <span class="comment">// 递归 currying 函数，新的 fn 为 bind 返回的新函数（bind 绑定了 ...args 参数，未执行），新的 length 为 fn 剩余参数的长度</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(fn)</span><br><span class="line">            <span class="built_in">console</span>.log(...args)</span><br><span class="line">            <span class="keyword">return</span> fn.call(<span class="keyword">this</span>, ...args) <span class="comment">// 执行 fn 函数，传入新函数的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addCurry = currying(adds);</span><br><span class="line"><span class="built_in">console</span>.log(addCurry(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)) <span class="comment">// 9</span></span><br><span class="line"><span class="comment">// console.log(addCurry(2, 3)(4))  // 9</span></span><br><span class="line"><span class="comment">// console.log(addCurry(2, 3, 4))  // 9</span></span><br><span class="line"><span class="comment">// addCurry(2)(3, 4) // 9</span></span><br></pre></td></tr></table></figure><p>实现原理都是「用闭包把传入参数保存起来，当传入参数的数量足够执行函数时，就开始执行函数」</p><h2 id="三、实际使用"><a href="#三、实际使用" class="headerlink" title="三、实际使用"></a>三、实际使用</h2><h3 id="1-bind"><a href="#1-bind" class="headerlink" title="1.bind"></a>1.bind</h3><p>MDN的解释</p><blockquote><p><code>Function.prototype.bind()</code>方法创建一个新的函数，在<code>bind()</code>被调用时，这个新函数的<code>this</code>被指定为<code>bind</code>的第一个参数，而其余参数会被指定为新函数的参数，供调用时使用</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5i8qlgwqj30eg0eltb4.jpg" alt="image-20200827173736428"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结!"></a>总结!</h2><p>柯里化属于函数式编程思想。柯里化时只是返回一个预置参数的新函数，没有立刻执行，实际上在满足条件后才会执行。不污染原函数。</p>]]></content>
    
    <summary type="html">
    
      接受多个参数的函数转换成接受单一参数的函数的操作。通俗理解为：只传递给函数的一部分参数来调用它，让它返回一个新函数去处理剩下的参数。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="javascript" scheme="https://kitions.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器事件全屏</title>
    <link href="https://kitions.github.io/2020/07/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%85%A8%E5%B1%8F/"/>
    <id>https://kitions.github.io/2020/07/31/浏览器事件全屏/</id>
    <published>2020-07-31T03:55:08.000Z</published>
    <updated>2022-10-17T03:30:46.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器事件全屏"><a href="#浏览器事件全屏" class="headerlink" title="浏览器事件全屏"></a>浏览器事件全屏</h1><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全屏</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fullScreen = <span class="function">(<span class="params">element: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen || element.msRequestFullscreen || element.requestFullscreen;</span><br><span class="line">    <span class="keyword">if</span> (requestMethod) &#123;</span><br><span class="line">        requestMethod.call(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="built_in">window</span> <span class="keyword">as</span> any).ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="comment">//for IE，这里其实就是模拟了按下键盘的F11，使浏览器全屏</span></span><br><span class="line">        <span class="keyword">var</span> wscript = <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>);</span><br><span class="line">        <span class="keyword">if</span> (wscript != <span class="literal">null</span>) &#123;</span><br><span class="line">            wscript.SendKeys(<span class="string">"&#123;F11&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 退出全屏</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> exitFullScreen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> el: any = <span class="built_in">document</span>;</span><br><span class="line">    <span class="comment">// 判断各种浏览器，找到正确的方法</span></span><br><span class="line">    <span class="keyword">var</span> exitMethod = el.exitFullscreen || <span class="comment">//W3C</span></span><br><span class="line">        el.mozCancelFullScreen || <span class="comment">//FireFox</span></span><br><span class="line">        el.webkitExitFullscreen || <span class="comment">//Chrome等</span></span><br><span class="line">        el.webkitExitFullscreen; <span class="comment">//IE11</span></span><br><span class="line">    <span class="keyword">if</span> (exitMethod) &#123;</span><br><span class="line">        exitMethod.call(<span class="built_in">document</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="built_in">window</span> <span class="keyword">as</span> any).ActiveXObject !== <span class="string">"undefined"</span>) &#123; <span class="comment">//for Internet Explorer</span></span><br><span class="line">        <span class="keyword">var</span> wscript = <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>);</span><br><span class="line">        <span class="keyword">if</span> (wscript !== <span class="literal">null</span>) &#123;</span><br><span class="line">            wscript.SendKeys(<span class="string">"&#123;F11&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullChage = <span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> el: any = <span class="built_in">document</span></span><br><span class="line">        <span class="comment">// if isFullScreen</span></span><br><span class="line">        <span class="keyword">if</span> (el.isFullScreen || el.mozFullScreen || el.webkitIsFullScreen) &#123;</span><br><span class="line">            <span class="comment">// do someting</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"全屏失败"</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"fullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mozfullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"webkitfullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"msfullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      浏览器的全屏，退出全屏，监听全屏
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="全屏" scheme="https://kitions.github.io/tags/%E5%85%A8%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>styled-components浅入浅出</title>
    <link href="https://kitions.github.io/2020/07/25/styled-components/"/>
    <id>https://kitions.github.io/2020/07/25/styled-components/</id>
    <published>2020-07-25T10:45:22.000Z</published>
    <updated>2022-10-17T03:30:46.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h1><p>styled-components以组件的形式来声明样式，让样式也成为组件，从而分离逻辑组件与展示组件。</p><h2 id="部分实践"><a href="#部分实践" class="headerlink" title="部分实践"></a>部分实践</h2><h3 id="1-引入全部样式"><a href="#1-引入全部样式" class="headerlink" title="1.  引入全部样式"></a>1.  引入全部样式</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createGlobalStyle&#125; <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Global = createGlobalStyle<span class="string">`</span></span><br><span class="line"><span class="string">  body&#123;</span></span><br><span class="line"><span class="string">    background-color:red!important;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> h1, h2, h3 &#123;</span></span><br><span class="line"><span class="string">    font-family: '<span class="subst">$&#123;props =&gt; props.theme.fontFamily.common&#125;</span>';</span></span><br><span class="line"><span class="string">    font-weight: normal;</span></span><br><span class="line"><span class="string">    font-style: normal;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">  &lt;Global&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Global</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-input-attr"><a href="#2-input-attr" class="headerlink" title="2.  input attr"></a>2.  input attr</h3><p>为Styled-Component添加默认属性和默认样式值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Input = styled.input.attrs(<span class="function"><span class="params">props</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// we can define static props</span></span><br><span class="line">  type: <span class="string">"password"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// or we can define dynamic ones</span></span><br><span class="line">  size: props.size || <span class="string">"1em"</span>,</span><br><span class="line">&#125;))<span class="string">`</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Input /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="3-主题"><a href="#3-主题" class="headerlink" title="3. 主题"></a>3. 主题</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> theme = &#123;</span><br><span class="line">fontSizes: &#123;</span><br><span class="line">sm: <span class="string">'10px'</span>,</span><br><span class="line">md: <span class="string">'15px'</span>,</span><br><span class="line">lg: <span class="string">'25px'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BodyTexts = styled.p<span class="string">`</span></span><br><span class="line"><span class="string">font-size: <span class="subst">$&#123;props =&gt; props.theme.fontSizes.sm&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ThemeProvider theme=&#123;theme&#125;&gt;</span><br><span class="line">      &lt;BodyTexts&gt;Themed&lt;<span class="regexp">/BodyTexts&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ThemeProvider&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="4-继承"><a href="#4-继承" class="headerlink" title="4. 继承"></a>4. 继承</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> StyledCompoent2 = styled(StyledCompoent1)<span class="string">`</span></span><br><span class="line"><span class="string">    background:xxx</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>StyledComponent2其实是一个全新的class</p><p>如果我们想要做到<strong>真正的继承</strong>，需要使用style-components提供的<code>extend</code>方法，它是StyleComponent下的一个属性方法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> StyledCompoent2 = StyledCompoent1.extend<span class="string">`</span></span><br><span class="line"><span class="string">    background:xxx</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h3 id="5-withComponent"><a href="#5-withComponent" class="headerlink" title="5. withComponent"></a>5. withComponent</h3><p>创建新StyledComponent的方法，该新StyledComponent会应用不同的标签或组件，但所调用的规则相同。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Component = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Component</span><br><span class="line">    <span class="keyword">as</span>=<span class="string">"button"</span></span><br><span class="line">    onClick=&#123;() =&gt; alert(<span class="string">'It works!'</span>)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Hello World!</span><br><span class="line">  &lt;<span class="regexp">/Component&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h3 id="6-Refs"><a href="#6-Refs" class="headerlink" title="6. Refs"></a>6. Refs</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Input = styled.input<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 0.5em;</span></span><br><span class="line"><span class="string">  margin: 0.5em;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.inputRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Input</span><br><span class="line">        ref=&#123;<span class="keyword">this</span>.inputRef&#125;</span><br><span class="line">        placeholder=<span class="string">"Hover to focus!"</span></span><br><span class="line">        onMouseEnter=&#123;() =&gt; &#123;</span><br><span class="line">          <span class="keyword">this</span>.inputRef.current.focus()</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">render(</span><br><span class="line">  &lt;Form /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="7-获取Theme"><a href="#7-获取Theme" class="headerlink" title="7. 获取Theme"></a>7. 获取Theme</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withTheme &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Current theme: '</span>, <span class="keyword">this</span>.props.theme);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withTheme(MyComponent)</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Stylelint"><a href="#Stylelint" class="headerlink" title="Stylelint"></a>Stylelint</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(npm install --save-dev \</span><br><span class="line">  stylelint \</span><br><span class="line">  stylelint-processor-styled-components \</span><br><span class="line">  stylelint-config-styled-components \</span><br><span class="line">  stylelint-config-recommended)</span><br></pre></td></tr></table></figure><h3 id="Styled-Theming"><a href="#Styled-Theming" class="headerlink" title="Styled Theming"></a><a href="https://styled-components.com/docs/tooling#styled-theming" target="_blank" rel="noopener">Styled Theming</a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> styled, &#123; ThemeProvider &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">'styled-theming'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boxBackgroundColor = theme(<span class="string">'mode'</span>, &#123;</span><br><span class="line">  light: <span class="string">'#fff'</span>,</span><br><span class="line">  dark: <span class="string">'#000'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Box = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;boxBackgroundColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ThemeProvider theme=&#123;&#123; <span class="attr">mode</span>: <span class="string">'light'</span> &#125;&#125;&gt;</span><br><span class="line">      &lt;Box&gt;Hello World&lt;<span class="regexp">/Box&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ThemeProvider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vscode-styled-components"><a href="#vscode-styled-components" class="headerlink" title="vscode-styled-components"></a><strong>vscode-styled-components</strong></h3><h3 id="typescript-plugin-styled-components"><a href="#typescript-plugin-styled-components" class="headerlink" title="typescript-plugin-styled-components"></a><a href="https://github.com/Igorbek/typescript-plugin-styled-components" target="_blank" rel="noopener">typescript-plugin-styled-components</a></h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>活跃的<a href="https://github.com/styled-components/styled-components/graphs/contributors" target="_blank" rel="noopener">社区</a>。</li><li><strong>CSS的模板文字语法</strong>。这意味着，如果您可以编写普通的CSS，就可以为组件设置样式，而不必学习新的语法。</li><li>Sass支持。</li><li>自动提供前缀</li><li>组件更加独立清晰，语义化更清晰，维护简单，第二个人接手很快，也不用顾忌之前的样式冲突。</li><li>减轻了大家类名命名的负担。</li><li>可实现仅加载所需的最少代码。</li><li>兼容性良好 v4.x（React v16.3 +：IE11，IE 9+（带有Map + Set polyfills）</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>使用<strong>vscode-styled-components</strong> 有提示，但提示速度较慢，没有scss、css提示友好，比如margin-left，我在scss中只需要ml回车就行了，在styled-components组件中就还是得打全。</li><li>产品改样式，想要从HTML中定位确切的知道代码中某个 class 在哪儿用到很难</li></ol><h3 id="so"><a href="#so" class="headerlink" title="so:"></a>so:</h3><p>优点&gt;缺点，go on 用起来吧！</p>]]></content>
    
    <summary type="html">
    
      styled-components以组件的形式来声明样式，让样式也成为组件，从而分离逻辑组件与展示组件。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="styled-components" scheme="https://kitions.github.io/tags/styled-components/"/>
    
  </entry>
  
  <entry>
    <title>React + antd-table 表格拖拽</title>
    <link href="https://kitions.github.io/2020/07/22/React%20+%20antd-table%20%E8%A1%A8%E6%A0%BC%E6%8B%96%E6%8B%BDclass%E7%B1%BB%E5%86%99%E6%B3%95/"/>
    <id>https://kitions.github.io/2020/07/22/React + antd-table 表格拖拽class类写法/</id>
    <published>2020-07-22T10:52:24.000Z</published>
    <updated>2022-10-17T03:30:46.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-antd-table-表格拖拽class类写法-Immutability-Helpers介绍"><a href="#React-antd-table-表格拖拽class类写法-Immutability-Helpers介绍" class="headerlink" title="React + antd-table 表格拖拽class类写法(Immutability Helpers介绍)"></a>React + antd-table 表格拖拽class类写法(Immutability Helpers介绍)</h1><h2 id="第一种方案：react-dnt"><a href="#第一种方案：react-dnt" class="headerlink" title="第一种方案：react-dnt"></a>第一种方案：react-dnt</h2><h3 id="主组件"><a href="#主组件" class="headerlink" title="主组件"></a>主组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DndProvider &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HTML5Backend &#125; <span class="keyword">from</span> <span class="string">'react-dnd-html5-backend'</span>;</span><br><span class="line"><span class="keyword">import</span> update <span class="keyword">from</span> <span class="string">'immutability-helper'</span>;</span><br><span class="line"></span><br><span class="line">moveRow = <span class="function">(<span class="params">dragIndex: number, hoverIndex: number</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">   <span class="keyword">const</span> dragRow = dataSource[dragIndex];</span><br><span class="line">   <span class="keyword">this</span>.setState(</span><br><span class="line">     <span class="comment">// 下面有对这个函数的说明</span></span><br><span class="line">     update(<span class="keyword">this</span>.state, &#123;</span><br><span class="line">       dataSource: &#123;</span><br><span class="line">         $splice: [[dragIndex, <span class="number">1</span>], [hoverIndex, <span class="number">0</span>, dragRow]],</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;), () =&gt; &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.dataSource)</span><br><span class="line">     &#125;</span><br><span class="line">   );</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">public render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  &lt;DndProvider backend=&#123;HTML5Backend&#125;&gt;</span><br><span class="line">    &lt;Table</span><br><span class="line">      columns=&#123;<span class="keyword">this</span>.renderColumns()&#125;</span><br><span class="line">      dataSource=&#123;dataSource&#125;</span><br><span class="line">      rowKey=<span class="string">"index"</span></span><br><span class="line">      bordered=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      pagination=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      locale=&#123;&#123; <span class="attr">emptyText</span>: <span class="string">"暂未选择"</span> &#125;&#125;</span><br><span class="line">      components=&#123;&#123;</span><br><span class="line">        body: &#123;</span><br><span class="line">          row: DragableBodyRow,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      onRow=&#123;(record, index) =&gt; (&#123;</span><br><span class="line">        index,</span><br><span class="line">        moveRow: <span class="keyword">this</span>.moveRow,</span><br><span class="line">      &#125;)&#125;</span><br><span class="line"></span><br><span class="line">      /&gt;</span><br><span class="line">  &lt;<span class="regexp">/DndProvider&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragSource, DropTarget &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dragingIndex = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BodyRow</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; isOver, connectDragSource, connectDropTarget, moveRow, ...restProps &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> style = &#123; ...restProps.style, <span class="attr">cursor</span>: <span class="string">'move'</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> className = restProps.className;</span><br><span class="line">        <span class="keyword">if</span> (isOver) &#123;</span><br><span class="line">            <span class="keyword">if</span> (restProps.index &gt; dragingIndex) &#123;</span><br><span class="line">                className += <span class="string">' drop-over-downward'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (restProps.index &lt; dragingIndex) &#123;</span><br><span class="line">                className += <span class="string">' drop-over-upward'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectDragSource(</span><br><span class="line">            connectDropTarget(<span class="xml"><span class="tag">&lt;<span class="name">tr</span> &#123;<span class="attr">...restProps</span>&#125; <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> /&gt;</span>),</span></span><br><span class="line"><span class="xml">        );</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const rowSource = &#123;</span></span><br><span class="line"><span class="xml">    beginDrag(props: any) &#123;</span></span><br><span class="line"><span class="xml">        dragingIndex = props.index;</span></span><br><span class="line"><span class="xml">        return &#123;</span></span><br><span class="line"><span class="xml">            index: props.index,</span></span><br><span class="line"><span class="xml">        &#125;;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const rowTarget = &#123;</span></span><br><span class="line"><span class="xml">    drop(props: any, monitor: any) &#123;</span></span><br><span class="line"><span class="xml">        const dragIndex = monitor.getItem().index;</span></span><br><span class="line"><span class="xml">        const hoverIndex = props.index;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        // Don't replace items with themselves</span></span><br><span class="line"><span class="xml">        if (dragIndex === hoverIndex) &#123;</span></span><br><span class="line"><span class="xml">            return;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        // Time to actually perform the action</span></span><br><span class="line"><span class="xml">        props.moveRow(dragIndex, hoverIndex);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        // Note: we're mutating the monitor item here!</span></span><br><span class="line"><span class="xml">        // Generally it's better to avoid mutations,</span></span><br><span class="line"><span class="xml">        // but it's good here for the sake of performance</span></span><br><span class="line"><span class="xml">        // to avoid expensive index searches.</span></span><br><span class="line"><span class="xml">        monitor.getItem().index = hoverIndex;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export const DragableBodyRow = DropTarget('row', rowTarget, (connect, monitor) =&gt; (&#123;</span></span><br><span class="line"><span class="xml">    connectDropTarget: connect.dropTarget(),</span></span><br><span class="line"><span class="xml">    isOver: monitor.isOver(),</span></span><br><span class="line"><span class="xml">&#125;))(</span></span><br><span class="line"><span class="xml">    DragSource('row', rowSource, connect =&gt; (&#123;</span></span><br><span class="line"><span class="xml">        connectDragSource: connect.dragSource(),</span></span><br><span class="line"><span class="xml">    &#125;))(BodyRow),</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">:global &#123;</span><br><span class="line">    .drop-over-downward td &#123;</span><br><span class="line">        border-bottom: <span class="number">2px</span> dashed <span class="number">#1890ff</span><span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.drop-over-upward</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="attribute">border-top</span>: <span class="number">2px</span> dashed <span class="number">#1890ff</span><span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种方案：react-sortable-hoc"><a href="#第二种方案：react-sortable-hoc" class="headerlink" title="第二种方案：react-sortable-hoc"></a>第二种方案：react-sortable-hoc</h2><p>未做组件抽离，凑合看</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; arrayMove, SortableContainer, SortableElement, SortableHandle &#125; <span class="keyword">from</span> <span class="string">'react-sortable-hoc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SortableItem = SortableElement(<span class="function">(<span class="params">props: any</span>) =&gt;</span></span><br><span class="line">    &lt;tr &#123;...props&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> SortableContainers = SortableContainer(<span class="function">(<span class="params">props: any</span>) =&gt;</span></span><br><span class="line">    &lt;tbody &#123;...props&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DragHandle = SortableHandle(<span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;span className=<span class="string">"sortIcon"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  onSortEnd = <span class="function">(<span class="params">params: any</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; oldIndex, newIndex &#125; = params;</span><br><span class="line">          <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (oldIndex !== newIndex) &#123;</span><br><span class="line">              <span class="keyword">const</span> newData = arrayMove(<span class="function">(<span class="params">[] <span class="keyword">as</span> ISettleItemUse[]</span>).<span class="params">concat</span>(<span class="params">dataSource</span>), <span class="params">oldIndex</span>, <span class="params">newIndex</span>).<span class="params">filter</span>(<span class="params">(el: any</span>) =&gt;</span> !!el);</span><br><span class="line">              <span class="keyword">this</span>.setState(&#123; <span class="attr">dataSource</span>: newData &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  DragableBodyRow = <span class="function">(<span class="params">params: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ...restProps &#125; = params</span><br><span class="line">    <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> index = dataSource.findIndex(<span class="function"><span class="params">x</span> =&gt;</span> x.index === restProps[<span class="string">'data-row-key'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SortableItem</span> <span class="attr">index</span>=<span class="string">&#123;index&#125;</span> &#123;<span class="attr">...restProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  render()&#123;</span></span><br><span class="line"><span class="xml">      const DraggableContainer = (props: any) =&gt; (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;&gt;</span></span></span><br><span class="line">                  &lt;SortableContainers</span><br><span class="line">                      useDragHandle</span><br><span class="line">                      helperClass="row-dragging"</span><br><span class="line">                      onSortEnd=&#123;this.onSortEnd&#125;</span><br><span class="line">                      &#123;...props&#125;</span><br><span class="line">                  /&gt;</span><br><span class="line">              &lt;/&gt;</span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line">     &lt;Table</span><br><span class="line">       columns=&#123;this.renderColumns()&#125;</span><br><span class="line">       dataSource=&#123;dataSource&#125;</span><br><span class="line">       rowKey="index"</span><br><span class="line">       bordered=&#123;false&#125;</span><br><span class="line">       pagination=&#123;false&#125;</span><br><span class="line">       locale=&#123;&#123; emptyText: "暂未选择" &#125;&#125;</span><br><span class="line">       components=&#123;&#123;</span><br><span class="line">          body: &#123;</span><br><span class="line">            wrapper: DraggableContainer,</span><br><span class="line">              row: this.DragableBodyRow,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">       /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;DragHandle /&gt;为拖动的图标</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 拖动</span><br><span class="line">  <span class="selector-class">.row-dragging</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fafafa</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"></span><br><span class="line">      th &#123;</span><br><span class="line">          color: $color-333;</span><br><span class="line">          <span class="selector-tag">background</span>: <span class="selector-id">#E9EAEA</span> !<span class="selector-tag">important</span>;</span><br><span class="line">          <span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</span><br><span class="line">          <span class="selector-tag">padding</span>: 8<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> !<span class="selector-tag">important</span>;</span><br><span class="line">          <span class="selector-tag">font-weight</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">td</span> &#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">          <span class="attribute">color</span>: $color-<span class="number">333</span>;</span><br><span class="line">          <span class="attribute">visibility</span>: hidden;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.drag-visible</span> &#123;</span><br><span class="line">          <span class="attribute">visibility</span>: visible;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该方案在使用后有点卡顿，时间急没找到 卡顿的原因。使用了第一种方案</p><p>可能是跟表格中的动态编辑的select、input有关，setState导致tbody重新渲染，造成卡顿，select和input也有许多联动，目前猜是这个原因，后期有时间，找到一下这个原因。</p><h1 id="immutability-helper"><a href="#immutability-helper" class="headerlink" title="immutability-helper"></a>immutability-helper</h1><p>yarn add immutability-helper</p><p>上文中update $splice</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialArray = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$splice: array of arrays&#125;</span></span><br><span class="line"><span class="comment"> * 同数组的 splice 方法</span></span><br><span class="line"><span class="comment"> *      数组 arrays 中包含的是所有需要执行的操作集合</span></span><br><span class="line"><span class="comment"> *      元素 array 中第一个元素代表下标，第二个元素代表需要删除的个数，第三个元素代表需要插入到 initialArray 中的的元素</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * PS:  1、可以在 arrays 中执行多个集合；</span></span><br><span class="line"><span class="comment"> *      2、两个操作不是同时执行，而是按顺序执行，后面的操作会在前面一个操作的执行结果上执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> spliceArray = update(initialArray, &#123; <span class="attr">$splice</span>: [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'spliceArray：'</span>, spliceArray);  <span class="comment">// =&gt; [ 'a', 'd', 'f', 'g', 'e' ]</span></span><br></pre></td></tr></table></figure><p>在不更改原始源的情况下改变数据副本。</p><blockquote><p>Immutable data encourages pure functions (data-in, data-out) and lends itself to much simpler application development and enabling techniques from functional programming such as lazy evaluation.</p></blockquote><p>API</p><p><code>$push</code> —— 数组;</p><p><code>$unshift</code> —— 数组;</p><p><code>$splice</code> —— 数组;</p><p><code>$set</code> —— 替换/覆盖/合并原数据;</p><p><code>$toggle</code> —— array of strings ，toggles a list of boolean fields from the target object；</p><p><code>$unset</code> —— remove the list of keys in array from the target object;</p><p><code>$merge</code> —— 合并对象;</p><p><code>$apply</code> ——  passes in the current value to the function and updates it with the new returned value；</p><p><code>$add</code> —— 新增;</p><p><code>$remove</code> —— 删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$splice</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">66</span>];</span><br><span class="line">  <span class="keyword">let</span> arr2 = update(arr,&#123;</span><br><span class="line">    $splice : [[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">66788</span>,<span class="number">99</span>],&#123;<span class="attr">a</span>:<span class="number">123</span>,<span class="attr">b</span>:<span class="string">"fff"</span>&#125;]], <span class="comment">// or [0,1,"从我开始是插入的内容",88,89,90,"后面可以很多，是数组、对象、字符串都行"]</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(arr2); </span><br><span class="line"></span><br><span class="line">  <span class="comment">//复杂一些的用法：</span></span><br><span class="line">  <span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">"immutable"</span>,</span><br><span class="line">    list :[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">90</span>,<span class="number">55</span>,<span class="number">44</span>,<span class="number">3</span>,<span class="number">22</span>,<span class="number">55</span>],<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> obj2 = update(obj,&#123;</span><br><span class="line">    list:&#123;</span><br><span class="line">      [<span class="number">2</span>]:<span class="function"><span class="params">value</span>=&gt;</span>update(value,&#123;</span><br><span class="line">        $splice:[[<span class="number">0</span>,<span class="number">2</span>]]  <span class="comment">// [90,55,44,3,22,55] =&gt; [44, 3, 22, 55]</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://www.jianshu.com/p/074bbb7a36b2" target="_blank" rel="noopener">immutability因React官方出镜之使用总结分享！</a></p><p><a href="https://ant.design/components/table-cn/" target="_blank" rel="noopener">https://ant.design/components/table-cn/</a></p><p><a href="https://react-dnd.github.io/react-dnd/docs/overview" target="_blank" rel="noopener">https://react-dnd.github.io/react-dnd/docs/overview</a></p>]]></content>
    
    <summary type="html">
    
      React + antd-table 表格拖拽class类写法，顺便看到了Immutability Helpers，觉得还不错，简单的看了看
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
</feed>
