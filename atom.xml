<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linkstack</title>
  
  <subtitle>the stack of it nerds</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kitions.github.io/"/>
  <updated>2018-03-19T10:14:49.044Z</updated>
  <id>https://kitions.github.io/</id>
  
  <author>
    <name>link</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Object.prototype.toString.call(value)</title>
    <link href="https://kitions.github.io/2018/03/19/Object.prototype.toString.call()/"/>
    <id>https://kitions.github.io/2018/03/19/Object.prototype.toString.call()/</id>
    <published>2018-03-19T09:53:50.735Z</published>
    <updated>2018-03-19T10:14:49.044Z</updated>
    
    <content type="html"><![CDATA[<p>使用Object.prototype上的原生toString()方法判断数据类型，使用方法如下：</p><p>Object.prototype.toString.call(value)</p><p>1.判断基本类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.toString.call(null);//”[object Null]”</span><br><span class="line">Object.prototype.toString.call(undefined);//”[object Undefined]”</span><br><span class="line">Object.prototype.toString.call(“abc”);//”[object String]”</span><br><span class="line">Object.prototype.toString.call(123);//”[object Number]”</span><br><span class="line">Object.prototype.toString.call(true);//”[object Boolean]”</span><br></pre></td></tr></table></figure><p>2.判断原生引用类型：</p><p>函数类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span> fn()&#123;<span class="built_in">console</span>.log(“test”);&#125;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(fn);<span class="comment">//”[object Function]”</span></span><br></pre></td></tr></table></figure><p>日期类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(date);<span class="comment">//”[object Date]”</span></span><br></pre></td></tr></table></figure><p>数组类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr);<span class="comment">//”[object Array]”</span></span><br></pre></td></tr></table></figure><p>正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[hbc]at/gi</span>;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(reg);<span class="comment">//”[object RegExp]”</span></span><br></pre></td></tr></table></figure><p>自定义类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Rose"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr); <span class="comment">//”[object Object]”</span></span><br></pre></td></tr></table></figure><p>很明显这种方法不能准确判断person是Person类的实例，而只能用instanceof 操作符来进行判断，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person);<span class="comment">//输出结果为true</span></span><br></pre></td></tr></table></figure><p>3.判断原生JSON对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isNativeJSON = <span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isNativeJSON);<span class="comment">//输出结果为”[object JSON]”说明JSON是原生的，否则不是；</span></span><br></pre></td></tr></table></figure><p>注意：Object.prototype.toString()本身是允许被修改的，而我们目前所讨论的关于Object.prototype.toString()这个方法的应用都是假设toString()方法未被修改为前提的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">"jerry"</span>));<span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">12</span>));<span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>));<span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>));<span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>));<span class="comment">//[object Null]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;<span class="attr">name</span>: <span class="string">"jerry"</span>&#125;));<span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;));<span class="comment">//[object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([]));<span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>));<span class="comment">//[object Date]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/\d/</span>));<span class="comment">//[object RegExp]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> Person));<span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><p>（无法区分自定义对象类型，自定义类型可以采用instanceof区分）</p><ol><li><p>JavaScript 里使用 typeof 来判断数据类型，只能区分基本类型，即 “number”，”string”，”undefined”，”boolean”，”object” 五种。</p><p>对于数组、函数、对象来说，其关系复杂，若使用 typeof 都会统一返回 为object，这样为后续处理带来不便。</p></li><li><p>关键函数方法</p></li></ol><p>​       js原生方法Object.prototype.toString.call();它可以给出数据的确切类型，相比typeof要精确。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataType</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//Object.prototype.toString.call(data).splice(8,-1)</span></span><br><span class="line">    <span class="keyword">var</span> getType=<span class="built_in">Object</span>.prototype.toString;  </span><br><span class="line">    <span class="keyword">var</span> myType=getType.call(data);<span class="comment">//调用call方法判断类型，结果返回形如[object Function]  </span></span><br><span class="line">    <span class="keyword">var</span> typeName=myType.slice(<span class="number">8</span>,<span class="number">-1</span>);<span class="comment">//[object Function],即取除了“[object ”的字符串。  </span></span><br><span class="line">    <span class="keyword">var</span> copyData=<span class="string">''</span>;<span class="comment">//复制后的数据  </span></span><br><span class="line">    <span class="built_in">console</span>.log(data+<span class="string">" is "</span>+typeName);  </span><br><span class="line">    <span class="keyword">return</span> copyData;  </span><br><span class="line">&#125;   </span><br><span class="line">getDataType(<span class="number">123</span>);  </span><br><span class="line">getDataType(<span class="string">"123"</span>);  </span><br><span class="line">getDataType(<span class="literal">null</span>);  </span><br><span class="line">getDataType(<span class="literal">undefined</span>);  </span><br><span class="line">getDataType(<span class="literal">false</span>);  </span><br><span class="line">getDataType([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]);  </span><br><span class="line">getDataType(&#123;<span class="string">"name"</span>:<span class="string">"wc"</span>&#125;);  </span><br><span class="line">getDataType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">23</span>);&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 123 is Number</span></span><br><span class="line"><span class="comment">// 123 is String</span></span><br><span class="line"><span class="comment">// null is Null</span></span><br><span class="line"><span class="comment">// undefined is Undefined</span></span><br><span class="line"><span class="comment">// false is Boolean</span></span><br><span class="line"><span class="comment">// 1,2,4 is Array</span></span><br><span class="line"><span class="comment">// [object Object] is Object</span></span><br><span class="line"><span class="comment">// function ()&#123;alert(23);&#125; is Function</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      js原生方法Object.prototype.toString.call();它可以给出数据的确切类型，相比typeof要精确
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="JS" scheme="https://kitions.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>rgba与opacity的区别</title>
    <link href="https://kitions.github.io/2018/03/16/rgba%E5%92%8Copacity/"/>
    <id>https://kitions.github.io/2018/03/16/rgba和opacity/</id>
    <published>2018-03-16T08:55:22.185Z</published>
    <updated>2018-03-16T08:59:12.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rgba与opacity的区别以及在遮罩层的运用"><a href="#rgba与opacity的区别以及在遮罩层的运用" class="headerlink" title="rgba与opacity的区别以及在遮罩层的运用"></a>rgba与opacity的区别以及在遮罩层的运用</h1><p>两者的区别</p><p>如标题所示，今天我们谈谈rgba和opacity有什么区别？</p><p>这次我又来做一次搬运工了，哈哈(●’◡’●)</p><p>RGBA是代表Red（红色） Green（绿色） Blue（蓝色）和 Alpha的色彩空间。</p><p>R：红色值。正整数 | 百分数</p><p>G ：绿色值。正整数 | 百分数</p><p>B ：蓝色值。正整数| 百分数</p><p>A ：透明度。取值0~1之间</p><p>此处的a代表透明度，我们再来看看opacity </p><p>opacity 属性设置元素的不透明级别。</p><p>value：规定不透明度。从 0.0 （完全透明）到 1.0（完全不透明）。</p><p>这么看来，两者都是透明度的设置，可是实际用起来却不一样。</p><ul><li><p><strong>经过实战，我们会发现设置了<code>opacity</code>的元素内的子元素们都被影响了，设置了opacity的元素它的子元素都<code>继承了他的设置</code>，透明度都是一样的。</strong></p></li><li><p>而rgba所设置的透明度，只会影响他自己本身，而其中的子元素不会被其所影响。</p></li></ul><p>如何应用</p><p>看到了rgba的特性，我们想到了什么？</p><p>没错！就是遮罩层！</p><p>就是那种弹框之后的透明深色背景，很炫的那种(●’◡’●)</p><p>直接上代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">html:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shade"</span>&gt;</span>   <span class="comment">&lt;!-- 这是遮罩层--&gt;</span></span><br><span class="line"></span><br><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pop_up"</span>&gt;</span>这是弹框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">css:</span><br><span class="line"></span><br><span class="line">　　.shade&#123;</span><br><span class="line"></span><br><span class="line">　　　　width: 100%;</span><br><span class="line"></span><br><span class="line">　　　　height: 100%;</span><br><span class="line"></span><br><span class="line"> 　　　  background: rgba(0,0,0,.8);   <span class="comment">&lt;!--黑色背景，透明度为0.8--&gt;</span></span><br><span class="line"></span><br><span class="line">　　　　position: fixed;      <span class="comment">&lt;!--固定全屏大小--&gt;</span></span><br><span class="line"></span><br><span class="line">　　　　top: 0;</span><br><span class="line"></span><br><span class="line">　　　　left: 0;</span><br><span class="line"></span><br><span class="line"> 　　　  z-index: 10;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      rgba与opacity的区别以及在遮罩层的运用,设置了opacity的元素内的子元素们都被影响了，设置了opacity的元素它的子元素都`继承了他的设置`，透明度都是一样的.而rgba所设置的透明度，只会影响他自己本身，而其中的子元素不会被其所影响。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="CSS" scheme="https://kitions.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>ES6之promise</title>
    <link href="https://kitions.github.io/2018/02/26/ES6%D6%AEpromise/"/>
    <id>https://kitions.github.io/2018/02/26/ES6֮promise/</id>
    <published>2018-02-26T09:41:25.000Z</published>
    <updated>2018-03-19T06:07:31.609Z</updated>
    
    <content type="html"><![CDATA[<p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  console.log(&apos;Promise&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function() &#123;</span><br><span class="line">  console.log(&apos;resolved.&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Hi!&apos;);</span><br><span class="line"></span><br><span class="line">// Promise</span><br><span class="line">// Hi!</span><br><span class="line">// resolved</span><br></pre></td></tr></table></figure><h6 id="promise代替回调函数的优缺点"><a href="#promise代替回调函数的优缺点" class="headerlink" title="promise代替回调函数的优缺点"></a>promise代替回调函数的优缺点</h6><p>优点：</p><ul><li>避免可读性极差的回调地狱</li><li>使用<code>.then()</code>编写的顺序异步代码，简单易读</li><li>使用<code>Promise.all()</code>编写并行异步代码变容易</li></ul><ul><li>使得原本的多层级的嵌套代码，变成了链式调用</li><li>让代码更清晰，减少嵌套数<br>​</li></ul><h6 id="promise执行顺序（settimeout、asnyc）"><a href="#promise执行顺序（settimeout、asnyc）" class="headerlink" title="promise执行顺序（settimeout、asnyc）"></a>promise执行顺序（settimeout、asnyc）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'a'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'c'</span>));</span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'d'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'e'</span>);</span><br><span class="line"><span class="comment">// 结果：b e c d a</span></span><br><span class="line"><span class="comment">// 任务队列优先级：promise.Trick()&gt;promise的回调&gt;setTimeout&gt;setImmediate</span></span><br><span class="line"><span class="comment">// 先执行同步代码，遇到异步代码就先加入队列，然后按入队的顺序执行异步代码，最后执行setTimeout队列的代码。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">await</span>  async2(); <span class="comment">//执行这一句后，await会让出当前线程，将后面的代码加到任务队列中，然后继续执行函数后面的同步代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">'c'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"d"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"e"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"g"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'h'</span>);</span><br><span class="line"><span class="comment">// 谁知道为啥结果不一样？？？？？？？？？？？？？  </span></span><br><span class="line"><span class="comment">// 直接在控制台中运行结果：      d a c f h g b e</span></span><br><span class="line"><span class="comment">// 在页面的script标签中运行结果：d a c f h b g e</span></span><br><span class="line"><span class="comment">// 我也不知道为什么不一样！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6之promise，promise对象是一个构造函数，用来生成Promise实例
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ES6" scheme="https://kitions.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6之reduce (可数组对象的去重)</title>
    <link href="https://kitions.github.io/2018/02/26/ES6%D6%AEreduce/"/>
    <id>https://kitions.github.io/2018/02/26/ES6֮reduce/</id>
    <published>2018-02-26T02:30:14.000Z</published>
    <updated>2018-02-26T02:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>除了for方法，研究数组的那几个迭代方法。使用下来，感觉确实妙用无穷，仿佛自己的逼格在无形中变得高大了一点点，重新一些总结文章。</p><p>这篇文章就是专门总结reduce方法的，这个方法大有可研究的地方，值得大家get它并去同手实践一下。</p><p>从最简单的例子开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prevres, cur, index);</span><br><span class="line">    <span class="keyword">return</span> prevres + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 1</span><br><span class="line">3 3 2</span><br><span class="line">6 4 3</span><br><span class="line">10 5 4</span><br><span class="line">[1, 2, 3, 4, 5] 15</span><br></pre></td></tr></table></figure><p>我们先重新回顾一下reduce中回调函数的参数，这个回调函数中有4个参数，意思分别为</p><p>prev: 第一项的值或者上一次叠加的结果值<br>cur: 当前会参与叠加的项<br>index： 当前值的索引<br>arr: 数组本身</p><p>首先我们要区分prev与cur这2个参数的区别，刚开始的时候我以为他们是一种类型的，可是后来我发现我理解错了。prev表示每次叠加之后的结果，类型可能与数组中的每一项不同，而cur则表示数组中参与叠加的当前项。在后边我们可以结合实例来理解这个地方。</p><p>其次我们看到，上例中其实值遍历了4次，数组有五项。数组中的第一项被当做了prev的初始值，而遍历从第二项开始。</p><p>我们看下面一个例子。</p><p>某同学的期末成绩如下表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'math'</span>,</span><br><span class="line">        score: <span class="number">88</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">95</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如何求该同学的总成绩？</p><p>很显然，利用for循环可以很简单得出结论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0;</span><br><span class="line">for(var i=0; i&lt;result.length; i++) &#123;</span><br><span class="line">    sum += result[i].score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们的宗旨就是抛弃for循环，因此使用reduce来搞定这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = result.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cur.score + prev;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这个时候，我给reduce参数添加了第二个参数。通过打印我发现设置了这个参数之后，reduce遍历便已经从第一项开始了。</p><p>这第二个参数就是设置prev的初始类型和初始值，比如为0，就表示prev的初始值为number类型，值为0，因此，reduce的最终结果也会是number类型。</p><p>因为第二个参数为累计结果的初始值，因此假设该同学因为违纪被处罚在总成绩总扣10分，只需要将初始值设置为-10即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var sum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    return cur.score + prev;</span><br><span class="line">&#125;, -10);</span><br></pre></td></tr></table></figure><p>我们来给这个例子增加一点难度。假如该同学的总成绩中，各科所占的比重不同，分别为50%，30%，20%，我们应该如何求出最终的权重结果呢？</p><p>解决方案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var dis = &#123;</span><br><span class="line">    math: 0.5,</span><br><span class="line">    chinese: 0.3,</span><br><span class="line">    english: 0.2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var sum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    console.log(prev);</span><br><span class="line">    return cur.score + prev;</span><br><span class="line">&#125;, -10);</span><br><span class="line"></span><br><span class="line">var qsum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    return prev + cur.score * dis[cur.subject]</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">console.log(sum, qsum);</span><br></pre></td></tr></table></figure><p>为了计算出权重之后的总值，我们在回调函数内部修改了数组当前项，是使他和权重比例关联袭来，并重新返回一个一样的回调函数，将新修改的当前项传入，就和之前的例子是一样的了。</p><p>有一道题，如何知道一串字符串中每个字母出现的次数？</p><p>我们可以运用reduce来解决这个问题。</p><p>我们在reduce的第二个参数里面初始了回调函数第一个参数的类型和值，将字符串转化为数组，那么迭代的结果将是一个对象，对象的每一项key值就是字符串的字母。运行感受一下吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrString = <span class="string">'abcdaabc'</span>;</span><br><span class="line"></span><br><span class="line">arrString.split(<span class="string">''</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res, cur</span>) </span>&#123;</span><br><span class="line">    res[cur] ? res[cur] ++ : res[cur] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>由于可以通过第二参数设置叠加结果的类型初始值，因此这个时候reduce就不再仅仅只是做一个加法了，我们可以灵活的运用它来进行各种各样的类型转换，比如将数组按照一定规则转换为对象，也可以将一种形式的数组转换为另一种形式的数组，大家可以动手去尝试一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2].reduce(function(res, cur) &#123; </span><br><span class="line">    res.push(cur + 1); </span><br><span class="line">    return res; </span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>这种特性使得reduce在实际开发中大有可为！但是需要注意点，在ie9一下的浏览器中，并不支持该方法 ！</p><h6 id="利用reduce可以对数组对象进行一个去重"><a href="#利用reduce可以对数组对象进行一个去重" class="headerlink" title="利用reduce可以对数组对象进行一个去重"></a>利用reduce可以对数组对象进行一个去重</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'math'</span>,</span><br><span class="line">        score: <span class="number">88</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">55</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">44</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">55</span></span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        subject: <span class="string">'chimney'</span>,</span><br><span class="line">        score: <span class="number">35</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个数组里包含的对象</span></span><br><span class="line"><span class="keyword">var</span> hash=&#123;&#125;,arr=[]</span><br><span class="line"><span class="keyword">var</span> arr = result.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res,cur</span>)</span>&#123;</span><br><span class="line">  hash[cur.subject] ? <span class="string">''</span> : hash[cur.subject] = <span class="literal">true</span> &amp;&amp; res.push(cur)  </span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reduce(function(res,cur)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;,abc)</span><br><span class="line"></span><br><span class="line">//我个人理解abc这儿是一个初始化数据，比如写0，就定义为数字类型，res的初始值或者初始类型</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6之reduce遍历数组，利用reduce可以进行对数组对象的去重
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ES6" scheme="https://kitions.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>angular上传图片</title>
    <link href="https://kitions.github.io/2017/08/18/E%CC%81I%CC%88%C2%B4%C2%ABI%CC%81%C2%BC%C3%86%C2%AC/"/>
    <id>https://kitions.github.io/2017/08/18/ÉÏ´«Í¼Æ¬/</id>
    <published>2017-08-18T05:47:03.000Z</published>
    <updated>2017-08-18T05:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h3 id="上传图片-客户端"><a href="#上传图片-客户端" class="headerlink" title="上传图片-客户端"></a>上传图片-客户端</h3><h4 id="ng-file-upload"><a href="#ng-file-upload" class="headerlink" title="ng-file-upload"></a>ng-file-upload</h4><ol><li><p>安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bower install ng-file-upload-shim --save(for non html5 suppport)</span><br><span class="line">bower install ng-file-upload --save</span><br></pre></td></tr></table></figure></li><li><p>导入js文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;ng-file-upload-shim(.min).js&quot;&gt;&lt;/script&gt; &lt;!-- for no html5 browsers support --&gt;</span><br><span class="line">&lt;script src=&quot;ng-file-upload(.min).js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>加入依赖模块</p></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;personalZhaoPin&apos;,[&apos;ngFileUpload&apos;]);</span><br></pre></td></tr></table></figure></code></pre><ol><li>前端页面</li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img ngf-src=&quot;data.file || data.defaultImage&quot; class=&quot;img-responsive&quot;/&gt;</span><br><span class="line">&lt;div class=&quot;button&quot; ngf-select=&quot;&quot; ngf-pattern=&quot;&apos;image/*&apos;&quot; ngf-multiple=&quot;false&quot; ng-model=&quot;data.file&quot;&gt;</span><br><span class="line">选择文件</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button ng-click=&quot;upload()&quot;&gt;upload&lt;/button&gt;</span><br></pre></td></tr></table></figure></code></pre><ol><li>控制器代码</li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$scope.data = &#123;</span><br><span class="line">    file: null</span><br><span class="line">&#125;;</span><br><span class="line">$scope.upload = function () &#123;</span><br><span class="line">    if (!$scope.data.file) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var url = $scope.params.url;  //params是model传的参数，图片上传接口的url</span><br><span class="line">    var data = angular.copy($scope.params.data || &#123;&#125;); // 接口需要的额外参数，比如指定所上传的图片属于哪个用户: &#123; UserId: 78 &#125;</span><br><span class="line">    data.file = $scope.data.file;</span><br><span class="line"></span><br><span class="line">    Upload.upload(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;).success(function (data) &#123;</span><br><span class="line">        $scope.hide(data);</span><br><span class="line">    &#125;).error(function () &#123;</span><br><span class="line">        logger.log(&apos;error&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre><h4 id="图片剪切"><a href="#图片剪切" class="headerlink" title="图片剪切"></a>图片剪切</h4><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install ngImgCrop</span><br></pre></td></tr></table></figure></li><li><p>导入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;ng-img-crop.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;  href=&quot;ng-img-crop.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>指令参数</p></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    &lt;img-crop</span><br><span class="line">    image=&quot;&#123;string&#125;&quot;                 //需要截取的图片变量名</span><br><span class="line">    result-image=&quot;&#123;string&#125;&quot;          //截取后所赋值的变量名</span><br><span class="line">   [change-on-fly=&quot;&#123;boolean&#125;&quot;]       //是否实时更新用户截取图像的预览,若为否,则会等用户停止动作后更新预览的图像</span><br><span class="line">   [area-type=&quot;&#123;circle|square&#125;&quot;]     //截取图像框的形状(圆形或正方形)</span><br><span class="line">   [area-min-size=&quot;&#123;number&#125;&quot;]        //截取图像框的最小面积</span><br><span class="line">   [result-image-size=&quot;&#123;number&#125;&quot;]    //截取后图像的大小</span><br><span class="line">   [result-image-format=&quot;&#123;string&#125;&quot;]  //截取后图像的格式</span><br><span class="line">   [result-image-quality=&quot;&#123;number&#125;&quot;] //截取后图像的质量</span><br><span class="line">   [on-change=&quot;&#123;expression&#125;&quot;]        </span><br><span class="line">   [on-load-begin=&quot;&#123;expression&quot;]</span><br><span class="line">   [on-load-done=&quot;&#123;expression&quot;]</span><br><span class="line">   [on-load-error=&quot;&#123;expression&quot;]</span><br><span class="line">&gt;&lt;/img-crop&gt;</span><br></pre></td></tr></table></figure></code></pre><h4 id="服务器端代码"><a href="#服务器端代码" class="headerlink" title="服务器端代码"></a>服务器端代码</h4><ol><li><p>安装formidable</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm intall formidable --save</span><br></pre></td></tr></table></figure></li><li><p>post 路由代码</p></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">var form = new formidable.IncomingForm();</span><br><span class="line">form.parse(req, function (err, fields, files) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        response.locals.error = err;</span><br><span class="line">        // response.render(&quot;uploads&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userDAO.getUserById(fields.email,function (rr) &#123;</span><br><span class="line">        if(rr[0].num==1)&#123;</span><br><span class="line">            res.send(&apos;用户已存在&apos;);</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(&quot;fields&gt;&gt;&gt;&quot;+JSON.stringify(fields));</span><br><span class="line">            // console.log(&quot;file------&quot;+util.inspect(files));</span><br><span class="line">            //     for(file in files)&#123;</span><br><span class="line">            //         console.log(&quot;file&gt;&gt;&gt;&gt;&gt;&quot;+file);</span><br><span class="line">            //     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var extName =&apos;&apos;;  //后缀名</span><br><span class="line">            console.log(&apos;files.in_file.type: &apos;+files.fileImage01.type);</span><br><span class="line">            switch (files.fileImage01.type) &#123;  //此处in_file  为页面端 &lt;input type=file name=in_file&gt;</span><br><span class="line">                case &apos;image/jpeg&apos;:</span><br><span class="line">                    extName = &apos;jpeg&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;image/jpg&apos;:</span><br><span class="line">                    extName = &apos;jpg&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;image/png&apos;:</span><br><span class="line">                    extName = &apos;png&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;image/x-png&apos;:</span><br><span class="line">                    extName = &apos;png&apos;;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(extName.length == 0)&#123;</span><br><span class="line">                res.send(&apos;只支持png和jpg格式图片&apos;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                form.uploadDir = &quot;../public&quot;+AVATAR_UPLOAD_FOLDER;     //设置上传目录</span><br><span class="line">                form.keepExtensions = true;     //保留后缀</span><br><span class="line">                form.maxFieldsSize = 2 * 1024;   //文件大小</span><br><span class="line">                console.log(&apos;here&apos;);</span><br><span class="line">                var avatarName = createUnique.creatName() + &apos;.&apos; + extName;</span><br><span class="line">                var newPath = form.uploadDir + avatarName;</span><br><span class="line">                fs.renameSync(files.fileImage01.path, newPath);  //重命名</span><br><span class="line">                var user=&#123;&#125;;</span><br><span class="line">                user.email=fields.email;</span><br><span class="line">                user.password=fields.password;</span><br><span class="line">                user.user_icon=avatarName;</span><br><span class="line">                userDAO.regist(user,function (_result) &#123;</span><br><span class="line">                    if(_result.affectedRows==1)&#123;</span><br><span class="line">                        res.send(&apos;uploads success&apos;);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        res.send(&apos;uploads fail&apos;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    console.log(&quot;add img ---end&quot;);</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      angular上传图片-客户端ng-file-upload
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="angular" scheme="https://kitions.github.io/tags/angular/"/>
    
      <category term="upload" scheme="https://kitions.github.io/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>article title</title>
    <link href="https://kitions.github.io/2017/08/18/article-title/"/>
    <id>https://kitions.github.io/2017/08/18/article-title/</id>
    <published>2017-08-18T05:05:26.000Z</published>
    <updated>2017-08-18T05:05:26.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kitions.github.io/2017/08/18/hello-world/"/>
    <id>https://kitions.github.io/2017/08/18/hello-world/</id>
    <published>2017-08-18T04:56:09.000Z</published>
    <updated>2017-08-18T04:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
