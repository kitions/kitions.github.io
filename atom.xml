<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linkstack</title>
  
  <subtitle>the stack of it nerds</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://link01.top/"/>
  <updated>2018-04-24T02:41:31.662Z</updated>
  <id>http://link01.top/</id>
  
  <author>
    <name>link</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>圣杯布局</title>
    <link href="http://link01.top/2018/04/24/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"/>
    <id>http://link01.top/2018/04/24/圣杯布局/</id>
    <published>2018-04-24T01:46:05.087Z</published>
    <updated>2018-04-24T02:41:31.662Z</updated>
    
    <content type="html"><![CDATA[<p>flex应用之一</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqni3jw5ymj31kw0wljt2.jpg" style="width:400px"></p><p>如果是小屏幕，躯干的三栏自动变为垂直叠加。隐藏aside</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqni5pg7hqj30rg13q0ur.jpg" style="width:400px"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>layout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 120px;</span></span><br><span class="line"><span class="undefined">        background: aliceblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 120px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:aqua</span> ;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-body</span>&#123;</span></span><br><span class="line"><span class="undefined">        min-height: 400px;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-content</span>&#123;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        background: blueviolet;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-nav</span>, <span class="selector-class">.HolyGrail-ads</span>&#123;</span></span><br><span class="line"><span class="undefined">        flex:  0 0 200px;</span></span><br><span class="line"><span class="undefined">        background: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-ads</span>&#123;</span></span><br><span class="line"><span class="undefined">        background: chartreuse;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-nav</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">order</span><span class="selector-pseudo">:-1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    @media(max-width: 768px)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.HolyGrail-body</span>&#123;</span></span><br><span class="line"><span class="undefined">            flex-direction: column;</span></span><br><span class="line"><span class="undefined">            flex: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.HolyGrail-nav</span>,<span class="selector-class">.HolyGrail-content</span>&#123;</span></span><br><span class="line"><span class="undefined">            flex: auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.HolyGrail-ads</span>&#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"HolyGrail-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"HolyGrail-content"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"HolyGrail-nav"</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"HolyGrail-ads"</span>&gt;</span>aside<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      圣杯布局（Holy Grail Layout）指的是一种最常见的网站布局。页面从上到下，分成三个部分：头部（header），躯干（body），尾部（footer）。其中躯干又水平分成三栏，从左到右为：导航、主栏、副栏。
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="HTML" scheme="http://link01.top/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JS深拷贝和浅拷贝</title>
    <link href="http://link01.top/2018/04/23/js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://link01.top/2018/04/23/js深拷贝浅拷贝/</id>
    <published>2018-04-23T06:46:59.916Z</published>
    <updated>2018-04-23T06:54:02.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><hr><ul><li>深拷贝：拷贝实例；浅拷贝：拷贝引用（原对象）。</li><li>JavaScript的变量类型：</li></ul><ol><li><p>基本类型：undefined、null、Boolean、number、string。变量直接按指存放在栈区内，可以直接访问，所以我们平时把字符串、数字的值赋值给新变量，相当于把值完全复制过去，新变量的改变不会影响旧变量。</p></li><li><p>引用类型：存放在堆区的对象，变量在栈区中保存的是一个指针地址。</p></li><li><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//456</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>深拷贝和浅拷贝图解<br><img src="http://img.blog.csdn.net/20171023222235180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV94aWxpeGlhb2d1aQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>浅拷贝实现方式</li></ul><ol><li><p>函数实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span> (<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!source || <span class="keyword">typeof</span> source != <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">'error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> targetObj = source.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> keys <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span>(source.hasOwnProperty(keys))&#123;</span><br><span class="line">            targetObj[keys] = source[keys];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetObj；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最简单的浅拷贝：变量复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure></li><li><p>通过es6新增的Object.assign来复制对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">'程序狗'</span>, <span class="attr">age</span>:&#123;<span class="attr">child</span>: <span class="number">12</span>&#125; &#125;</span><br><span class="line"><span class="keyword">let</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">copy.name = <span class="string">'单身狗'</span>;</span><br><span class="line">copy.age.child = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">// &#123; name: '程序狗', age:&#123;child: 24&#125; &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>jquey中的$.extend({}, obj); Array.prototype.slice()和Array.prototype.concat()都会返回一个数组或者对象的浅拷贝。（看起来像深拷贝）</p></li></ol><ul><li>深拷贝实现</li></ul><ol><li><p>函数实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cloneDeep</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> resultData = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> recurison(obj, resultData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recurison</span>(<span class="params">obj, data = &#123;&#125;</span>)</span>&#123;  <span class="comment">//递归子对象</span></span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] == <span class="string">'object'</span> &amp;&amp; <span class="built_in">Object</span>.keys(obj[key].length &gt; <span class="number">0</span> ))&#123;</span><br><span class="line">                data[key] = recurison(obj[key]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                data[key] = obj[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> o1 = &#123;</span><br><span class="line">        arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        obj: &#123;</span><br><span class="line">            key: <span class="string">'value'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> o3 = cloneDeep(o1);</span><br><span class="line">    <span class="built_in">console</span>.log(o3 === o1);<span class="comment">//false</span></span><br><span class="line">    <span class="built_in">console</span>.log(o3.obj === <span class="number">01.</span>obj);<span class="comment">//false</span></span><br><span class="line">    <span class="built_in">console</span>.log(o3.func === o1.func);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为浅复制只会将对象的各个属性进行依次复制，并不会进行递归复制，而 JavaScript 存储对象都是存地址的，所以浅复制会导致 o3.key 和 o1.key 指向同一块内存地址</span></span><br></pre></td></tr></table></figure><blockquote><p><em>需要注意的是，如果对象比较大，层级也比较多，深复制会带来性能上的问题。在遇到需要采用深复制的场景时，可以考虑有没有其他替代的方案。在实际的应用场景中，也是浅复制更为常用。</em></p></blockquote></li><li><p>JSON对象中的parse和stringify，JOSN对象中的stringify可以把一个js对象序列化为一个JSON字符串，parse可以把JSON字符串反序列化为一个js对象，通过这两个方法，也可以实现对象的深复制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cloneObj = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str, newobj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;</span><br><span class="line">        str = <span class="built_in">JSON</span>.stringify(obj), <span class="comment">//系列化对象</span></span><br><span class="line">        newobj = <span class="built_in">JSON</span>.parse(str); <span class="comment">//还原</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            newobj[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ? </span><br><span class="line">            cloneObj(obj[i]) : obj[i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newobj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      对于字符串类型，浅复制是对值的复制，对于对象来说，浅复制是对对象地址的复制，并没有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会改变，而深复制则是开辟新的栈，两个对象对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。
    
    </summary>
    
      <category term="js" scheme="http://link01.top/categories/js/"/>
    
    
      <category term="js" scheme="http://link01.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>八个明确（忽略）</title>
    <link href="http://link01.top/2018/04/19/8%E4%B8%AA%E6%98%8E%E7%A1%AE/"/>
    <id>http://link01.top/2018/04/19/8个明确/</id>
    <published>2018-04-19T07:19:56.406Z</published>
    <updated>2018-04-24T02:08:37.245Z</updated>
    
    <content type="html"><![CDATA[<ol><li>明确坚持和发展中国特色社会主义，总任务是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国。</li><li>明确新时代我国社会的主要矛盾是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾，必须坚持以人为中心的发展思想，不断促进人的全面发展，全体人民共同富裕。</li><li>明确中国特色社会主义事业<strong>总体布局</strong>是‘‘五位一体’’、<strong>战略布局</strong>是‘‘四个全面’’’，强调坚定道路自信、理论自信、制度自信、文化自信。(五位一体:经济建设、政治建设、文化建设、社会建设、生态文明建设；四个全面：全面建成小康社会、全面深化改革、全面依法治国、全面从严治党；四个自信：中国特色社会主义道路自信、理论自信、制度自信、文化自信)</li><li>明确<strong>全面深化改革总目标</strong>是完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化。</li><li>明确全面推进<strong>依法治国总目标</strong>是建设中国特色社会主义法制体系、建设社会主义法治国家。</li><li>明确党在<strong>新时代的强军目标</strong>是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设成为世界一流军队。</li><li>明确中国特色大国外交要推动构建新型国际关系，推动构建人类命运共同体。</li><li>明确中国特色社会主义最本质的特征是中国共产党领导，中国特色社会主义制度的最大优势是中国共产党领导，党是最高政治领导力量，提出新时代党的建设总要求，突出政治建设在党的建设中的重要地位</li></ol>]]></content>
    
    <summary type="html">
    
      无
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http请求协议</title>
    <link href="http://link01.top/2018/04/02/http%E8%AF%B7%E6%B1%82%E5%8D%8F%E8%AE%AE/"/>
    <id>http://link01.top/2018/04/02/http请求协议/</id>
    <published>2018-04-02T08:26:12.426Z</published>
    <updated>2018-04-23T05:23:56.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次完整的HTTP请求所经历的7个步骤"><a href="#一次完整的HTTP请求所经历的7个步骤" class="headerlink" title="一次完整的HTTP请求所经历的7个步骤"></a>一次完整的HTTP请求所经历的7个步骤</h1><p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤： </p><p><strong>1. 建立TCP连接</strong></p><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建 Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则， 只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80。</p><p><strong>2. Web浏览器向Web服务器发送请求命令</strong> </p><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。</p><p><strong>3. Web浏览器发送请求头信息</strong> </p><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。 </p><p><strong>4. Web服务器应答</strong> </p><p>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</p><p><strong>5. Web服务器发送应答头信息</strong> </p><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。 </p><p><strong>6. Web服务器向浏览器发送数据</strong> </p><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</p><p><strong>7. Web服务器关闭TCP连接</strong> </p><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：</p><p>Connection:keep-alive </p><p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p><h4 id="http协议-请求报文-响应报文"><a href="#http协议-请求报文-响应报文" class="headerlink" title="http协议 请求报文 响应报文"></a>http协议 请求报文 响应报文</h4><h5 id="http请求报文-由请求行、请求头部、空行、请求数据组成"><a href="#http请求报文-由请求行、请求头部、空行、请求数据组成" class="headerlink" title="http请求报文 由请求行、请求头部、空行、请求数据组成"></a><strong><em>http请求报文</em></strong> 由请求行、请求头部、空行、请求数据组成</h5><ol><li><p><strong>请求头</strong>：请求方法字段、URL字段、http协议版本字段组成，例如GET /index.html HTTP/1.1</p><p>http协议的请求方法有GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT</p></li><li><p><strong>请求头部</strong>：请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号分隔，典型的请求头</p><p>User-Agent：产生请求的浏览器类型。</p><p>Accept：客户端可识别的内容类型列表。</p><p>Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。</p></li><li><p><strong>空行</strong>：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器一下不再有请求头。</p></li><li><p><strong>请求数据</strong>：请求数据不在GET方法中使用，而是在POST方法中使用。POST方法适用于需要客户填写表单的场合。与请求数据相关的最常使用的请求头是Content-Type和Content-Length。</p></li></ol><p><strong><em>http响应报文</em></strong> 也是三个部分组成，分别是：状态行，消息报头，响应正文</p><p>HTTP-Version Status-Code Reason-Phrase CRLF</p><p>其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。</li></ul><p>常见状态代码、状态描述的说明如下。</p><ul><li>200 OK：客户端请求成功。</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</li><li>401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li><li>404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</li><li>500 Internal Server  Error：服务器发生不可预期的错误。</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP/1.1 200 OK（CRLF）。</li></ul>]]></content>
    
    <summary type="html">
    
      HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤
    
    </summary>
    
      <category term="http" scheme="http://link01.top/categories/http/"/>
    
    
  </entry>
  
  <entry>
    <title>VUE.JS 双向绑定实现原理Object.defineProperty()</title>
    <link href="http://link01.top/2018/03/28/vue.js%20%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    <id>http://link01.top/2018/03/28/vue.js 双向绑定原理/</id>
    <published>2018-03-28T03:16:09.142Z</published>
    <updated>2018-04-11T05:35:04.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VUE-JS-双向绑定实现原理Object-defineProperty"><a href="#VUE-JS-双向绑定实现原理Object-defineProperty" class="headerlink" title="VUE.JS 双向绑定实现原理Object.defineProperty()"></a>VUE.JS 双向绑定实现原理Object.defineProperty()</h2><p>复习<a href="#object">Object.defineProperty()</a></p><p>目前常见的几种 mvc （mvvm）框架 都实现了单向数据绑定。</p><p>双向数据绑定就是在单向绑定的基础上给可输入的元素添加change 事件，来动态的修改 model 和 view。</p><blockquote><p>发布者-订阅者模式 (backbone.js)</p><p>脏值检查 (angular.js)</p><p><strong>数据劫持</strong>（vue.js）</p></blockquote><p><strong>发布者-订阅者模式</strong>：一般通过 sub，pub 的方式实现数据和视图的监听绑定，更新数据方式通常做法是<code>vm.set(&#39;property&#39;,value)</code></p><p>这种方式现在显得 low，我们希望通过 <code>vm.property = value</code> 这种方式更新数据，同时更新视图，于是有了下面两种方式</p><p><strong>脏值检查</strong>：angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p><ul><li>DOM事件，譬如用户输入文本，点击按钮等。( ng-click )</li><li>XHR响应事件 ( $http )</li><li>浏览器Location变更事件 ( $location )</li><li>Timer事件( $timeout , $interval )</li><li>执行 $digest() 或 $apply()</li></ul><p><strong><em>数据劫持</em> :</strong> vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fpsk16q33oj30lt0g2myd.jpg" width="700px"></p><p>要实现 mvvm 的双向绑定，必须</p><ol><li>实现一个<strong>数据监听器</strong><code>Observer</code>，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个<strong>指令解析器</strong><code>Compile</code>，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个<code>Watcher</code>，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li>mvvm入口函数，整合以上三者</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="1-实现一个-Observer"><a href="#1-实现一个-Observer" class="headerlink" title="1. 实现一个 Observer"></a>1. 实现一个 Observer</h5><p>Observer是一个数据监听器，其实现核心方法就是前文所说的Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行Object.defineProperty( )处理。如下代码，实现了一个Observer。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 递归遍历所有子属性(这边不太明白)</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            val = newVal;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'属性'</span> + key + <span class="string">'已经被监听了，现在值为：“'</span> + newVal.toString() + <span class="string">'”'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        defineReactive(data, key, data[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> library = &#123;</span><br><span class="line">    book1: &#123;</span><br><span class="line">        name: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    book2: <span class="string">''</span></span><br><span class="line">&#125;;</span><br><span class="line">observe(library);</span><br><span class="line">library.book1.name = <span class="string">'vue权威指南'</span>; <span class="comment">// 属性name已经被监听了，现在值为：“vue权威指南”</span></span><br><span class="line">library.book2 = <span class="string">'没有此书籍'</span>;  <span class="comment">// 属性book2已经被监听了，现在值为：“没有此书籍”</span></span><br></pre></td></tr></table></figure><p>思路分析中，需要创建一个可以容纳订阅者的消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是list，将上面的Observer稍微改造下，植入消息订阅器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//link  这边不太明白</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 递归遍历所有子属性</span></span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep(); </span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (是否需要添加订阅者) &#123;</span><br><span class="line">                dep.addSub(watcher); <span class="comment">// 在这里添加一个订阅者</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (val === newVal) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            val = newVal;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'属性'</span> + key + <span class="string">'已经被监听了，现在值为：“'</span> + newVal.toString() + <span class="string">'”'</span>);</span><br><span class="line">            dep.notify(); <span class="comment">// 如果数据变化，通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从代码上看，我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。</p><blockquote><p>之后有点不明白</p></blockquote><p>学习链接  <a href="https://www.cnblogs.com/libin-1/p/6893712.html" target="_blank" rel="noopener"><strong>vue数据双向绑定原理</strong></a></p><p><a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener"><a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener">剖析Vue原理&amp;实现双向绑定MVVM</a></a></p><h5 id="2-实现-watcher"><a href="#2-实现-watcher" class="headerlink" title="2.实现 watcher"></a>2.实现 watcher</h5><blockquote><p>补充：<a name="object">Object.defineProperty()</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据描述</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"key"</span>,&#123; </span><br><span class="line">    enumerable:<span class="literal">false</span>,  <span class="comment">// 可否 delete  目标属性是否可以再次设置特性   默认 false</span></span><br><span class="line">    configurable:<span class="literal">false</span>, <span class="comment">//可否枚举 使用for...in或Object.keys()                      默认 false</span></span><br><span class="line">    writable:<span class="literal">false</span>, <span class="comment">// 是否被赋值运算符改变(重写)  默认 false</span></span><br><span class="line">    value:<span class="string">"static"</span>  <span class="comment">//值 默认 undefined</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//obj：必需。目标对象 </span></span><br><span class="line"><span class="comment">//prop：必需。需定义或修改的属性的名字(key)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存取器描述</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; | <span class="literal">undefined</span>,</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;&#125; | <span class="literal">undefined</span></span><br><span class="line">    configurable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">    enumerable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注意：当使用了getter或setter方法，不允许使用writable和value这两个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：get或set不是必须成对出现，任写其一就可以。如果不设置方法，则get和set的默认值为undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//configurable和enumerable同上面的用法。</span></span><br></pre></td></tr></table></figure><p>在ie8下只能在DOM对象上使用，尝试在原生的对象使用 Object.defineProperty()会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> id=<span class="string">"a"</span> h-model=<span class="string">"text"</span>&gt;</span><br><span class="line">        &#123;&#123;text&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    //和dom有关  数据绑定初始化</span></span><br><span class="line"><span class="string">    function convertNode(node, vm) &#123;</span></span><br><span class="line"><span class="string">        var fragment = document.createDocumentFragment(),child;</span></span><br><span class="line"><span class="string">        while(child = node.firstChild)&#123;</span></span><br><span class="line"><span class="string">            compile(child,vm)</span></span><br><span class="line"><span class="string">            fragment.appendChild(child)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return fragment</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function compile(node,vm) &#123;</span></span><br><span class="line"><span class="string">        var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/;</span></span><br><span class="line"><span class="string">        if(node.nodeType===1)&#123; //节点类型为元素节点</span></span><br><span class="line"><span class="string">            var attr = node.attributes; //对所有属性进行解析</span></span><br><span class="line"><span class="string">            for(var i = 0;i&lt;attr.length;i++)&#123;</span></span><br><span class="line"><span class="string">                if(attr[i].nodeName == 'h-model')&#123;  //匹配h-model</span></span><br><span class="line"><span class="string">                    //将元素与数据绑定</span></span><br><span class="line"><span class="string">                    var bindName = attr[i].nodeValue;</span></span><br><span class="line"><span class="string">                    node.value = vm.data[bindName]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    //为输入框添加事件监听触发</span></span><br><span class="line"><span class="string">                    node.addEventListener('input',function (e) &#123;</span></span><br><span class="line"><span class="string">                        vm.data[bindName] = e.target.value;</span></span><br><span class="line"><span class="string">                        node.value = vm.data[bindName];</span></span><br><span class="line"><span class="string">                    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    node.removeAttribute('h-model');</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if(node.nodeType===3)&#123;</span></span><br><span class="line"><span class="string">            if(reg.test(node.nodeValue))&#123;</span></span><br><span class="line"><span class="string">                var bindName = RegExp.$1.trim()</span></span><br><span class="line"><span class="string">                // console.log(RegExp.$1)</span></span><br><span class="line"><span class="string">                // node.nodeValue = vm.data[bindName]</span></span><br><span class="line"><span class="string">                new Watcher(vm,node,bindName)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //获取数据相关 数据响应</span></span><br><span class="line"><span class="string">    function Observer(data, vm) &#123;</span></span><br><span class="line"><span class="string">        // console.log(data)</span></span><br><span class="line"><span class="string">        if (!data || typeof data !== 'object') &#123;</span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        Object.keys(data).forEach(function(key) &#123;</span></span><br><span class="line"><span class="string">            defineReactive(data, key, data[key]);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function defineReactive(data, key, val) &#123;</span></span><br><span class="line"><span class="string">        Observer(val); // 递归遍历所有子属性</span></span><br><span class="line"><span class="string">        var dep = new Dep();</span></span><br><span class="line"><span class="string">        Object.defineProperty(data, key, &#123;</span></span><br><span class="line"><span class="string">            enumerable: true,</span></span><br><span class="line"><span class="string">            configurable: true,</span></span><br><span class="line"><span class="string">            get: function() &#123;</span></span><br><span class="line"><span class="string">                // console.log(Dep.target)</span></span><br><span class="line"><span class="string">                if(Dep.target)&#123;  //Dep.target存在的话，将目标元素添加到当前data属性的观察者列表中</span></span><br><span class="line"><span class="string">                    dep.addSub(Dep.target);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                return val;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            set: function(newVal) &#123;</span></span><br><span class="line"><span class="string">                if(val === newVal) return;</span></span><br><span class="line"><span class="string">                val = newVal;</span></span><br><span class="line"><span class="string">                dep.notify(); // 如果数据变化，通知所有订阅者</span></span><br><span class="line"><span class="string">                // console.log('属性' + key + '已经被监听了，现在值为：“' + newVal.toString() + '”');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function Dep() &#123;</span></span><br><span class="line"><span class="string">        this.subs=[];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Dep.prototype = &#123;</span></span><br><span class="line"><span class="string">        addSub:function (sub) &#123;  //被观察者列表的添加动作</span></span><br><span class="line"><span class="string">            this.subs.push(sub);</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        notify: function () &#123;  //对观察者列表的所有观察者触发更新</span></span><br><span class="line"><span class="string">            this.subs.forEach(function (value) &#123;</span></span><br><span class="line"><span class="string">                console.log(value)</span></span><br><span class="line"><span class="string">                value.update();</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function Watcher(vm, node, bindname) &#123;</span></span><br><span class="line"><span class="string">        //将全局dep.target设置为当前页面元素node</span></span><br><span class="line"><span class="string">        Dep.target = this;</span></span><br><span class="line"><span class="string">        //完成watcher 的初始化</span></span><br><span class="line"><span class="string">        this.name = bindname;</span></span><br><span class="line"><span class="string">        this.node = node;</span></span><br><span class="line"><span class="string">        this.vm = vm;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        this.update(); //初次绑定时进行更新</span></span><br><span class="line"><span class="string">        Dep.target = null;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Watcher.prototype = &#123;</span></span><br><span class="line"><span class="string">        get:function () &#123;</span></span><br><span class="line"><span class="string">            this.value = this.vm.data[this.name]</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        update: function () &#123;</span></span><br><span class="line"><span class="string">            this.get();</span></span><br><span class="line"><span class="string">            this.node.nodeValue = this.value;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function Vue(options)&#123;</span></span><br><span class="line"><span class="string">        this.data = options.data</span></span><br><span class="line"><span class="string">        Observer(this.data,this)</span></span><br><span class="line"><span class="string">        var id = options.el;</span></span><br><span class="line"><span class="string">        var dom = convertNode(document.getElementById(id),this)</span></span><br><span class="line"><span class="string">        document.getElementById(id).appendChild(dom)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:'app',</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            text:'Hello MVVM',</span></span><br><span class="line"><span class="string">            aaa:&#123;</span></span><br><span class="line"><span class="string">                text:"</span>hello<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。创建 watcher 和 Compile 还不太明白，仍需要多加学习。
    
    </summary>
    
      <category term="vue.js" scheme="http://link01.top/categories/vue-js/"/>
    
    
      <category term="vue.js" scheme="http://link01.top/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>遮罩层的实现</title>
    <link href="http://link01.top/2018/03/22/%E9%81%AE%E7%BD%A9%E5%B1%82/"/>
    <id>http://link01.top/2018/03/22/遮罩层/</id>
    <published>2018-03-22T11:56:33.710Z</published>
    <updated>2018-03-28T07:35:00.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="遮罩层"><a href="#遮罩层" class="headerlink" title="遮罩层"></a>遮罩层</h3><p>遮罩层的实现主要是利用 css。  元素相同的 z-index，遮罩层外面的 z-index 小于里面的</p><p><img src="/var/folders/sy/g8fblh5932b77pv_vcx7t8wh0000gn/T/abnerworks.Typora/image-201803221954522.png" alt="image-201803221954522"></p><p><img src="/var/folders/sy/g8fblh5932b77pv_vcx7t8wh0000gn/T/abnerworks.Typora/image-201803221956209.png" alt="image-201803221956209"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shade</span>&#123;</span><br><span class="line">  position：fixed；</span><br><span class="line">  <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span><br><span class="line">  <span class="selector-tag">top</span><span class="selector-pseudo">:0px</span>;</span><br><span class="line">  <span class="selector-tag">left</span><span class="selector-pseudo">:0px</span>;</span><br><span class="line">  background-color:rgba(0,0,0,0.5); // 背景的透明度</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      遮罩层的实现主要是利用 css。  元素相同的 z-index，遮罩层外面的 z-index 小于里面的
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Object.prototype.toString.call(value)</title>
    <link href="http://link01.top/2018/03/19/Object.prototype.toString.call()/"/>
    <id>http://link01.top/2018/03/19/Object.prototype.toString.call()/</id>
    <published>2018-03-19T09:53:50.735Z</published>
    <updated>2018-03-19T10:14:49.044Z</updated>
    
    <content type="html"><![CDATA[<p>使用Object.prototype上的原生toString()方法判断数据类型，使用方法如下：</p><p>Object.prototype.toString.call(value)</p><p>1.判断基本类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.toString.call(null);//”[object Null]”</span><br><span class="line">Object.prototype.toString.call(undefined);//”[object Undefined]”</span><br><span class="line">Object.prototype.toString.call(“abc”);//”[object String]”</span><br><span class="line">Object.prototype.toString.call(123);//”[object Number]”</span><br><span class="line">Object.prototype.toString.call(true);//”[object Boolean]”</span><br></pre></td></tr></table></figure><p>2.判断原生引用类型：</p><p>函数类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span> fn()&#123;<span class="built_in">console</span>.log(“test”);&#125;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(fn);<span class="comment">//”[object Function]”</span></span><br></pre></td></tr></table></figure><p>日期类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(date);<span class="comment">//”[object Date]”</span></span><br></pre></td></tr></table></figure><p>数组类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr);<span class="comment">//”[object Array]”</span></span><br></pre></td></tr></table></figure><p>正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[hbc]at/gi</span>;</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(reg);<span class="comment">//”[object RegExp]”</span></span><br></pre></td></tr></table></figure><p>自定义类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Rose"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr); <span class="comment">//”[object Object]”</span></span><br></pre></td></tr></table></figure><p>很明显这种方法不能准确判断person是Person类的实例，而只能用instanceof 操作符来进行判断，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person);<span class="comment">//输出结果为true</span></span><br></pre></td></tr></table></figure><p>3.判断原生JSON对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isNativeJSON = <span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isNativeJSON);<span class="comment">//输出结果为”[object JSON]”说明JSON是原生的，否则不是；</span></span><br></pre></td></tr></table></figure><p>注意：Object.prototype.toString()本身是允许被修改的，而我们目前所讨论的关于Object.prototype.toString()这个方法的应用都是假设toString()方法未被修改为前提的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">"jerry"</span>));<span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">12</span>));<span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>));<span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>));<span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>));<span class="comment">//[object Null]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;<span class="attr">name</span>: <span class="string">"jerry"</span>&#125;));<span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;));<span class="comment">//[object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([]));<span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>));<span class="comment">//[object Date]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/\d/</span>));<span class="comment">//[object RegExp]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> Person));<span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><p>（无法区分自定义对象类型，自定义类型可以采用instanceof区分）</p><ol><li><p>JavaScript 里使用 typeof 来判断数据类型，只能区分基本类型，即 “number”，”string”，”undefined”，”boolean”，”object” 五种。</p><p>对于数组、函数、对象来说，其关系复杂，若使用 typeof 都会统一返回 为object，这样为后续处理带来不便。</p></li><li><p>关键函数方法</p></li></ol><p>​       js原生方法Object.prototype.toString.call();它可以给出数据的确切类型，相比typeof要精确。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataType</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//Object.prototype.toString.call(data).splice(8,-1)</span></span><br><span class="line">    <span class="keyword">var</span> getType=<span class="built_in">Object</span>.prototype.toString;  </span><br><span class="line">    <span class="keyword">var</span> myType=getType.call(data);<span class="comment">//调用call方法判断类型，结果返回形如[object Function]  </span></span><br><span class="line">    <span class="keyword">var</span> typeName=myType.slice(<span class="number">8</span>,<span class="number">-1</span>);<span class="comment">//[object Function],即取除了“[object ”的字符串。  </span></span><br><span class="line">    <span class="keyword">var</span> copyData=<span class="string">''</span>;<span class="comment">//复制后的数据  </span></span><br><span class="line">    <span class="built_in">console</span>.log(data+<span class="string">" is "</span>+typeName);  </span><br><span class="line">    <span class="keyword">return</span> copyData;  </span><br><span class="line">&#125;   </span><br><span class="line">getDataType(<span class="number">123</span>);  </span><br><span class="line">getDataType(<span class="string">"123"</span>);  </span><br><span class="line">getDataType(<span class="literal">null</span>);  </span><br><span class="line">getDataType(<span class="literal">undefined</span>);  </span><br><span class="line">getDataType(<span class="literal">false</span>);  </span><br><span class="line">getDataType([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]);  </span><br><span class="line">getDataType(&#123;<span class="string">"name"</span>:<span class="string">"wc"</span>&#125;);  </span><br><span class="line">getDataType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">23</span>);&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 123 is Number</span></span><br><span class="line"><span class="comment">// 123 is String</span></span><br><span class="line"><span class="comment">// null is Null</span></span><br><span class="line"><span class="comment">// undefined is Undefined</span></span><br><span class="line"><span class="comment">// false is Boolean</span></span><br><span class="line"><span class="comment">// 1,2,4 is Array</span></span><br><span class="line"><span class="comment">// [object Object] is Object</span></span><br><span class="line"><span class="comment">// function ()&#123;alert(23);&#125; is Function</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      js原生方法Object.prototype.toString.call();它可以给出数据的确切类型，相比typeof要精确
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="JS" scheme="http://link01.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>rgba与opacity的区别</title>
    <link href="http://link01.top/2018/03/16/rgba%E5%92%8Copacity/"/>
    <id>http://link01.top/2018/03/16/rgba和opacity/</id>
    <published>2018-03-16T08:55:22.185Z</published>
    <updated>2018-03-16T08:59:12.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rgba与opacity的区别以及在遮罩层的运用"><a href="#rgba与opacity的区别以及在遮罩层的运用" class="headerlink" title="rgba与opacity的区别以及在遮罩层的运用"></a>rgba与opacity的区别以及在遮罩层的运用</h1><p>两者的区别</p><p>如标题所示，今天我们谈谈rgba和opacity有什么区别？</p><p>这次我又来做一次搬运工了，哈哈(●’◡’●)</p><p>RGBA是代表Red（红色） Green（绿色） Blue（蓝色）和 Alpha的色彩空间。</p><p>R：红色值。正整数 | 百分数</p><p>G ：绿色值。正整数 | 百分数</p><p>B ：蓝色值。正整数| 百分数</p><p>A ：透明度。取值0~1之间</p><p>此处的a代表透明度，我们再来看看opacity </p><p>opacity 属性设置元素的不透明级别。</p><p>value：规定不透明度。从 0.0 （完全透明）到 1.0（完全不透明）。</p><p>这么看来，两者都是透明度的设置，可是实际用起来却不一样。</p><ul><li><p><strong>经过实战，我们会发现设置了<code>opacity</code>的元素内的子元素们都被影响了，设置了opacity的元素它的子元素都<code>继承了他的设置</code>，透明度都是一样的。</strong></p></li><li><p>而rgba所设置的透明度，只会影响他自己本身，而其中的子元素不会被其所影响。</p></li></ul><p>如何应用</p><p>看到了rgba的特性，我们想到了什么？</p><p>没错！就是遮罩层！</p><p>就是那种弹框之后的透明深色背景，很炫的那种(●’◡’●)</p><p>直接上代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">html:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shade"</span>&gt;</span>   <span class="comment">&lt;!-- 这是遮罩层--&gt;</span></span><br><span class="line"></span><br><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pop_up"</span>&gt;</span>这是弹框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">css:</span><br><span class="line"></span><br><span class="line">　　.shade&#123;</span><br><span class="line"></span><br><span class="line">　　　　width: 100%;</span><br><span class="line"></span><br><span class="line">　　　　height: 100%;</span><br><span class="line"></span><br><span class="line"> 　　　  background: rgba(0,0,0,.8);   <span class="comment">&lt;!--黑色背景，透明度为0.8--&gt;</span></span><br><span class="line"></span><br><span class="line">　　　　position: fixed;      <span class="comment">&lt;!--固定全屏大小--&gt;</span></span><br><span class="line"></span><br><span class="line">　　　　top: 0;</span><br><span class="line"></span><br><span class="line">　　　　left: 0;</span><br><span class="line"></span><br><span class="line"> 　　　  z-index: 10;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      rgba与opacity的区别以及在遮罩层的运用,设置了opacity的元素内的子元素们都被影响了，设置了opacity的元素它的子元素都`继承了他的设置`，透明度都是一样的.而rgba所设置的透明度，只会影响他自己本身，而其中的子元素不会被其所影响。
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="CSS" scheme="http://link01.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>ES6之promise</title>
    <link href="http://link01.top/2018/02/26/ES6%D6%AEpromise/"/>
    <id>http://link01.top/2018/02/26/ES6֮promise/</id>
    <published>2018-02-26T09:41:25.000Z</published>
    <updated>2018-03-19T06:07:31.609Z</updated>
    
    <content type="html"><![CDATA[<p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  console.log(&apos;Promise&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function() &#123;</span><br><span class="line">  console.log(&apos;resolved.&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Hi!&apos;);</span><br><span class="line"></span><br><span class="line">// Promise</span><br><span class="line">// Hi!</span><br><span class="line">// resolved</span><br></pre></td></tr></table></figure><h6 id="promise代替回调函数的优缺点"><a href="#promise代替回调函数的优缺点" class="headerlink" title="promise代替回调函数的优缺点"></a>promise代替回调函数的优缺点</h6><p>优点：</p><ul><li>避免可读性极差的回调地狱</li><li>使用<code>.then()</code>编写的顺序异步代码，简单易读</li><li>使用<code>Promise.all()</code>编写并行异步代码变容易</li></ul><ul><li>使得原本的多层级的嵌套代码，变成了链式调用</li><li>让代码更清晰，减少嵌套数<br>​</li></ul><h6 id="promise执行顺序（settimeout、asnyc）"><a href="#promise执行顺序（settimeout、asnyc）" class="headerlink" title="promise执行顺序（settimeout、asnyc）"></a>promise执行顺序（settimeout、asnyc）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'a'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'c'</span>));</span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'d'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'e'</span>);</span><br><span class="line"><span class="comment">// 结果：b e c d a</span></span><br><span class="line"><span class="comment">// 任务队列优先级：promise.Trick()&gt;promise的回调&gt;setTimeout&gt;setImmediate</span></span><br><span class="line"><span class="comment">// 先执行同步代码，遇到异步代码就先加入队列，然后按入队的顺序执行异步代码，最后执行setTimeout队列的代码。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">await</span>  async2(); <span class="comment">//执行这一句后，await会让出当前线程，将后面的代码加到任务队列中，然后继续执行函数后面的同步代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">'c'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"d"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"e"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"g"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'h'</span>);</span><br><span class="line"><span class="comment">// 谁知道为啥结果不一样？？？？？？？？？？？？？  </span></span><br><span class="line"><span class="comment">// 直接在控制台中运行结果：      d a c f h g b e</span></span><br><span class="line"><span class="comment">// 在页面的script标签中运行结果：d a c f h b g e</span></span><br><span class="line"><span class="comment">// 我也不知道为什么不一样！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6之promise，promise对象是一个构造函数，用来生成Promise实例
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ES6" scheme="http://link01.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6之reduce (可数组对象的去重)</title>
    <link href="http://link01.top/2018/02/26/ES6%D6%AEreduce/"/>
    <id>http://link01.top/2018/02/26/ES6֮reduce/</id>
    <published>2018-02-26T02:30:14.000Z</published>
    <updated>2018-02-26T02:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>除了for方法，研究数组的那几个迭代方法。使用下来，感觉确实妙用无穷，仿佛自己的逼格在无形中变得高大了一点点，重新一些总结文章。</p><p>这篇文章就是专门总结reduce方法的，这个方法大有可研究的地方，值得大家get它并去同手实践一下。</p><p>从最简单的例子开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prevres, cur, index);</span><br><span class="line">    <span class="keyword">return</span> prevres + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 1</span><br><span class="line">3 3 2</span><br><span class="line">6 4 3</span><br><span class="line">10 5 4</span><br><span class="line">[1, 2, 3, 4, 5] 15</span><br></pre></td></tr></table></figure><p>我们先重新回顾一下reduce中回调函数的参数，这个回调函数中有4个参数，意思分别为</p><p>prev: 第一项的值或者上一次叠加的结果值<br>cur: 当前会参与叠加的项<br>index： 当前值的索引<br>arr: 数组本身</p><p>首先我们要区分prev与cur这2个参数的区别，刚开始的时候我以为他们是一种类型的，可是后来我发现我理解错了。prev表示每次叠加之后的结果，类型可能与数组中的每一项不同，而cur则表示数组中参与叠加的当前项。在后边我们可以结合实例来理解这个地方。</p><p>其次我们看到，上例中其实值遍历了4次，数组有五项。数组中的第一项被当做了prev的初始值，而遍历从第二项开始。</p><p>我们看下面一个例子。</p><p>某同学的期末成绩如下表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'math'</span>,</span><br><span class="line">        score: <span class="number">88</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">95</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如何求该同学的总成绩？</p><p>很显然，利用for循环可以很简单得出结论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0;</span><br><span class="line">for(var i=0; i&lt;result.length; i++) &#123;</span><br><span class="line">    sum += result[i].score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们的宗旨就是抛弃for循环，因此使用reduce来搞定这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = result.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cur.score + prev;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这个时候，我给reduce参数添加了第二个参数。通过打印我发现设置了这个参数之后，reduce遍历便已经从第一项开始了。</p><p>这第二个参数就是设置prev的初始类型和初始值，比如为0，就表示prev的初始值为number类型，值为0，因此，reduce的最终结果也会是number类型。</p><p>因为第二个参数为累计结果的初始值，因此假设该同学因为违纪被处罚在总成绩总扣10分，只需要将初始值设置为-10即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var sum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    return cur.score + prev;</span><br><span class="line">&#125;, -10);</span><br></pre></td></tr></table></figure><p>我们来给这个例子增加一点难度。假如该同学的总成绩中，各科所占的比重不同，分别为50%，30%，20%，我们应该如何求出最终的权重结果呢？</p><p>解决方案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var dis = &#123;</span><br><span class="line">    math: 0.5,</span><br><span class="line">    chinese: 0.3,</span><br><span class="line">    english: 0.2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var sum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    console.log(prev);</span><br><span class="line">    return cur.score + prev;</span><br><span class="line">&#125;, -10);</span><br><span class="line"></span><br><span class="line">var qsum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    return prev + cur.score * dis[cur.subject]</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">console.log(sum, qsum);</span><br></pre></td></tr></table></figure><p>为了计算出权重之后的总值，我们在回调函数内部修改了数组当前项，是使他和权重比例关联袭来，并重新返回一个一样的回调函数，将新修改的当前项传入，就和之前的例子是一样的了。</p><p>有一道题，如何知道一串字符串中每个字母出现的次数？</p><p>我们可以运用reduce来解决这个问题。</p><p>我们在reduce的第二个参数里面初始了回调函数第一个参数的类型和值，将字符串转化为数组，那么迭代的结果将是一个对象，对象的每一项key值就是字符串的字母。运行感受一下吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrString = <span class="string">'abcdaabc'</span>;</span><br><span class="line"></span><br><span class="line">arrString.split(<span class="string">''</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res, cur</span>) </span>&#123;</span><br><span class="line">    res[cur] ? res[cur] ++ : res[cur] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>由于可以通过第二参数设置叠加结果的类型初始值，因此这个时候reduce就不再仅仅只是做一个加法了，我们可以灵活的运用它来进行各种各样的类型转换，比如将数组按照一定规则转换为对象，也可以将一种形式的数组转换为另一种形式的数组，大家可以动手去尝试一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2].reduce(function(res, cur) &#123; </span><br><span class="line">    res.push(cur + 1); </span><br><span class="line">    return res; </span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>这种特性使得reduce在实际开发中大有可为！但是需要注意点，在ie9一下的浏览器中，并不支持该方法 ！</p><h6 id="利用reduce可以对数组对象进行一个去重"><a href="#利用reduce可以对数组对象进行一个去重" class="headerlink" title="利用reduce可以对数组对象进行一个去重"></a>利用reduce可以对数组对象进行一个去重</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'math'</span>,</span><br><span class="line">        score: <span class="number">88</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">55</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">44</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">55</span></span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        subject: <span class="string">'chimney'</span>,</span><br><span class="line">        score: <span class="number">35</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个数组里包含的对象</span></span><br><span class="line"><span class="keyword">var</span> hash=&#123;&#125;,arr=[]</span><br><span class="line"><span class="keyword">var</span> arr = result.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res,cur</span>)</span>&#123;</span><br><span class="line">  hash[cur.subject] ? <span class="string">''</span> : hash[cur.subject] = <span class="literal">true</span> &amp;&amp; res.push(cur)  </span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reduce(function(res,cur)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;,abc)</span><br><span class="line"></span><br><span class="line">//我个人理解abc这儿是一个初始化数据，比如写0，就定义为数字类型，res的初始值或者初始类型</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6之reduce遍历数组，利用reduce可以进行对数组对象的去重
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ES6" scheme="http://link01.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>angular上传图片</title>
    <link href="http://link01.top/2017/08/18/E%CC%81I%CC%88%C2%B4%C2%ABI%CC%81%C2%BC%C3%86%C2%AC/"/>
    <id>http://link01.top/2017/08/18/ÉÏ´«Í¼Æ¬/</id>
    <published>2017-08-18T05:47:03.000Z</published>
    <updated>2017-08-18T05:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h3 id="上传图片-客户端"><a href="#上传图片-客户端" class="headerlink" title="上传图片-客户端"></a>上传图片-客户端</h3><h4 id="ng-file-upload"><a href="#ng-file-upload" class="headerlink" title="ng-file-upload"></a>ng-file-upload</h4><ol><li><p>安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bower install ng-file-upload-shim --save(for non html5 suppport)</span><br><span class="line">bower install ng-file-upload --save</span><br></pre></td></tr></table></figure></li><li><p>导入js文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;ng-file-upload-shim(.min).js&quot;&gt;&lt;/script&gt; &lt;!-- for no html5 browsers support --&gt;</span><br><span class="line">&lt;script src=&quot;ng-file-upload(.min).js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>加入依赖模块</p></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;personalZhaoPin&apos;,[&apos;ngFileUpload&apos;]);</span><br></pre></td></tr></table></figure></code></pre><ol><li>前端页面</li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img ngf-src=&quot;data.file || data.defaultImage&quot; class=&quot;img-responsive&quot;/&gt;</span><br><span class="line">&lt;div class=&quot;button&quot; ngf-select=&quot;&quot; ngf-pattern=&quot;&apos;image/*&apos;&quot; ngf-multiple=&quot;false&quot; ng-model=&quot;data.file&quot;&gt;</span><br><span class="line">选择文件</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button ng-click=&quot;upload()&quot;&gt;upload&lt;/button&gt;</span><br></pre></td></tr></table></figure></code></pre><ol><li>控制器代码</li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$scope.data = &#123;</span><br><span class="line">    file: null</span><br><span class="line">&#125;;</span><br><span class="line">$scope.upload = function () &#123;</span><br><span class="line">    if (!$scope.data.file) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var url = $scope.params.url;  //params是model传的参数，图片上传接口的url</span><br><span class="line">    var data = angular.copy($scope.params.data || &#123;&#125;); // 接口需要的额外参数，比如指定所上传的图片属于哪个用户: &#123; UserId: 78 &#125;</span><br><span class="line">    data.file = $scope.data.file;</span><br><span class="line"></span><br><span class="line">    Upload.upload(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;).success(function (data) &#123;</span><br><span class="line">        $scope.hide(data);</span><br><span class="line">    &#125;).error(function () &#123;</span><br><span class="line">        logger.log(&apos;error&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre><h4 id="图片剪切"><a href="#图片剪切" class="headerlink" title="图片剪切"></a>图片剪切</h4><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install ngImgCrop</span><br></pre></td></tr></table></figure></li><li><p>导入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;ng-img-crop.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;  href=&quot;ng-img-crop.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>指令参数</p></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    &lt;img-crop</span><br><span class="line">    image=&quot;&#123;string&#125;&quot;                 //需要截取的图片变量名</span><br><span class="line">    result-image=&quot;&#123;string&#125;&quot;          //截取后所赋值的变量名</span><br><span class="line">   [change-on-fly=&quot;&#123;boolean&#125;&quot;]       //是否实时更新用户截取图像的预览,若为否,则会等用户停止动作后更新预览的图像</span><br><span class="line">   [area-type=&quot;&#123;circle|square&#125;&quot;]     //截取图像框的形状(圆形或正方形)</span><br><span class="line">   [area-min-size=&quot;&#123;number&#125;&quot;]        //截取图像框的最小面积</span><br><span class="line">   [result-image-size=&quot;&#123;number&#125;&quot;]    //截取后图像的大小</span><br><span class="line">   [result-image-format=&quot;&#123;string&#125;&quot;]  //截取后图像的格式</span><br><span class="line">   [result-image-quality=&quot;&#123;number&#125;&quot;] //截取后图像的质量</span><br><span class="line">   [on-change=&quot;&#123;expression&#125;&quot;]        </span><br><span class="line">   [on-load-begin=&quot;&#123;expression&quot;]</span><br><span class="line">   [on-load-done=&quot;&#123;expression&quot;]</span><br><span class="line">   [on-load-error=&quot;&#123;expression&quot;]</span><br><span class="line">&gt;&lt;/img-crop&gt;</span><br></pre></td></tr></table></figure></code></pre><h4 id="服务器端代码"><a href="#服务器端代码" class="headerlink" title="服务器端代码"></a>服务器端代码</h4><ol><li><p>安装formidable</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm intall formidable --save</span><br></pre></td></tr></table></figure></li><li><p>post 路由代码</p></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">var form = new formidable.IncomingForm();</span><br><span class="line">form.parse(req, function (err, fields, files) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        response.locals.error = err;</span><br><span class="line">        // response.render(&quot;uploads&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userDAO.getUserById(fields.email,function (rr) &#123;</span><br><span class="line">        if(rr[0].num==1)&#123;</span><br><span class="line">            res.send(&apos;用户已存在&apos;);</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(&quot;fields&gt;&gt;&gt;&quot;+JSON.stringify(fields));</span><br><span class="line">            // console.log(&quot;file------&quot;+util.inspect(files));</span><br><span class="line">            //     for(file in files)&#123;</span><br><span class="line">            //         console.log(&quot;file&gt;&gt;&gt;&gt;&gt;&quot;+file);</span><br><span class="line">            //     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var extName =&apos;&apos;;  //后缀名</span><br><span class="line">            console.log(&apos;files.in_file.type: &apos;+files.fileImage01.type);</span><br><span class="line">            switch (files.fileImage01.type) &#123;  //此处in_file  为页面端 &lt;input type=file name=in_file&gt;</span><br><span class="line">                case &apos;image/jpeg&apos;:</span><br><span class="line">                    extName = &apos;jpeg&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;image/jpg&apos;:</span><br><span class="line">                    extName = &apos;jpg&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;image/png&apos;:</span><br><span class="line">                    extName = &apos;png&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;image/x-png&apos;:</span><br><span class="line">                    extName = &apos;png&apos;;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(extName.length == 0)&#123;</span><br><span class="line">                res.send(&apos;只支持png和jpg格式图片&apos;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                form.uploadDir = &quot;../public&quot;+AVATAR_UPLOAD_FOLDER;     //设置上传目录</span><br><span class="line">                form.keepExtensions = true;     //保留后缀</span><br><span class="line">                form.maxFieldsSize = 2 * 1024;   //文件大小</span><br><span class="line">                console.log(&apos;here&apos;);</span><br><span class="line">                var avatarName = createUnique.creatName() + &apos;.&apos; + extName;</span><br><span class="line">                var newPath = form.uploadDir + avatarName;</span><br><span class="line">                fs.renameSync(files.fileImage01.path, newPath);  //重命名</span><br><span class="line">                var user=&#123;&#125;;</span><br><span class="line">                user.email=fields.email;</span><br><span class="line">                user.password=fields.password;</span><br><span class="line">                user.user_icon=avatarName;</span><br><span class="line">                userDAO.regist(user,function (_result) &#123;</span><br><span class="line">                    if(_result.affectedRows==1)&#123;</span><br><span class="line">                        res.send(&apos;uploads success&apos;);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        res.send(&apos;uploads fail&apos;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    console.log(&quot;add img ---end&quot;);</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      angular上传图片-客户端ng-file-upload
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="angular" scheme="http://link01.top/tags/angular/"/>
    
      <category term="upload" scheme="http://link01.top/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>article title</title>
    <link href="http://link01.top/2017/08/18/article-title/"/>
    <id>http://link01.top/2017/08/18/article-title/</id>
    <published>2017-08-18T05:05:26.000Z</published>
    <updated>2017-08-18T05:05:26.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用一些方法</title>
    <link href="http://link01.top/2017/08/18/%E5%B8%B8%E7%94%A8%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/"/>
    <id>http://link01.top/2017/08/18/常用一些方法/</id>
    <published>2017-08-18T05:05:26.000Z</published>
    <updated>2018-05-09T08:58:09.737Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浏览器URL中查询字符串中的参数</span></span><br><span class="line"><span class="comment">//http://www.runoob.com/jquery/misc-trim.html?channelid=12333&amp;name=xiaoming&amp;age=23</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showWindowHref</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sHref = <span class="built_in">window</span>.location.href;</span><br><span class="line">    <span class="keyword">var</span> args = sHref.split(<span class="string">'?'</span>);</span><br><span class="line">    <span class="keyword">if</span>(args[<span class="number">0</span>] == sHref)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = args[<span class="number">1</span>].split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> arg = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">        obj[arg[<span class="number">0</span>]] = arg[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> href = showWindowHref(); <span class="comment">// obj</span></span><br><span class="line"><span class="built_in">console</span>.log(href[<span class="string">'name'</span>]); <span class="comment">// xiaoming</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间处理</span></span><br><span class="line">    FormatDateTime:<span class="function"><span class="keyword">function</span>(<span class="params">strTime</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strTime)&#123;</span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(strTime),</span><br><span class="line">                Y = date.getFullYear(),</span><br><span class="line">                m = date.getMonth() + <span class="number">1</span>,</span><br><span class="line">                d = date.getDate(),</span><br><span class="line">                H = date.getHours(),</span><br><span class="line">                i = date.getMinutes(),</span><br><span class="line">                s = date.getSeconds();</span><br><span class="line">            <span class="keyword">if</span> (m &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                m = <span class="string">'0'</span> + m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (d &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                d = <span class="string">'0'</span> + d;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (H &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                H = <span class="string">'0'</span> + H;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                i = <span class="string">'0'</span> + i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                s = <span class="string">'0'</span> + s;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  &lt;!-- 获取时间格式 2017-01-03 10:13:48 --&gt;</span></span><br><span class="line">            <span class="comment">//  var t = Y+'-'+m+'-'+d+' '+H+':'+i+':'+s;</span></span><br><span class="line">            <span class="keyword">var</span> t = Y+<span class="string">'-'</span>+m+<span class="string">'-'</span>+d;</span><br><span class="line">            <span class="comment">//  &lt;!-- 获取时间格式 2017-01-03 --&gt;</span></span><br><span class="line">            <span class="comment">//  var t = Y + '-' + m + '-' + d;</span></span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickerFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setCookie=<span class="function"><span class="keyword">function</span>(<span class="params">objName,objValue,path,objHours</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = objName + <span class="string">"="</span> + <span class="built_in">encodeURI</span> (objValue);</span><br><span class="line">        <span class="keyword">if</span>(objHours &gt; <span class="number">0</span>)&#123;<span class="comment">//为时不设定过期时间，浏览器关闭时cookie自动消失</span></span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> ms = objHours*<span class="number">3600</span>*<span class="number">1000</span>;</span><br><span class="line">            date.setTime(date.getTime() + ms);</span><br><span class="line">            str += (<span class="string">";expires="</span> + date.toGMTString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path)&#123;</span><br><span class="line">            str+=((path) ? (<span class="string">";path="</span> + path) : <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = str;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.getCookie=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span>+name+<span class="string">"=([^;]*)(;|$)"</span>));</span><br><span class="line">        <span class="keyword">if</span>(arr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">decodeURI</span>(arr[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.delCookie=<span class="function"><span class="keyword">function</span>(<span class="params">name,path</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        exp.setTime(exp.getTime() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> cval=<span class="keyword">this</span>.getCookie(name);</span><br><span class="line">        <span class="keyword">if</span>(cval!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> str = name + <span class="string">"="</span>+<span class="string">'aaa'</span>+<span class="string">";expires="</span>+exp.toGMTString();</span><br><span class="line">            <span class="keyword">if</span>(path)&#123;</span><br><span class="line">                str+=((path) ? (<span class="string">";path="</span> + path) : <span class="string">""</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                str+=<span class="string">";path=/"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.cookie= str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.placeholder=<span class="function"><span class="keyword">function</span>(<span class="params">nodes,pcolor</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">"placeholder"</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">"input"</span>)))&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nodes.length;i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> self = nodes[i],</span><br><span class="line">                    placeholder = self.getAttribute(<span class="string">'placeholder'</span>) || <span class="string">''</span>;</span><br><span class="line">                self.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="keyword">this</span>.getAttribute(<span class="string">'placeholder'</span>)) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.value = <span class="string">''</span>;</span><br><span class="line">                        <span class="keyword">this</span>.style.color = <span class="string">""</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                self.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="string">''</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.value = <span class="keyword">this</span>.getAttribute(<span class="string">'placeholder'</span>);</span><br><span class="line">                        <span class="keyword">this</span>.style.color = pcolor;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                self.value = placeholder;</span><br><span class="line">                self.style.color = pcolor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.dateStringToLongTime=<span class="function"><span class="keyword">function</span>(<span class="params">datestr,type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr,year,month,dt,hour,minute,s,longTime,date;</span><br><span class="line">        <span class="keyword">if</span>(type!==<span class="string">" "</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arr=datestr.split(<span class="string">" "</span>)[<span class="number">0</span>].split(type);</span><br><span class="line">            year=arr[<span class="number">0</span>],month=arr[<span class="number">1</span>],dt=arr[<span class="number">2</span>];</span><br><span class="line">            hour=datestr.split(<span class="string">" "</span>)[<span class="number">1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">            minute=datestr.split(<span class="string">" "</span>)[<span class="number">1</span>].split(<span class="string">':'</span>)[<span class="number">1</span>];</span><br><span class="line">            s=datestr.split(<span class="string">" "</span>)[<span class="number">1</span>].split(<span class="string">':'</span>)[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        date=<span class="keyword">new</span> <span class="built_in">Date</span>(year,<span class="built_in">parseInt</span>(month)<span class="number">-1</span>,dt,hour,minute,s);</span><br><span class="line">        longTime=date.getTime();</span><br><span class="line">        <span class="keyword">return</span> longTime;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.longTimeToDateString=<span class="function"><span class="keyword">function</span>(<span class="params">longtime,type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(longtime),m=(date.getMonth()+<span class="number">1</span>)&lt;<span class="number">10</span>?<span class="string">"0"</span>+(date.getMonth()+<span class="number">1</span>):(date.getMonth()+<span class="number">1</span>),</span><br><span class="line">            d=date.getDate()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getDate():date.getDate(),h=date.getHours()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getHours():date.getHours(),</span><br><span class="line">            min=date.getMinutes()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getMinutes():date.getMinutes(),</span><br><span class="line">            s=date.getSeconds()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getSeconds():date.getSeconds();</span><br><span class="line">        <span class="keyword">var</span> str=date.getFullYear()+type+m+type+d+<span class="string">" "</span>+h+<span class="string">":"</span>+min+<span class="string">":"</span>+s;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.dateToString=<span class="function"><span class="keyword">function</span> (<span class="params">date,type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> m=(date.getMonth()+<span class="number">1</span>)&lt;<span class="number">10</span>?<span class="string">"0"</span>+(date.getMonth()+<span class="number">1</span>):(date.getMonth()+<span class="number">1</span>),</span><br><span class="line">            d=date.getDate()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getDate():date.getDate(),h=date.getHours()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getHours():date.getHours(),</span><br><span class="line">            min=date.getMinutes()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getMinutes():date.getMinutes(),</span><br><span class="line">            s=date.getSeconds()&lt;<span class="number">10</span>?<span class="string">"0"</span>+date.getSeconds():date.getSeconds();</span><br><span class="line">        <span class="keyword">var</span> str=date.getFullYear()+type+m+type+d+<span class="string">" "</span>+h+<span class="string">":"</span>+min+<span class="string">":"</span>+s;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.returnTop=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.scrollTop=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.scrollTop=<span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.validate=<span class="function"><span class="keyword">function</span> (<span class="params">v,type</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// type:1.空值,2.手机,3.email,4.数字,5,校验密码:数字、字母、下划线6-12位</span></span><br><span class="line">        <span class="keyword">var</span> reg;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span>(!v)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                reg=<span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>;</span><br><span class="line">                <span class="keyword">return</span> reg.test(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                reg=<span class="regexp">/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/</span>;</span><br><span class="line">                <span class="keyword">return</span> reg.test(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                reg=<span class="regexp">/^[0-9]$/</span>;</span><br><span class="line">                <span class="keyword">return</span> reg.test(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                reg=<span class="regexp">/^[\w*\_*]&#123;6,12&#125;$/</span>;</span><br><span class="line">                <span class="keyword">return</span> reg.test(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.getParam=<span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> url=<span class="built_in">window</span>.location.href,search=<span class="built_in">window</span>.location.search,</span><br><span class="line">            paramsArr=search.replace(<span class="string">"?"</span>,<span class="string">''</span>).split(<span class="string">'&amp;'</span>),params=&#123;&#125;,result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;paramsArr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(paramsArr[i].indexOf(p)===<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result=paramsArr[i].split(<span class="string">'='</span>)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.windowClientSize=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">window</span>,</span><br><span class="line">            a = <span class="string">'inner'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">'innerWidth'</span> <span class="keyword">in</span> <span class="built_in">window</span> ))&#123;</span><br><span class="line">            a = <span class="string">'client'</span>;</span><br><span class="line">            e = <span class="built_in">document</span>.documentElement || <span class="built_in">document</span>.body;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">width</span> : e[ a+<span class="string">'Width'</span> ] , <span class="attr">height</span> : e[ a+<span class="string">'Height'</span> ] &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下方法都兼容ie</span></span><br><span class="line">    <span class="comment">//页面的滚动条是否到达底部</span></span><br><span class="line">    <span class="keyword">this</span>.isBottom=<span class="function"><span class="keyword">function</span> (<span class="params">offset</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//页面高度=滚动条高度+可视区域高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight=<span class="keyword">this</span>.getClientHeight(),scrollTop=<span class="keyword">this</span>.getScrollTop(),</span><br><span class="line">            pageHeight=<span class="keyword">this</span>.getScrollHeight();</span><br><span class="line">        <span class="keyword">if</span>(pageHeight+offset&lt;=clientHeight+scrollTop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//某个元素的滚动条是否到达底部</span></span><br><span class="line">    <span class="keyword">this</span>.isBottomForElement=<span class="function"><span class="keyword">function</span> (<span class="params">offset,element</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//容器页面高度=容器滚动条高度+容器可视区域高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight=element.offsetHeight,scrollTop=element.scrollTop,</span><br><span class="line">            pageHeight=element.scrollHeight;</span><br><span class="line">        <span class="keyword">if</span>(pageHeight+offset&lt;=clientHeight+scrollTop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//某个元素是否到达底部</span></span><br><span class="line">    <span class="keyword">this</span>.isMoveToPos=<span class="function"><span class="keyword">function</span> (<span class="params">element,offset,type,leaveStop</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//元素高度=滚动条高度+可视区域高度</span></span><br><span class="line">        <span class="keyword">var</span> clientHeight=<span class="keyword">this</span>.getClientHeight(),scrollTop=<span class="keyword">this</span>.getScrollTop(),elementHeight;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="string">'top'</span>) elementHeight=<span class="keyword">this</span>.offsetTop(element);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="string">"bottom"</span>) elementHeight=<span class="keyword">this</span>.offsetTop(element)+element.offsetHeight;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">console</span>.error(<span class="string">"isMoveToPos type is 'top' or 'bottom'"</span>);</span><br><span class="line">        <span class="keyword">if</span>(elementHeight+offset&lt;=clientHeight+scrollTop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.getScrollTop=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> scrollTop=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement&amp;&amp;<span class="built_in">document</span>.documentElement.scrollTop)</span><br><span class="line">        &#123;</span><br><span class="line">            scrollTop=<span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.body)</span><br><span class="line">        &#123;</span><br><span class="line">            scrollTop=<span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scrollTop;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.getClientHeight=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> clientHeight=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.body.clientHeight&amp;&amp;<span class="built_in">document</span>.documentElement.clientHeight)</span><br><span class="line">        &#123;</span><br><span class="line">            clientHeight = (<span class="built_in">document</span>.body.clientHeight&lt;<span class="built_in">document</span>.documentElement.clientHeight)?<span class="built_in">document</span>.body.clientHeight:<span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            clientHeight = (<span class="built_in">document</span>.body.clientHeight&gt;<span class="built_in">document</span>.documentElement.clientHeight)?<span class="built_in">document</span>.body.clientHeight:<span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clientHeight;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/********************</span></span><br><span class="line"><span class="comment">     * 取文档内容实际高度</span></span><br><span class="line"><span class="comment">     *******************/</span></span><br><span class="line">    <span class="keyword">this</span>.getScrollHeight=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollHeight,<span class="built_in">document</span>.documentElement.scrollHeight);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     获取元素离页面顶部距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.offsetTop=<span class="function"><span class="keyword">function</span> (<span class="params"> elements </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> top = elements.offsetTop;</span><br><span class="line">        <span class="keyword">var</span> parent = elements.offsetParent;</span><br><span class="line">        <span class="keyword">while</span>( parent != <span class="literal">null</span> )&#123;</span><br><span class="line">            top += parent.offsetTop;</span><br><span class="line">            parent = parent.offsetParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.offsetLeft=<span class="function"><span class="keyword">function</span>(<span class="params"> elements </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> left = elements.offsetLeft;</span><br><span class="line">        <span class="keyword">var</span> parent = elements.offsetParent;</span><br><span class="line">        <span class="keyword">while</span>( parent != <span class="literal">null</span> )&#123;</span><br><span class="line">            left += parent.offsetLeft;</span><br><span class="line">            parent = parent.offsetParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> quicker=<span class="keyword">new</span> quickerFunction();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      浏览器URL中查询字符串中的参数；获取设置cookie；时间格式化；获取元素离页面顶部距离；页面的滚动条是否到达底部；回到顶部；常用正则；取文档内容实际高度
    
    </summary>
    
      <category term="默认分类" scheme="http://link01.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://link01.top/2017/08/18/hello-world/"/>
    <id>http://link01.top/2017/08/18/hello-world/</id>
    <published>2017-08-18T04:56:09.000Z</published>
    <updated>2017-08-18T04:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
